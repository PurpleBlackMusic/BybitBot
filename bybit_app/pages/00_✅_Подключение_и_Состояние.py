
from __future__ import annotations
import streamlit as st
from utils.envs import get_api_client, get_settings, update_settings, creds_ok
from utils.log import log

st.title("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

s = get_settings()


def _mask(value: str) -> str:
    if not value:
        return ""
    return "‚Ä¢" * min(len(value), 6)


with st.form("creds"):
    st.subheader("–î–æ—Å—Ç—É–ø –∫ Bybit")
    st.caption("–ö–ª—é—á–∏ –∏ —Ä–µ–∂–∏–º DRY-RUN –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–µ—Ç–∏.")

    testnet_active = st.toggle(
        "–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Ç—å: Testnet",
        value=s.testnet,
        help="–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–∞–±–æ—á—É—é —Å–µ—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.",
    )

    col_testnet, col_mainnet = st.columns(2)

    with col_testnet:
        st.markdown("#### Testnet")
        api_key_testnet_placeholder = _mask(s.get_api_key(testnet=True))
        api_secret_testnet_placeholder = _mask(s.get_api_secret(testnet=True))
        api_key_testnet = st.text_input(
            "API Key (Testnet)",
            value="",
            type="password",
            placeholder=api_key_testnet_placeholder or "",
            help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–ª—é—á.",
        )
        api_secret_testnet = st.text_input(
            "API Secret (Testnet)",
            value="",
            type="password",
            placeholder=api_secret_testnet_placeholder or "",
            help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç.",
        )
        dry_testnet = st.toggle(
            "DRY-RUN Testnet",
            value=s.get_dry_run(testnet=True),
            key="dry_run_testnet_toggle",
            help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ ‚Äî –æ—Ä–¥–µ—Ä–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ –±–∏—Ä–∂—É.",
        )
        clear_testnet = st.checkbox(
            "–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏",
            value=False,
            key="clear_keys_testnet",
        )

    with col_mainnet:
        st.markdown("#### Mainnet")
        api_key_mainnet_placeholder = _mask(s.get_api_key(testnet=False))
        api_secret_mainnet_placeholder = _mask(s.get_api_secret(testnet=False))
        api_key_mainnet = st.text_input(
            "API Key (Mainnet)",
            value="",
            type="password",
            placeholder=api_key_mainnet_placeholder or "",
            help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–ª—é—á.",
        )
        api_secret_mainnet = st.text_input(
            "API Secret (Mainnet)",
            value="",
            type="password",
            placeholder=api_secret_mainnet_placeholder or "",
            help="–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç.",
        )
        dry_mainnet = st.toggle(
            "DRY-RUN Mainnet",
            value=s.get_dry_run(testnet=False),
            key="dry_run_mainnet_toggle",
            help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ ‚Äî –æ—Ä–¥–µ—Ä–∞ –≤ –±–æ–µ–≤–æ–π —Å–µ—Ç–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –Ω–∞ –±–∏—Ä–∂—É.",
        )
        clear_mainnet = st.checkbox(
            "–û—á–∏—Å—Ç–∏—Ç—å –±–æ–µ–≤—ã–µ –∫–ª—é—á–∏",
            value=False,
            key="clear_keys_mainnet",
        )

    submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
    if submitted:
        payload: dict[str, object] = {}

        if testnet_active != s.testnet:
            payload["testnet"] = testnet_active

        network_entries = [
            (
                True,
                clear_testnet,
                api_key_testnet.strip(),
                api_secret_testnet.strip(),
                dry_testnet,
                s.get_dry_run(testnet=True),
            ),
            (
                False,
                clear_mainnet,
                api_key_mainnet.strip(),
                api_secret_mainnet.strip(),
                dry_mainnet,
                s.get_dry_run(testnet=False),
            ),
        ]

        for is_testnet, clear, key_value, secret_value, dry_value, current_dry in network_entries:
            key_field = "api_key_testnet" if is_testnet else "api_key_mainnet"
            secret_field = "api_secret_testnet" if is_testnet else "api_secret_mainnet"
            dry_field = "dry_run_testnet" if is_testnet else "dry_run_mainnet"

            if clear:
                payload[key_field] = ""
                payload[secret_field] = ""
            else:
                if key_value:
                    payload[key_field] = key_value
                if secret_value:
                    payload[secret_field] = secret_value

            if dry_value != current_dry:
                payload[dry_field] = dry_value

        update_settings(**payload)
        st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

st.divider()
st.subheader("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
if creds_ok():
    api = get_api_client()
    try:
        t = api.server_time()
        st.success(f"–°–≤—è–∑—å —Å API –µ—Å—Ç—å. –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {t.get('result',{}).get('timeSecond', '‚Äî')}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    st.write("---")
    st.caption("–õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—ã")
    sym = st.text_input("–¢–∏–∫–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", value="BTCUSDT")
    if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ç–∏–∫–µ—Ä"):
        try:
            info = api.instruments_info(category="spot", symbol=sym.strip().upper())
            st.json(info)
            tk = api.tickers(category="spot", symbol=sym.strip().upper())
            st.json(tk)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")
else:
    st.warning("–£–∫–∞–∂–∏—Ç–µ API –∫–ª—é—á–∏ –≤—ã—à–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ.")
