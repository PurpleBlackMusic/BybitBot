
from __future__ import annotations
import streamlit as st
from utils.envs import get_api_client, get_settings, update_settings, creds_ok
from utils.log import log

st.title("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

s = get_settings()


def _mask(value: str) -> str:
    if not value:
        return ""
    return "‚Ä¢" * min(len(value), 6)


with st.form("creds"):
    st.subheader("–î–æ—Å—Ç—É–ø –∫ Bybit")
    api_key_placeholder = _mask(s.api_key)
    api_secret_placeholder = _mask(s.api_secret)
    api_key = st.text_input(
        "API Key",
        value="",
        type="password",
        placeholder=api_key_placeholder or "",
        help="–ü–æ–ª–µ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–Ω–µ–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∫–ª—é—á.",
    )
    api_secret = st.text_input(
        "API Secret",
        value="",
        type="password",
        placeholder=api_secret_placeholder or "",
        help="–ü–æ–ª–µ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–Ω–µ–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç.",
    )
    testnet = st.toggle("Testnet", value=s.testnet)
    dry = st.toggle(
        "DRY-RUN (—Å–∏–º—É–ª—è—Ü–∏—è)",
        value=s.dry_run,
        help="–ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ ‚Äî –∑–∞—è–≤–∫–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è.",
    )
    clear_keys = st.checkbox(
        "–û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∫–ª—é—á–∏", value=False, help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–ª–∞–∂–æ–∫, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞."
    )
    submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
    if submitted:
        payload: dict[str, object] = {}

        if testnet != s.testnet:
            payload["testnet"] = testnet
        if dry != s.dry_run:
            payload["dry_run"] = dry

        if clear_keys:
            payload.update({"api_key": "", "api_secret": ""})
        else:
            cleaned_key = api_key.strip()
            cleaned_secret = api_secret.strip()
            if cleaned_key:
                payload["api_key"] = cleaned_key
            if cleaned_secret:
                payload["api_secret"] = cleaned_secret
        update_settings(**payload)
        st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")

st.divider()
st.subheader("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
if creds_ok():
    api = get_api_client()
    try:
        t = api.server_time()
        st.success(f"–°–≤—è–∑—å —Å API –µ—Å—Ç—å. –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {t.get('result',{}).get('timeSecond', '‚Äî')}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    st.write("---")
    st.caption("–õ–æ–∫–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—ã")
    sym = st.text_input("–¢–∏–∫–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", value="BTCUSDT")
    if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —Ç–∏–∫–µ—Ä"):
        try:
            info = api.instruments_info(category="spot", symbol=sym.strip().upper())
            st.json(info)
            tk = api.tickers(category="spot", symbol=sym.strip().upper())
            st.json(tk)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")
else:
    st.warning("–£–∫–∞–∂–∏—Ç–µ API –∫–ª—é—á–∏ –≤—ã—à–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ.")
