from __future__ import annotations

import pandas as pd
import streamlit as st

from utils.guardian_bot import GuardianBot
from utils.ui import safe_set_page_config

safe_set_page_config(page_title="DeepSeek —Å–∏–≥–Ω–∞–ª—ã", page_icon="üß†", layout="wide")

st.title("üß† DeepSeek —Å–∏–≥–Ω–∞–ª—ã –∏ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä–µ—à–µ–Ω–∏—è")
st.caption(
    "–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–æ–±—Ä–∞–Ω—ã —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç DeepSeek, –∏—Ö —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ —Ç–æ, –∫–∞–∫ –æ–Ω–∏ —É—Å–∏–ª–∏–≤–∞—é—Ç –∏–ª–∏ –æ—Å–ª–∞–±–ª—è—é—Ç —Ä–µ—à–µ–Ω–∏—è –±–æ—Ç–∞."
)

bot = GuardianBot()
watchlist = bot.market_watchlist()

rows: list[dict[str, object]] = []
for entry in watchlist:
    if not isinstance(entry, dict):
        continue
    deepseek_info = entry.get("deepseek")
    if not isinstance(deepseek_info, dict) or not deepseek_info:
        continue
    guidance = deepseek_info.get("guidance")
    if not isinstance(guidance, dict):
        guidance = {}
    rows.append(
        {
            "symbol": entry.get("symbol"),
            "trend": entry.get("trend"),
            "probability": entry.get("probability"),
            "ev_bps": entry.get("ev_bps"),
            "score": deepseek_info.get("score"),
            "direction": deepseek_info.get("direction"),
            "summary": deepseek_info.get("summary"),
            "stop_loss": deepseek_info.get("stop_loss"),
            "take_profit": deepseek_info.get("take_profit"),
            "guidance": guidance,
        }
    )

if not rows:
    st.info(
        "–í –∞–∫—Ç—É–∞–ª—å–Ω–æ–º –≤–æ—Ç—á–ª–∏—Å—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ—Ç DeepSeek."
    )
else:
    table_data: list[dict[str, object]] = []
    for row in rows:
        guidance = row.get("guidance") if isinstance(row.get("guidance"), dict) else {}
        influence = guidance.get("influence") if isinstance(guidance, dict) else None
        multiplier = guidance.get("multiplier") if isinstance(guidance, dict) else None
        table_data.append(
            {
                "–°–∏–º–≤–æ–ª": row.get("symbol"),
                "–¢—Ä–µ–Ω–¥": row.get("trend"),
                "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å": row.get("probability"),
                "EV (–±.–ø.)": row.get("ev_bps"),
                "DeepSeek score": row.get("score"),
                "DeepSeek –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": row.get("direction"),
                "–í–ª–∏—è–Ω–∏–µ": influence,
                "–ú–Ω–æ–∂–∏—Ç–µ–ª—å": multiplier,
                "–°—Ç–æ–ø-–ª–æ—Å—Å": row.get("stop_loss"),
                "–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç": row.get("take_profit"),
                "–ö—Ä–∞—Ç–∫–æ": row.get("summary"),
            }
        )

    df = pd.DataFrame(table_data)
    df["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"] = pd.to_numeric(df["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"], errors="coerce")
    df["EV (–±.–ø.)"] = pd.to_numeric(df["EV (–±.–ø.)"], errors="coerce")
    df["DeepSeek score"] = pd.to_numeric(df["DeepSeek score"], errors="coerce")
    df["–ú–Ω–æ–∂–∏—Ç–µ–ª—å"] = pd.to_numeric(df["–ú–Ω–æ–∂–∏—Ç–µ–ª—å"], errors="coerce")
    df["–°—Ç–æ–ø-–ª–æ—Å—Å"] = pd.to_numeric(df["–°—Ç–æ–ø-–ª–æ—Å—Å"], errors="coerce")
    df["–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç"] = pd.to_numeric(df["–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç"], errors="coerce")

    st.subheader("–§–∏–ª—å—Ç—Ä –¥–æ–≤–µ—Ä–∏—è")
    min_score = st.slider(
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å DeepSeek",
        min_value=0.0,
        max_value=1.0,
        value=0.45,
        step=0.05,
    )
    filtered = df[df["DeepSeek score"].fillna(0.0) >= min_score].copy()
    if filtered.empty:
        st.warning("–ü–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –ø–æ—Ä–æ–≥—É –ø–æ–∫–∞ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤.")
    else:
        col1, col2, col3 = st.columns(3)
        avg_score = filtered["DeepSeek score"].mean()
        boost_count = (filtered["–í–ª–∏—è–Ω–∏–µ"].str.lower() == "boost").sum()
        reduce_count = (filtered["–í–ª–∏—è–Ω–∏–µ"].str.lower() == "reduce").sum()
        col1.metric("–°—Ä–µ–¥–Ω–∏–π score", f"{avg_score:.2f}")
        col2.metric("–£—Å–∏–ª–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤", int(boost_count))
        col3.metric("–û—Å–ª–∞–±–ª–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤", int(reduce_count))

        display_df = filtered.rename(
            columns={
                "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å": "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, %",
                "–ú–Ω–æ–∂–∏—Ç–µ–ª—å": "–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∏—Å–∫–∞",
            }
        )
        display_df["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, %"] = display_df["–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, %"].apply(
            lambda v: None if pd.isna(v) else round(float(v) * 100, 2)
        )
        st.dataframe(
            display_df,
            use_container_width=True,
            hide_index=True,
        )

    status = bot.status_summary()
    current_symbol = str(status.get("symbol") or "").upper()
    current_entry = None
    for row in rows:
        symbol_value = str(row.get("symbol") or "").upper()
        if symbol_value == current_symbol:
            current_entry = row
            break

    with st.container(border=True):
        st.subheader("–¢–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ –±–æ—Ç–∞")
        if not current_entry:
            st.caption(
                "–ë–æ—Ç –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª —Å–∏–≥–Ω–∞–ª DeepSeek –ø–æ —Ç–µ–∫—É—â–µ–º—É –∞–∫—Ç–∏–≤–Ω–æ–º—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É."
            )
        else:
            guidance = (
                current_entry.get("guidance")
                if isinstance(current_entry.get("guidance"), dict)
                else {}
            )
            cols = st.columns(3)
            cols[0].metric("–ê–∫—Ç–∏–≤", current_symbol or "‚Äî")
            cols[1].metric(
                "–í–ª–∏—è–Ω–∏–µ", guidance.get("influence", "‚Äî") or "‚Äî"
            )
            multiplier = guidance.get("multiplier")
            cols[2].metric(
                "–ú–Ω–æ–∂–∏—Ç–µ–ª—å —Ä–∏—Å–∫–∞",
                f"{multiplier:.2f}" if isinstance(multiplier, (int, float)) else "‚Äî",
            )
            allow_trade = guidance.get("allow")
            if allow_trade is False:
                st.warning(
                    "DeepSeek —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –≤–æ–∑–¥–µ—Ä–∂–∞—Ç—å—Å—è –æ—Ç —Å–¥–µ–ª–∫–∏ ‚Äî –±–æ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç —Å–∏–≥–Ω–∞–ª –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏."
                )
            elif guidance.get("influence") == "reduce":
                st.info(
                    "DeepSeek —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏, –æ–±—ä—ë–º –ø–æ–∑–∏—Ü–∏–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω."
                )
            elif guidance.get("influence") == "boost":
                st.success(
                    "–°–∏–≥–Ω–∞–ª DeepSeek —É—Å–∏–ª–∏–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ‚Äî —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω –≤–≤–µ—Ä—Ö –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö."
                )
            summary_text = current_entry.get("summary")
            if summary_text:
                st.markdown(f"**–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ DeepSeek:** {summary_text}")
            stop_loss = current_entry.get("stop_loss")
            take_profit = current_entry.get("take_profit")
            if stop_loss or take_profit:
                st.caption(
                    "–ê–≤—Ç–æ–ø–∏–ª–æ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Ö —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏ —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞."
                )
                bullet_lines: list[str] = []
                if isinstance(stop_loss, (int, float)):
                    bullet_lines.append(f"- –°—Ç–æ–ø-–ª–æ—Å—Å: {float(stop_loss):.4f}")
                else:
                    bullet_lines.append("- –°—Ç–æ–ø-–ª–æ—Å—Å: –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
                if isinstance(take_profit, (int, float)):
                    bullet_lines.append(f"- –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {float(take_profit):.4f}")
                else:
                    bullet_lines.append("- –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
                st.markdown("\n".join(bullet_lines))

    with st.expander("–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ DeepSeek", expanded=False):
        st.json(rows)
