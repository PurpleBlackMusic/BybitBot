from __future__ import annotations

import streamlit as st
import pandas as pd

from utils.guardian_bot import GuardianBot


st.title("üõ° –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å–ø–æ—Ç-–±–æ—Ç")
st.caption(
    "–ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ç–æ–ª—å–∫–æ –∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Ä—ã–Ω–∫–æ–º: –±–æ—Ç –æ–±—ä—è—Å–Ω—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã, —Ä–∏—Å–∫ –∏ –ø—Ä–∏–±—ã–ª—å –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤."
)

bot = GuardianBot()
brief = bot.generate_brief()
portfolio = bot.portfolio_overview()
plan_steps = bot.plan_steps(brief)
risk_text = bot.risk_summary()
safety_notes = bot.safety_notes()
story = bot.market_story(brief)
staleness = bot.staleness_alert(brief)


with st.container(border=True):
    st.subheader("–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–µ–π—á–∞—Å")
    st.markdown(f"**{brief.headline}**")
    st.write(brief.action_text)
    st.write(brief.analysis)
    st.write(brief.confidence_text)
    st.write(brief.ev_text)
    st.info(brief.caution)
    st.caption(brief.updated_text)
    if staleness:
        st.warning(staleness)

with st.container(border=True):
    st.subheader("–ö–∞–∫ –±–æ—Ç –≤–∏–¥–∏—Ç —Ä—ã–Ω–æ–∫")
    st.write(story)
    st.caption("–ó–¥–µ—Å—å –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—Å–∞–Ω–æ, –ø–æ—á–µ–º—É –º–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–ª–∞ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

with st.container(border=True):
    st.subheader("–î–µ–Ω—å–≥–∏ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º")
    totals = portfolio.get("human_totals", {})
    col1, col2, col3 = st.columns(3)
    col1.metric("–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", totals.get("realized", "0.00 USDT"))
    col2.metric("–í —Ä–∞–±–æ—Ç–µ", totals.get("open_notional", "0.00 USDT"))
    col3.metric("–û—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫", totals.get("open_positions", "0"))

    positions = portfolio.get("positions", [])
    if positions:
        df = pd.DataFrame(positions)
        df = df.rename(
            columns={
                "symbol": "–°–∏–º–≤–æ–ª",
                "qty": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                "avg_cost": "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞",
                "notional": "–í —Ä–∞–±–æ—Ç–µ",
                "realized_pnl": "–†–µ–∑—É–ª—å—Ç–∞—Ç",
            }
        )
        st.dataframe(df, use_container_width=True)
    else:
        st.info("–°–¥–µ–ª–æ–∫ –Ω–µ—Ç ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ú—ã –Ω–µ —Ä–∏—Å–∫—É–µ–º –¥–µ–ø–æ–∑–∏—Ç–æ–º –±–µ–∑ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞.")

with st.container(border=True):
    st.subheader("–ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω")
    st.markdown("\n".join(f"{idx + 1}. {step}" for idx, step in enumerate(plan_steps)))

with st.container(border=True):
    st.subheader("–ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∏—Å–∫–∞")
    st.markdown(risk_text)
    st.caption("–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤ —Ä–∏—Å–∫-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –ª—É—á—à–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ —É—Ç–æ—á–Ω–∏—Ç—å.")

with st.container(border=True):
    st.subheader("–í–∞–∂–Ω–æ –Ω–æ–≤–∏—á–∫—É")
    for note in safety_notes:
        st.markdown(f"- {note}")

st.divider()
st.subheader("–ü–æ–æ–±—â–∞–π—Ç–µ—Å—å —Å –±–æ—Ç–æ–º")
if "guardian_chat" not in st.session_state:
    st.session_state["guardian_chat"] = [
        {"role": "assistant", "content": bot.initial_message()},
    ]

for msg in st.session_state["guardian_chat"]:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

if prompt := st.chat_input("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏‚Ä¶"):
    st.session_state["guardian_chat"].append({"role": "user", "content": prompt})
    answer = bot.answer(prompt)
    st.session_state["guardian_chat"].append({"role": "assistant", "content": answer})
    st.experimental_rerun()
