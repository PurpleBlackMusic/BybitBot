
from __future__ import annotations
import streamlit as st
from utils.envs import get_api_client, get_settings
from utils.oco import place_spot_oco
from utils.quant import clamp_qty, gte_min_notional
from utils.log import log

st.title("üéØ –°–º–∞—Ä—Ç –°–¥–µ–ª–∫–∏ ‚Äî OCO (Spot)")

s = get_settings()
if not (s.api_key and s.api_secret):
    st.warning("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ API –∫–ª—é—á–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ¬´–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ¬ª.")
    st.stop()

api = get_api_client()

with st.form("oco"):
    c1, c2, c3 = st.columns(3)
    with c1:
        symbol = st.text_input("–¢–∏–∫–µ—Ä", value="BTCUSDT").strip().upper()
        side = st.selectbox("–°—Ç–æ—Ä–æ–Ω–∞", ["Buy", "Sell"])
    with c2:
        qty = st.text_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", value="0.001")
        entry_price = st.text_input("–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞ (Limit)", value="")
    with c3:
        tp_pct = st.number_input("TP, %", value=1.0, step=0.1)
        sl_pct = st.number_input("SL, %", value=0.5, step=0.1)

    auto = st.checkbox("–ê–≤—Ç–æ—Ä–∞—Å—á—ë—Ç —Ü–µ–Ω –ø–æ %", value=True)
    tp_price = st.text_input("TP (Limit) ‚Äî –µ—Å–ª–∏ –∞–≤—Ç–æ –≤—ã–∫–ª—é—á–µ–Ω", value="")
    sl_price = st.text_input("SL (Trigger) ‚Äî –µ—Å–ª–∏ –∞–≤—Ç–æ –≤—ã–∫–ª—é—á–µ–Ω", value="")

    run = st.form_submit_button("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å OCO")

if run:
    try:
        info = api.instruments_info(category="spot", symbol=symbol)
        inst = ((info.get("result") or {}).get("list") or [{}])[0]
        pf = inst.get("priceFilter",{})
        lf = inst.get("lotSizeFilter",{})
        tick = float(pf.get("tickSize", "0.01"))
        step = float(lf.get("qtyStep", "0.00000001"))
        minNotional = float(lf.get("minNotionalValue") or lf.get("minOrderAmt") or 0)

        _entry = float(entry_price) if entry_price else None
        if auto:
            # –µ—Å–ª–∏ –Ω–µ—Ç —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ ‚Äî –∑–∞–ø—Ä–æ—Å–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å —Ç–∏–∫–µ—Ä–∞
            if _entry is None:
                t = api.tickers(category="spot", symbol=symbol)
                last = ((t.get("result") or {}).get("list") or [{}])[0].get("lastPrice")
                _entry = float(last)
            tp_val = _entry * (1 + (tp_pct/100 if side=="Buy" else -tp_pct/100))
            sl_val = _entry * (1 - (sl_pct/100 if side=="Buy" else -sl_pct/100))
        else:
            tp_val = float(tp_price)
            sl_val = float(sl_price)
            if _entry is None:
                t = api.tickers(category="spot", symbol=symbol)
                last = ((t.get("result") or {}).get("list") or [{}])[0].get("lastPrice")
                _entry = float(last)

        # –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω.–Ω–æ–º–∏–Ω–∞–ª–∞
        q_clamped = str(clamp_qty(qty, step, epsilon_steps=0))
        notional_ok = gte_min_notional(q_clamped, _entry, minNotional)

        st.caption(f"tick={tick}, step={step}, minNotional={minNotional}")
        st.write(f"–ö–≤–∞–Ω—Ç–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: `{q_clamped}`")
        st.write(f"Entry‚âà `{_entry:.8f}`, TP‚âà `{tp_val:.8f}`, SL‚âà `{sl_val:.8f}`")
        if not notional_ok:
            st.error("–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π. –£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
            st.stop()

        if s.dry_run:
            log("oco.simulated", symbol=symbol, side=side, qty=q_clamped, entry=_entry, tp=tp_val, sl=sl_val)
            st.success("DRY-RUN: —Å–¥–µ–ª–∫–∞ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞, –∑–∞—è–≤–∫–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å.")
        else:
            r = place_spot_oco(api, symbol, side, q_clamped, f"{_entry:.8f}", f"{tp_val:.8f}", f"{sl_val:.8f}")
            st.success("OCO –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
            st.json(r)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {e}")
