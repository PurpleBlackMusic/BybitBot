from __future__ import annotations

import pandas as pd
import streamlit as st
from utils.dataframe import arrow_safe

from utils.envs import get_api_client, get_settings
from utils.spot_market import wallet_balance_payload

st.title("üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å ‚Äî –î–∞—à–±–æ—Ä–¥")

s = get_settings()
if not (s.api_key and s.api_secret):
    st.warning("–£–∫–∞–∂–∏—Ç–µ API –∫–ª—é—á–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ¬´–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ¬ª.")
    st.stop()

api = get_api_client()
try:
    wb = wallet_balance_payload(api)
    raw_list = ((wb.get("result") or {}).get("list") or [{}])
    first_entry = raw_list[0] if raw_list else {}
    coins_raw = first_entry.get("coin") or []

    if isinstance(coins_raw, dict):
        coins_iterable = list(coins_raw.values())
    elif isinstance(coins_raw, list):
        coins_iterable = coins_raw
    else:
        coins_iterable = []

    table = pd.DataFrame.from_records(coins_iterable)

    st.caption("Unified Wallet ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫—Ç–∏–≤—ã")
    if table.empty:
        st.info("–ë–∞–ª–∞–Ω—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–æ–Ω–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    else:
        st.dataframe(arrow_safe(table), use_container_width=True, hide_index=True)
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
