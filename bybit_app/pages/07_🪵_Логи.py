
from __future__ import annotations
import streamlit as st, json, pandas as pd, textwrap
from utils.log import read_tail
from utils.ui import safe_set_page_config, inject_css

safe_set_page_config(page_title="–õ–æ–≥–∏", page_icon="ü™µ", layout="wide")
inject_css()
st.title("ü™µ –õ–æ–≥–∏")

lines = read_tail(1000)
rows = []
full = []
for ln in lines:
    try:
        obj = json.loads(ln)
        payload_txt = json.dumps(obj.get("payload", {}), ensure_ascii=False)
        rows.append({
            "–í—Ä–µ–º—è": obj.get("ts"),
            "–°–æ–±—ã—Ç–∏–µ": obj.get("event"),
            "Payload (–∫—Ä–∞—Ç–∫–æ)": textwrap.shorten(payload_txt, width=120, placeholder=" ‚Ä¶")
        })
        full.append({"ts": obj.get("ts"), "event": obj.get("event"), "payload": payload_txt})
    except Exception:
        rows.append({"–í—Ä–µ–º—è":"", "–°–æ–±—ã—Ç–∏–µ":"raw", "Payload (–∫—Ä–∞—Ç–∫–æ)": textwrap.shorten(ln, width=120, placeholder=" ‚Ä¶")})
        full.append({"ts":"", "event":"raw", "payload": ln})

if rows:
    df = pd.DataFrame(rows)
    st.dataframe(df, use_container_width=True, hide_index=True)
    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –ª–æ–≥ (–≤ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ)"):
        for rec in reversed(full[-200:]):  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å—Ç—Ä–æ–∫ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
            st.caption(f"{rec['ts']} ‚Ä¢ {rec['event']}")
            st.code(rec["payload"], language="json")
else:
    st.info("–õ–æ–≥ –ø—É—Å—Ç.")
