from __future__ import annotations

import pandas as pd
import streamlit as st

from utils.guardian_bot import GuardianBot

st.set_page_config(page_title="–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å–ø–æ—Ç-–±–æ—Ç", page_icon="üõ°", layout="wide")

st.title("üõ° –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å–ø–æ—Ç-–±–æ—Ç")
st.caption(
    "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –≥–¥–µ –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —É–º–Ω—ã–π —Å–ø–æ—Ç–æ–≤—ã–π –±–æ—Ç, –∑–∞—á–µ–º –æ–Ω —ç—Ç–æ –¥–µ–ª–∞–µ—Ç –∏ –∫–∞–∫–∏–µ —Ä–∏—Å–∫–∏ —É—á—Ç–µ–Ω—ã."
)

bot = GuardianBot()
brief = bot.generate_brief()
portfolio = bot.portfolio_overview()
plan_steps = bot.plan_steps(brief)
risk_text = bot.risk_summary()
safety_notes = bot.safety_notes()
story = bot.market_story(brief)
staleness = bot.staleness_alert(brief)
scorecard = bot.signal_scorecard(brief)
watchlist = bot.market_watchlist()
recent_trades = bot.recent_trades()
trade_stats = bot.trade_statistics()

with st.container(border=True):
    st.subheader("–¢–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª")
    st.markdown(f"**{brief.headline}**")
    st.write(brief.action_text)
    st.write(brief.analysis)
    st.write(brief.confidence_text)
    st.write(brief.ev_text)
    st.info(brief.caution)
    st.caption(brief.updated_text)
    if staleness:
        st.warning(staleness)

with st.container(border=True):
    st.subheader("–ö–∞–∫ –±–æ—Ç –≤–∏–¥–∏—Ç —Ä—ã–Ω–æ–∫")
    st.write(story)
    st.caption("–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –ø–æ—á–µ–º—É –≤—ã–±—Ä–∞–Ω–æ –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

with st.container(border=True):
    st.subheader("–î–µ–Ω—å–≥–∏ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º")
    totals = portfolio.get("human_totals", {})
    col1, col2, col3 = st.columns(3)
    col1.metric("–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", totals.get("realized", "0.00 USDT"))
    col2.metric("–í —Ä–∞–±–æ—Ç–µ", totals.get("open_notional", "0.00 USDT"))
    col3.metric("–û—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫", totals.get("open_positions", "0"))

    positions = portfolio.get("positions", [])
    if positions:
        df = pd.DataFrame(positions)
        df = df.rename(
            columns={
                "symbol": "–°–∏–º–≤–æ–ª",
                "qty": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                "avg_cost": "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞",
                "notional": "–û–±—ä—ë–º –≤ —Ä–∞–±–æ—Ç–µ",
                "realized_pnl": "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL",
            }
        )
        st.dataframe(df, use_container_width=True, hide_index=True)
    else:
        st.info("–°–¥–µ–ª–æ–∫ –Ω–µ—Ç ‚Äî –¥–µ–ø–æ–∑–∏—Ç –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –∂–¥—ë–º —Ö–æ—Ä–æ—à–∏–π —Å–∏–≥–Ω–∞–ª.")

with st.container(border=True):
    st.subheader("–ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω")
    st.markdown("\n".join(f"{idx + 1}. {step}" for idx, step in enumerate(plan_steps)))

with st.container(border=True):
    st.subheader("–ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∏—Å–∫–∞")
    st.markdown(risk_text)
    st.caption("–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –ª—É—á—à–µ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É –Ω–∏–∂–µ.")

with st.container(border=True):
    st.subheader("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
    for note in safety_notes:
        st.markdown(f"- {note}")

with st.expander("ü´• –°–∫—Ä—ã—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è –±–æ—Ç–∞"):
    st.caption(
        "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏ –∏—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω."
    )

    if scorecard:
        st.markdown("#### –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–∏–≥–Ω–∞–ª–∞")
        df_score = pd.DataFrame([scorecard])
        st.dataframe(df_score, use_container_width=True, hide_index=True)

    if watchlist:
        st.markdown("#### –ù–∞–±–ª—é–¥–∞–µ–º—ã–µ –ø–∞—Ä—ã")
        df_watch = pd.DataFrame(watchlist)
        st.dataframe(df_watch, use_container_width=True, hide_index=True)
    else:
        st.info("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç ‚Äî –±–æ—Ç —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –ø–∞—Ä–µ.")

    if recent_trades:
        st.markdown("#### –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏")
        df_trades = pd.DataFrame(recent_trades)
        st.dataframe(df_trades, use_container_width=True, hide_index=True)
    else:
        st.caption("–ñ—É—Ä–Ω–∞–ª —Å–¥–µ–ª–æ–∫ –ø—É—Å—Ç ‚Äî –∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π –æ—Ç –±–∏—Ä–∂–∏.")

    if trade_stats.get("trades"):
        st.markdown("#### –ö–∞–∫ –±–æ—Ç –∏—Å–ø–æ–ª–Ω—è–µ—Ç —Å–¥–µ–ª–∫–∏")
        col_a, col_b, col_c = st.columns(3)
        col_a.metric("–°–æ–≤–µ—Ä—à–µ–Ω–æ —Å–¥–µ–ª–æ–∫", int(trade_stats.get("trades", 0)))
        col_b.metric("–û–±–æ—Ä–æ—Ç", trade_stats.get("gross_volume_human", "0.00 USDT"))
        maker_ratio = float(trade_stats.get("maker_ratio", 0.0)) * 100.0
        col_c.metric("–î–æ–ª—è –º–µ–π–∫–µ—Ä", f"{maker_ratio:.0f}%")

        activity = trade_stats.get("activity", {})
        st.caption(
            " ¬∑ ".join(
                [
                    f"{activity.get('15m', 0)} —Å–¥–µ–ª–æ–∫ –∑–∞ 15 –º–∏–Ω—É—Ç",
                    f"{activity.get('1h', 0)} –∑–∞ —á–∞—Å",
                    f"{activity.get('24h', 0)} –∑–∞ —Å—É—Ç–∫–∏",
                    f"–ø–æ—Å–ª–µ–¥–Ω—è—è: {trade_stats.get('last_trade_at', '‚Äî')}",
                ]
            )
        )
        st.caption(
            "–¢–æ—Ä–≥—É–µ–º—ã–µ –ø–∞—Ä—ã: "
            + (", ".join(trade_stats.get("symbols", [])) or "–±–æ—Ç –∂–¥—ë—Ç –∏–¥–µ–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª")
        )

st.divider()
st.subheader("–ü–æ–æ–±—â–∞–π—Ç–µ—Å—å —Å –±–æ—Ç–æ–º")
if "guardian_chat" not in st.session_state:
    st.session_state["guardian_chat"] = [
        {"role": "assistant", "content": bot.initial_message()},
    ]

for msg in st.session_state["guardian_chat"]:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

if prompt := st.chat_input("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏‚Ä¶"):
    st.session_state["guardian_chat"].append({"role": "user", "content": prompt})
    answer = bot.answer(prompt)
    st.session_state["guardian_chat"].append({"role": "assistant", "content": answer})
    st.experimental_rerun()
