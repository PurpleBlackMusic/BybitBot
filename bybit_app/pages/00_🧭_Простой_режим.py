from __future__ import annotations

import pandas as pd
import streamlit as st

from utils.guardian_bot import GuardianBot


st.set_page_config(page_title="–ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º", page_icon="üß≠", layout="wide")


@st.cache_resource(show_spinner=False)
def _get_guardian() -> GuardianBot:
    """Reuse a single GuardianBot instance across reruns."""

    return GuardianBot()


bot = _get_guardian()

st.title("üß≠ –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º")
st.caption(
    "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–º–Ω–æ–≥–æ —Å–ø–æ—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞: –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞, –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –∏ —á–∞—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤."
)

refresh = st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True)
if refresh:
    bot.refresh()
    st.experimental_rerun()

summary = bot.status_summary()
brief = bot.generate_brief()
plan_steps = bot.plan_steps(brief)
risk_text = bot.risk_summary()
portfolio = bot.portfolio_overview()
watchlist = bot.market_watchlist()
recent_trades = bot.recent_trades()
trade_stats = bot.trade_statistics()
health = bot.data_health()

status_cols = st.columns(3)
status_cols[0].metric(
    "–†–µ–∂–∏–º",
    {
        "buy": "–ü–æ–∫—É–ø–∞–µ–º",
        "sell": "–§–∏–∫—Å–∏—Ä—É–µ–º",
        "wait": "–ñ–¥—ë–º",
    }.get(summary.get("mode", "wait"), "–ñ–¥—ë–º"),
    summary.get("headline", "‚Äî"),
)
status_cols[1].metric(
    "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å",
    f"{summary.get('probability_pct', 0.0):.1f}%",
    f"–ü–æ—Ä–æ–≥ {summary.get('thresholds', {}).get('buy_probability_pct', 0.0):.0f}%",
)
status_cols[2].metric(
    "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª",
    f"{summary.get('ev_bps', 0.0):.0f} –±.–ø.",
    f"–ú–∏–Ω. {summary.get('thresholds', {}).get('min_ev_bps', 0.0):.0f} –±.–ø.",
)

if summary.get("caution"):
    st.warning(summary["caution"])

st.write(summary.get("analysis", ""))
st.info(summary.get("action_text", ""))
st.caption(summary.get("updated_text", ""))

if summary.get("actionable"):
    st.success("–°–∏–≥–Ω–∞–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∏—Å–∫–∞ ‚Äî –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é.")
else:
    st.caption("–°–∏–≥–Ω–∞–ª –ø–æ–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π: –±–æ—Ç –∂–¥—ë—Ç –ª—É—á—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")

st.divider()
st.subheader("–ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω")
if plan_steps:
    st.markdown("\n".join(f"{idx + 1}. {step}" for idx, step in enumerate(plan_steps)))
else:
    st.info("–ü–ª–∞–Ω —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞.")

st.subheader("–†–∏—Å–∫–∏ –∏ –∑–∞—â–∏—Ç–∞")
st.markdown(risk_text)

st.divider()
st.subheader("–ü–æ—Ä—Ç—Ñ–µ–ª—å")
portfolio_totals = portfolio.get("human_totals", {})
cols = st.columns(3)
cols[0].metric("–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ", portfolio_totals.get("realized", "0.00 USDT"))
cols[1].metric("–í –ø–æ–∑–∏—Ü–∏–∏", portfolio_totals.get("open_notional", "0.00 USDT"))
cols[2].metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫", portfolio_totals.get("open_positions", "0"))

positions = portfolio.get("positions", [])
if positions:
    st.dataframe(pd.DataFrame(positions), use_container_width=True, hide_index=True)
else:
    st.caption("–ü–æ–∑–∏—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚Äî –∫–∞–ø–∏—Ç–∞–ª –≤ —Ä–µ–∑–µ—Ä–≤–µ.")

st.divider()
st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")

health_cols = st.columns(3)
health_cols[0].metric(
    health["ai_signal"]["title"],
    "‚úÖ" if health["ai_signal"]["ok"] else "‚ö†Ô∏è",
    health["ai_signal"]["message"],
)
health_cols[1].metric(
    health["executions"]["title"],
    "‚úÖ" if health["executions"]["ok"] else "‚ö†Ô∏è",
    health["executions"]["message"],
)
health_cols[2].metric(
    health["api_keys"]["title"],
    "‚úÖ" if health["api_keys"]["ok"] else "‚ö†Ô∏è",
    health["api_keys"]["message"],
)

if watchlist:
    st.markdown("#### –ù–∞–±–ª—é–¥–∞–µ–º—ã–µ –ø–∞—Ä—ã")
    st.dataframe(pd.DataFrame(watchlist), use_container_width=True, hide_index=True)

if recent_trades:
    st.markdown("#### –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏")
    st.dataframe(pd.DataFrame(recent_trades), use_container_width=True, hide_index=True)

if trade_stats.get("trades"):
    st.markdown("#### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")
    stats_cols = st.columns(3)
    stats_cols[0].metric("–°–¥–µ–ª–æ–∫", int(trade_stats.get("trades", 0)))
    stats_cols[1].metric("–û–±–æ—Ä–æ—Ç", trade_stats.get("gross_volume_human", "0.00 USDT"))
    maker_ratio = float(trade_stats.get("maker_ratio", 0.0) or 0.0) * 100.0
    stats_cols[2].metric("–ú–µ–π–∫–µ—Ä", f"{maker_ratio:.0f}%")
    st.caption(
        " ¬∑ ".join(
            [
                f"{trade_stats.get('activity', {}).get('15m', 0)} –∑–∞ 15 –º–∏–Ω—É—Ç",
                f"{trade_stats.get('activity', {}).get('1h', 0)} –∑–∞ —á–∞—Å",
                f"{trade_stats.get('activity', {}).get('24h', 0)} –∑–∞ —Å—É—Ç–∫–∏",
                f"–ø–æ—Å–ª–µ–¥–Ω—è—è: {trade_stats.get('last_trade_at', '‚Äî')}",
            ]
        )
    )

st.divider()
st.subheader("–ü–æ–æ–±—â–∞–π—Ç–µ—Å—å —Å –±–æ—Ç–æ–º")
if "guardian_chat" not in st.session_state:
    st.session_state["guardian_chat"] = [
        {"role": "assistant", "content": bot.initial_message()},
    ]

for message in st.session_state["guardian_chat"]:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if prompt := st.chat_input("–°–ø—Ä–æ—Å–∏—Ç–µ –æ —Ä–∏—Å–∫–∞—Ö, –ø—Ä–∏–±—ã–ª–∏ –∏–ª–∏ –ø–ª–∞–Ω–µ‚Ä¶"):
    st.session_state["guardian_chat"].append({"role": "user", "content": prompt})
    st.session_state["guardian_chat"].append({"role": "assistant", "content": bot.answer(prompt)})
    st.experimental_rerun()
