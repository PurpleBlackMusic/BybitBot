from __future__ import annotations

import json
import time
from typing import Any, Callable

import streamlit as st

from utils.ai.live import AIRunner
from utils.coach import build_autopilot_settings, market_health
from utils.envs import get_api_client, get_settings, update_settings
from utils.paths import DATA_DIR
from utils.reporter import send_daily_report, send_test_message, summarize_today
from utils.scheduler import (
    _load_state_file,
    _save_state_file,
    start_background_loop,
)


def _settings_attr(settings: Any, name: str, default: Any) -> Any:
    """Return a settings attribute with a convenient default."""

    return getattr(settings, name, default)


def _with_spinner(label: str, callback: Callable[[], Any]) -> Any:
    """Run ``callback`` while showing a spinner and surface exceptions."""

    with st.spinner(label):
        return callback()


@st.cache_resource(show_spinner=False)
def _get_cached_api_client():
    """Reuse a single API client instance between reruns."""

    return get_api_client()


@st.cache_data(ttl=120, show_spinner=False)
def _load_market_health_cached() -> dict[str, Any]:
    """Fetch and cache market health hints for the briefing block."""

    api = _get_cached_api_client()
    return market_health(api, category="spot")


@st.cache_data(ttl=60, show_spinner=False)
def _load_today_summary_cached() -> dict[str, Any]:
    """Cache the daily summary to avoid touching the log files on each rerun."""

    return summarize_today()


st.set_page_config(page_title="–ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º", page_icon="üß≠", layout="wide")
st.title("üß≠ –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º")

st.caption(
    "–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ù–ï —Ö–æ—á–µ—Ç —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –∫—Ä–∏–ø—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö. "
    "–ó–¥–µ—Å—å ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ **–æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞**, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —É–º–Ω–æ–≥–æ –±–æ—Ç–∞."
)

s = get_settings()


def _persist_settings(**kwargs: Any) -> None:
    """Update settings while keeping Telegram defaults in sync."""

    current = get_settings()
    payload = dict(kwargs)
    payload.setdefault(
        "tg_trade_notifs",
        bool(_settings_attr(current, "tg_trade_notifs", False)),
    )
    payload.setdefault(
        "tg_trade_notifs_min_notional",
        float(_settings_attr(current, "tg_trade_notifs_min_notional", 50.0)),
    )
    update_settings(**payload)


def _persist_with_feedback(message: str, **kwargs: Any) -> None:
    """Persist settings while showing success/error feedback."""

    try:
        _persist_settings(**kwargs)
    except Exception as exc:  # pragma: no cover - defensive UI feedback
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {exc}")
    else:
        st.success(message)


api = _get_cached_api_client()
# —Ñ–æ–Ω–æ–≤–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∞
start_background_loop()


def _render_briefing() -> None:
    st.subheader("–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –±—Ä–∏—Ñ–∏–Ω–≥")
    refresh = st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –±—Ä–∏—Ñ–∏–Ω–≥", key="refresh_briefing")
    try:
        if refresh:
            _load_market_health_cached.clear()
            info = _with_spinner("–û–±–Ω–æ–≤–ª—è–µ–º –±—Ä–∏—Ñ–∏–Ω–≥...", _load_market_health_cached)
        else:
            info = _load_market_health_cached()
    except Exception as exc:  # pragma: no cover - defensive UI feedback
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏: {exc}")
        return

    light = info.get("light")
    reason = info.get("reason", "")
    cols = st.columns([1, 6])
    with cols[0]:
        st.metric(
            "–°—Ç–∞—Ç—É—Å —Ä—ã–Ω–∫–∞",
            {"green": "‚úÖ –û–ö", "yellow": "‚ö†Ô∏è –†–∏—Å–∫", "red": "‚õî –°—Ç–æ–ø"}.get(light, "‚Äî"),
        )
    with cols[1]:
        st.write(reason)

    st.caption("‚úÖ –û–ö ‚Äî –º–æ–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å ‚Ä¢ ‚ö†Ô∏è –†–∏—Å–∫ ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ ‚Ä¢ ‚õî –°—Ç–æ–ø ‚Äî –ª—É—á—à–µ –Ω–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å")

    top = info.get("top") or []
    with st.expander("–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", expanded=False):
        if top:
            table = {
                "symbol": [row.get("symbol", "‚Äî") for row in top],
                "turnover24h": [row.get("turnover24h") for row in top],
                "spread (bps)": [row.get("spread_bps") for row in top],
            }
            st.dataframe(table, use_container_width=True, hide_index=True)
        else:
            st.info("–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–æ–Ω–µ—Ç –ø–æ–∫–∞ –Ω–µ—Ç ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∂–µ.")


def _render_autopilot(settings: Any, api_client: Any) -> None:
    st.subheader("–ê–≤—Ç–æ-–±–æ—Ç (–æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π)")
    left, right = st.columns([2, 1])

    with left:
        st.write(
            "–ë–æ—Ç **—Å–∞–º –ø–æ–¥–±–µ—Ä—ë—Ç –º–æ–Ω–µ—Ç—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**, –≤–∫–ª—é—á–∏—Ç –∑–∞—â–∏—Ç—É –∫–∞–ø–∏—Ç–∞–ª–∞ –∏ TWAP, "
            "–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤ —Ñ–æ–Ω–µ. –í—ã —É–≤–∏–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç—á—ë—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–õ–æ–≥–∏¬ª.",
        )
        runner: AIRunner = st.session_state.setdefault("ai_runner", AIRunner())

        if st.button("ü§ñ –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä –∏ –∑–∞–ø—É—Å–∫", use_container_width=True):
            try:
                pack = _with_spinner(
                    "–ü–æ–¥–±–∏—Ä–∞–µ–º –º–æ–Ω–µ—Ç—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...",
                    lambda: build_autopilot_settings(get_settings(), api_client),
                )
                _persist_settings(**pack["settings"])
                runner.start()
            except Exception as exc:  # pragma: no cover - defensive UI feedback
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å: {exc}")
            else:
                st.success(
                    "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞: ~"
                    f"{pack.get('eta_minutes', '‚Äî')} –º–∏–Ω.",
                )

        col_stop, col_panic = st.columns(2)
        if col_stop.button("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"):
            try:
                runner.stop()
            except Exception as exc:  # pragma: no cover - defensive UI feedback
                st.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {exc}")
            else:
                st.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

        if col_panic.button("üõë –ü–∞–Ω–∏–∫-—Å—Ç–æ–ø (–¥–æ –∑–∞–≤—Ç—Ä–∞)"):
            stop_error: Exception | None = None
            try:
                runner.stop()
            except Exception as exc:  # pragma: no cover - defensive UI feedback
                stop_error = exc
                st.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {exc}")

            def _activate_panic() -> None:
                state = _load_state_file() or {}
                state["stop_day_locked"] = True
                state["stop_day_reason"] = "panic"
                state["stop_day_date"] = time.strftime("%Y-%m-%d")
                if not _save_state_file(state):
                    raise RuntimeError("state not saved")

            try:
                _activate_panic()
            except Exception as exc:  # pragma: no cover - defensive UI feedback
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–∞–Ω–∏–∫-—Å—Ç–æ–ø: {exc}")
            else:
                if stop_error is None:
                    st.warning("–ü–∞–Ω–∏–∫-—Å—Ç–æ–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ –∑–∞–≤—Ç—Ä–∞.")

        dry_default = bool(_settings_attr(settings, "dry_run", True))
        dry = st.toggle(
            "–î–µ–º–æ-—Ä–µ–∂–∏–º (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)",
            value=dry_default,
            help="–í –¥–µ–º–æ-–∑–∞–ø—É—Å–∫–µ –±–æ—Ç **–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç** —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏.",
        )
        if dry != dry_default:
            _persist_settings(dry_run=bool(dry))
            st.rerun()

    with right:
        st.write("**–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**")
        status_path = DATA_DIR / "ai" / "status.json"
        try:
            if status_path.exists():
                st.json(json.loads(status_path.read_text(encoding="utf-8")))
            else:
                st.info("–ü–æ–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Ç. –ù–∞–∂–º–∏—Ç–µ ¬´–ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä –∏ –∑–∞–ø—É—Å–∫¬ª.")
        except Exception as exc:  # pragma: no cover - defensive UI feedback
            st.warning(f"–°—Ç–∞—Ç—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {exc}")

    st.subheader("–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–ª–∞–µ—Ç –±–æ—Ç? (—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º —è–∑—ã–∫–æ–º)")
    st.markdown(
        """
        - –í—ã–±–∏—Ä–∞–µ—Ç **—Å–∞–º—ã–µ –ª–∏–∫–≤–∏–¥–Ω—ã–µ** –ø–∞—Ä—ã —Å —É–∑–∫–∏–º —Å–ø—Ä–µ–¥–æ–º.
        - –ù–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç **–ª–µ–Ω—Ç—É —Ü–µ–Ω/—Å–ø—Ä–µ–¥** –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç **–ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ** –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å/–ø–æ–¥–æ–∂–¥–∞—Ç—å.
        - –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, –≤–∫–ª—é—á–µ–Ω—ã **–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∑–∞—ë–º —Å—Ä–µ–¥—Å—Ç–≤**, –ª–∏–º–∏—Ç—ã –Ω–∞ —Å–∏–º–≤–æ–ª –∏ —Å–¥–µ–ª–∫—É.
        - **DRY RUN** –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤—ã —Å–Ω–∏–º–µ—Ç–µ —Ç—É–º–±–ª–µ—Ä ¬´–î–µ–º–æ¬ª.
        - –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤–∏–¥–Ω–æ –≤ **ü™µ –õ–æ–≥–∏** (–∏—â–∏—Ç–µ –∑–∞–ø–∏—Å–∏ `ai.*`).
        """
    )


def _render_automation(settings: Any) -> None:
    st.subheader("üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è")
    with st.expander("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫/–∞–≤—Ç–æ—Å—Ç–æ–ø –±–æ—Ç–∞ –∏ –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç"):
        with st.form("auto_schedule_form"):
            col1, col2 = st.columns(2)
            with col1:
                auto_enabled = st.toggle(
                    "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-—Ç–æ—Ä–≥–æ–≤–ª—é –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é",
                    value=bool(_settings_attr(settings, "auto_trade_enabled", False)),
                )
                start_time = st.text_input(
                    "–í—Ä–µ–º—è –∞–≤—Ç–æ-—Å—Ç–∞—Ä—Ç–∞ (—á—á:–º–º)",
                    value=str(_settings_attr(settings, "auto_start_time", "09:00")),
                )
                stop_time = st.text_input(
                    "–í—Ä–µ–º—è –∞–≤—Ç–æ-—Å—Ç–æ–ø–∞ (—á—á:–º–º)",
                    value=str(_settings_attr(settings, "auto_stop_time", "21:00")),
                )
                auto_dry = st.toggle(
                    "–¢–æ—Ä–≥–æ–≤–∞—Ç—å –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –ø—Ä–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–µ",
                    value=bool(_settings_attr(settings, "auto_dry_run", True)),
                )
            with col2:
                report_enabled = st.toggle(
                    "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –≤ Telegram",
                    value=bool(_settings_attr(settings, "daily_report_enabled", False)),
                )
                report_time = st.text_input(
                    "–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ (—á—á:–º–º)",
                    value=str(_settings_attr(settings, "daily_report_time", "20:00")),
                )
                loss_limit = st.number_input(
                    "–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–∞ (%)",
                    value=float(_settings_attr(settings, "ai_daily_loss_limit_pct", 1.0)),
                    step=0.1,
                )
                profit_target = st.number_input(
                    "–î–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å –ø—Ä–∏–±—ã–ª–∏ (%)",
                    value=float(_settings_attr(settings, "ai_daily_profit_target_pct", 0.0)),
                    step=0.1,
                )

            if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"):
                _persist_with_feedback(
                    "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –§–æ–Ω–æ–≤–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.",
                    auto_trade_enabled=bool(auto_enabled),
                    auto_start_time=start_time,
                    auto_stop_time=stop_time,
                    auto_dry_run=bool(auto_dry),
                    daily_report_enabled=bool(report_enabled),
                    daily_report_time=report_time,
                    ai_daily_loss_limit_pct=float(loss_limit),
                    ai_daily_profit_target_pct=float(profit_target),
                )


def _render_universe_filters(settings: Any) -> None:
    st.subheader("‚öôÔ∏è –î–æ–ø. –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–Ω–∏–≤–µ—Ä—Å—É–º–∞")
    with st.expander("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–µ—Ç (–¥–ª—è –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–∞)"):
        with st.form("universe_filters_form"):
            whitelist = st.text_input(
                "–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                value=str(_settings_attr(settings, "ai_symbols_whitelist", "")),
                help="–ï—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ ‚Äî –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä –±–µ—Ä—ë—Ç –º–æ–Ω–µ—Ç—ã —Ç–æ–ª—å–∫–æ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞.",
            )
            blacklist = st.text_input(
                "–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                value=str(_settings_attr(settings, "ai_symbols_blacklist", "")),
                help="–≠—Ç–∏ –º–æ–Ω–µ—Ç—ã –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –∏–∑ –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–∞.",
            )
            manual = st.text_input(
                "–Ø —Å–∞–º –∑–∞–¥–∞–º –º–æ–Ω–µ—Ç—ã (–ø–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
                value=str(_settings_attr(settings, "ai_symbols_manual", "")),
                help="–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ ‚Äî –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä –≤–æ–∑—å–º—ë—Ç –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –º–æ–Ω–µ—Ç—ã.",
            )

            if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–∫–∏ –º–æ–Ω–µ—Ç"):
                _persist_with_feedback(
                    "–°–ø–∏—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
                    ai_symbols_whitelist=whitelist,
                    ai_symbols_blacklist=blacklist,
                    ai_symbols_manual=manual,
                )


def _render_export_import(_: Any) -> None:
    st.subheader("üóÇ –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    col_export, col_import = st.columns(2)

    with col_export:
        st.caption("–°–∫–∞—á–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏).")

        def _prepare_dump() -> bytes:
            data_obj = get_settings()
            try:
                data = data_obj.dict() if hasattr(data_obj, "dict") else data_obj.__dict__
            except Exception:  # pragma: no cover - defensive
                data = {}
            return json.dumps(data, ensure_ascii=False, indent=2).encode("utf-8")

        if st.button("‚¨áÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å JSON"):
            blob = _with_spinner("–ì–æ—Ç–æ–≤–∏–º —Ñ–∞–π–ª...", _prepare_dump)
            st.download_button(
                "–°–∫–∞—á–∞—Ç—å settings.json",
                data=blob,
                file_name="settings.json",
                mime="application/json",
            )

    with col_import:
        st.caption("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ñ–∞–π–ª.")
        uploaded = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å settings.json", type=["json"])
        if uploaded is not None:
            try:
                payload = json.loads(uploaded.read().decode("utf-8"))
                _persist_settings(**payload)
            except Exception as exc:  # pragma: no cover - defensive UI feedback
                st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {exc}")
            else:
                st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.")


def _render_telegram(settings: Any) -> None:
    st.subheader("üîî Telegram-–æ—Ç—á—ë—Ç—ã")
    with st.form("telegram_trade_notifs"):
        trade_notifs = st.checkbox(
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–∞—Ö –≤ Telegram",
            value=bool(_settings_attr(settings, "tg_trade_notifs", False)),
        )
        min_notional = st.number_input(
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º —Å–¥–µ–ª–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (USDT)",
            value=float(_settings_attr(settings, "tg_trade_notifs_min_notional", 50.0)),
            step=10.0,
        )
        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"):
            _persist_with_feedback(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
                tg_trade_notifs=bool(trade_notifs),
                tg_trade_notifs_min_notional=float(min_notional),
            )

    with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ—Ç—á—ë—Ç–æ–≤)"):
        with st.form("telegram_credentials_form"):
            token = st.text_input(
                "Bot Token",
                type="password",
                value=str(_settings_attr(settings, "telegram_token", "")),
            )
            chat_id = st.text_input(
                "Chat ID",
                value=str(_settings_attr(settings, "telegram_chat_id", "")),
            )
            notify = st.toggle(
                "–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                value=bool(_settings_attr(settings, "telegram_notify", False)),
                help="–ö–æ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ ‚Äî –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ/–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –∑–∞—è–≤–∫–∞—Ö.",
            )
            submitted = st.form_submit_button("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å Telegram-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            if submitted:
                _persist_with_feedback(
                    "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.",
                    telegram_token=token,
                    telegram_chat_id=chat_id,
                    telegram_notify=bool(notify),
                )

        if st.button("üß™ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"):
            try:
                response = _with_spinner(
                    "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ...",
                    lambda: send_test_message("–ü—Ä–∏–≤–µ—Ç! Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚úÖ"),
                )
            except Exception as exc:  # pragma: no cover - defensive UI feedback
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {exc}")
            else:
                st.write(f"–û—Ç–≤–µ—Ç: {response}")


def _render_daily_report() -> None:
    st.subheader("–û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–¥–∫—É", key="refresh_summary"):
        _load_today_summary_cached.clear()

    try:
        summary = _load_today_summary_cached()
    except Exception as exc:  # pragma: no cover - defensive UI feedback
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É: {exc}")
        summary = None

    if summary:
        st.write(
            "–°–æ–±—ã—Ç–∏–π: **{events}**, —Å–∏–≥–Ω–∞–ª–æ–≤: **{signals}**, –∑–∞—è–≤–æ–∫: **{orders}**, –æ—à–∏–±–æ–∫: **{errors}**.".format(
                events=summary.get("events", 0),
                signals=summary.get("signals", 0),
                orders=summary.get("orders", 0),
                errors=summary.get("errors", 0),
            )
        )
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")

    col_report, col_unlock = st.columns(2)
    if col_report.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –≤ Telegram"):
        try:
            result = _with_spinner("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç...", send_daily_report)
        except Exception as exc:  # pragma: no cover - defensive UI feedback
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç: {exc}")
        else:
            _load_today_summary_cached.clear()
            st.success(f"–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {result}")

    if col_unlock.button("üîì –°–Ω—è—Ç—å ‚Äò—Å—Ç–æ–ø-–¥–µ–Ω—å‚Äô –¥–æ –∑–∞–≤—Ç—Ä–∞"):
        def _unlock() -> None:
            state = _load_state_file() or {}
            state["stop_day_locked"] = False
            state["stop_day_reason"] = ""
            if not _save_state_file(state):
                raise RuntimeError("state not saved")

        try:
            _unlock()
        except Exception as exc:  # pragma: no cover - defensive UI feedback
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ–ø-–¥–Ω—è: {exc}")
        else:
            st.success("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–Ω—è—Ç–æ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è.")


def _render_order_preview(settings: Any, api_client: Any) -> None:
    st.subheader("üîé –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏")
    with st.expander("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫ –±–∏—Ä–∂–∞ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
        from utils.safety import guard_order

        with st.form("preview_order_form"):
            col_symbol, col_side, col_category = st.columns(3)
            with col_symbol:
                default_symbol = (
                    str(_settings_attr(settings, "ai_symbols_manual", "")) or "BTCUSDT"
                ).split(",")[0].strip()
                symbol = st.text_input("–°–∏–º–≤–æ–ª", value=default_symbol)
            with col_side:
                side = st.selectbox("–°—Ç–æ—Ä–æ–Ω–∞", ["BUY", "SELL"], index=0)
            with col_category:
                category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", ["spot"], index=0)

            col_price, col_qty = st.columns(2)
            with col_price:
                price_str = st.text_input("–¶–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–π)", value="")
            with col_qty:
                qty_str = st.text_input("–ö–æ–ª-–≤–æ", value="10")

            if st.form_submit_button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"):
                try:
                    price = float(price_str) if price_str else None
                    qty = float(qty_str)
                    response = guard_order(
                        api_client,
                        category=category,
                        symbol=symbol.upper(),
                        side=side,
                        orderType="Limit" if price else "Market",
                        qty=qty,
                        price=price,
                    )
                except ValueError:
                    st.error("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.")
                except Exception as exc:  # pragma: no cover - defensive UI feedback
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {exc}")
                else:
                    st.json(response)
                    decision = response.get("decision")
                    if decision == "ok":
                        st.success("OK ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–∏—Ä–∂–∏.")
                    elif decision == "adjusted":
                        st.warning("–ë–∏—Ä–∂–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏—é ‚Äî –Ω–∏–∂–µ –ø–æ–∫–∞–∑–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
                    else:
                        st.error(f"–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {response.get('reason')}")


def _render_universe_presets(settings: Any) -> None:
    st.subheader("üó∫Ô∏è –ü—Ä–µ—Å–µ—Ç—ã —É–Ω–∏–≤–µ—Ä—Å—É–º–∞")
    with st.expander("–§–∏–ª—å—Ç—Ä—ã –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–∞ –º–æ–Ω–µ—Ç"):
        options = ["–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π", "–°—Ç–∞–Ω–¥–∞—Ä—Ç", "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π"]
        default = str(_settings_attr(settings, "ai_universe_preset", "–°—Ç–∞–Ω–¥–∞—Ä—Ç"))
        index = options.index(default) if default in options else 1
        preset = st.selectbox("–ü—Ä–µ—Å–µ—Ç", options, index=index)

        if preset == "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π":
            max_spread_default = float(_settings_attr(settings, "ai_max_spread_bps", 10.0))
            min_turnover_default = float(_settings_attr(settings, "ai_min_turnover_usd", 5_000_000.0))
        elif preset == "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π":
            max_spread_default = float(_settings_attr(settings, "ai_max_spread_bps", 50.0))
            min_turnover_default = float(_settings_attr(settings, "ai_min_turnover_usd", 500_000.0))
        else:
            max_spread_default = float(_settings_attr(settings, "ai_max_spread_bps", 25.0))
            min_turnover_default = float(_settings_attr(settings, "ai_min_turnover_usd", 2_000_000.0))

        max_spread = st.number_input("–ú–∞–∫—Å. —Å–ø—Ä–µ–¥ (–±–ø—Å)", value=max_spread_default, step=1.0)
        min_turnover = st.number_input("–ú–∏–Ω. –æ–±–æ—Ä–æ—Ç (USD)", value=min_turnover_default, step=100000.0)

        if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç"):
            _persist_with_feedback(
                "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.",
                ai_universe_preset=preset,
                ai_max_spread_bps=float(max_spread),
                ai_min_turnover_usd=float(min_turnover),
            )


def _render_watchdog(settings: Any) -> None:
    st.subheader("‚ö° WS Watchdog")
    with st.form("watchdog_form"):
        wd_enabled = st.checkbox(
            "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ WS",
            value=bool(_settings_attr(settings, "ws_watchdog_enabled", True)),
        )
        wd_max_age = st.number_input(
            "–ú–∞–∫—Å. –∑–∞–¥–µ—Ä–∂–∫–∞ heartbeat (—Å–µ–∫)",
            value=int(_settings_attr(settings, "ws_watchdog_max_age_sec", 90)),
            step=10,
        )
        if st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å Watchdog"):
            _persist_with_feedback(
                "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.",
                ws_watchdog_enabled=bool(wd_enabled),
                ws_watchdog_max_age_sec=int(wd_max_age),
            )


def _render_tick_preview(api_client: Any) -> None:
    st.subheader("üß™ –°–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫ (–ø—Ä–µ–≤—å—é)")
    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±–æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç –¥–∞–ª—å—à–µ (–æ—Ü–µ–Ω–∫–∞)"):
        try:
            from utils.preview import next_tick_preview
        except Exception as exc:  # pragma: no cover - defensive UI feedback
            st.error(f"–ú–æ–¥—É–ª—å –ø—Ä–µ–≤—å—é –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {exc}")
            return

        if st.button("üîç –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–≤—å—é"):
            try:
                preview = _with_spinner(
                    "–ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É...", lambda: next_tick_preview(api_client)
                )
            except Exception as exc:  # pragma: no cover - defensive UI feedback
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–≤—å—é: {exc}")
                return

            st.json(preview)
            decision = preview.get("decision")
            if decision == "skip":
                st.warning(
                    "–°–µ–π—á–∞—Å –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –±—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –±–∏—Ä–∂–∏. –û—Ç—Ä–µ–≥—É–ª–∏—Ä—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã/–ø—Ä–µ—Å–µ—Ç.",
                )
            elif decision == "adjusted":
                st.info("–ó–∞—è–≤–∫–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏: —Å–º. –∏—Ç–æ–≥–æ–≤—ã–µ qty/price –≤ –±–ª–æ–∫–µ preview.")
            else:
                st.success("–û—Ü–µ–Ω–∫–∞ –≤ –Ω–æ—Ä–º–µ. –†–µ–∞–ª—å–Ω—ã–π AI –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –∏–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ ‚Äî —ç—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–≤—å—é.")


st.divider()
_render_briefing()

st.divider()
_render_autopilot(s, api)

st.divider()
_render_automation(s)

st.divider()
_render_universe_filters(s)

st.divider()
_render_export_import(s)

st.divider()
_render_telegram(s)

st.divider()
_render_daily_report()

st.divider()
_render_order_preview(s, api)

st.divider()
_render_universe_presets(s)

st.divider()
_render_watchdog(s)

st.divider()
_render_tick_preview(api)
