
from __future__ import annotations
import streamlit as st, json, time
from utils.envs import get_api_client, get_settings, update_settings
from utils.coach import market_health, build_autopilot_settings
from utils.scheduler import start_background_loop, _load_state_file, _save_state_file
from utils.reporter import send_daily_report, summarize_today, send_test_message
from utils.ai.live import AIRunner
from utils.paths import DATA_DIR

st.set_page_config(page_title="–ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º", page_icon="üß≠", layout="wide")
st.title("üß≠ –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º")

st.caption("–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –ù–ï —Ö–æ—á–µ—Ç —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –∫—Ä–∏–ø—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö. "
           "–ó–¥–µ—Å—å ‚Äî –∫—Ä–∞—Ç–∫–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ **–æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞**, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —É–º–Ω–æ–≥–æ –±–æ—Ç–∞.")

s = get_settings()

# ##__TG_DEFAULTS__ ensure variables exist before buttons use them
tg_trd = bool(getattr(s, 'tg_trade_notifs', False))
tg_min = float(getattr(s, 'tg_trade_notifs_min_notional', 50.0))
api = get_api_client()
# —Ñ–æ–Ω–æ–≤–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∞
start_background_loop()

# --- Daily briefing ---
st.subheader("–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –±—Ä–∏—Ñ–∏–Ω–≥")
try:
    info = market_health(api, category="spot")
    light = info.get("light")
    reason = info.get("reason","")
    cols = st.columns([1,6])
    with cols[0]:
        st.metric("–°—Ç–∞—Ç—É—Å —Ä—ã–Ω–∫–∞", {"green":"‚úÖ –û–ö","yellow":"‚ö†Ô∏è –†–∏—Å–∫","red":"‚õî –°—Ç–æ–ø"}.get(light,"‚Äî"))
    with cols[1]:
        st.write(reason)
    st.caption("‚úÖ –û–ö ‚Äî –º–æ–∂–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å ‚Ä¢ ‚ö†Ô∏è –†–∏—Å–∫ ‚Äî –∞–∫–∫—É—Ä–∞—Ç–Ω–æ ‚Ä¢ ‚õî –°—Ç–æ–ø ‚Äî –ª—É—á—à–µ –Ω–µ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å")
    with st.expander("–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"):
        st.table({"symbol":[x["symbol"] for x in info.get("top", [])],
                  "turnover24h":[x["turnover24h"] for x in info.get("top", [])],
                  "spread (bps)":[x["spread_bps"] for x in info.get("top", [])]})
except Exception as e:
    st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏: {e}")

st.divider()

# --- One-click autopilot ---
st.subheader("–ê–≤—Ç–æ-–±–æ—Ç (–æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π)")
left, right = st.columns([2,1])
with left:
    st.write("–ë–æ—Ç **—Å–∞–º –ø–æ–¥–±–µ—Ä—ë—Ç –º–æ–Ω–µ—Ç—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**, –≤–∫–ª—é—á–∏—Ç –∑–∞—â–∏—Ç—É –∫–∞–ø–∏—Ç–∞–ª–∞ –∏ TWAP, "
             "–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤ —Ñ–æ–Ω–µ. –í—ã —É–≤–∏–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∏ –æ—Ç—á—ë—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–õ–æ–≥–∏¬ª.")
    if "ai_runner" not in st.session_state:
        st.session_state["ai_runner"] = AIRunner()
    runner: AIRunner = st.session_state["ai_runner"]

    if st.button("ü§ñ –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä –∏ –∑–∞–ø—É—Å–∫"):
        try:
            pack = build_autopilot_settings(s, api)
            update_settings(tg_trade_notifs=bool(tg_trd), tg_trade_notifs_min_notional=float(tg_min), **pack["settings"])
            runner.start()
            st.success(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≥–Ω–æ–∑–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞: ~{pack['eta_minutes']} –º–∏–Ω.")
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å: {e}")

    colA, colB = st.columns(2)
    if colA.button("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"):
        try:
            runner.stop()
            st.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
    if colB.button("üõë –ü–∞–Ω–∏–∫-—Å—Ç–æ–ø (–¥–æ –∑–∞–≤—Ç—Ä–∞)"):
        stop_err: Exception | None = None
        try:
            runner.stop()
        except Exception as e:
            stop_err = e
            st.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        try:
            stf = _load_state_file() or {}
            stf['stop_day_locked'] = True
            stf['stop_day_reason'] = 'panic'
            stf['stop_day_date'] = time.strftime('%Y-%m-%d')
            if not _save_state_file(stf):
                raise RuntimeError('state not saved')
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–∞–Ω–∏–∫-—Å—Ç–æ–ø: {e}")
        else:
            if stop_err is None:
                st.warning("–ü–∞–Ω–∏–∫-—Å—Ç–æ–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–æ –∑–∞–≤—Ç—Ä–∞.")
    dry = st.toggle("–î–µ–º–æ-—Ä–µ–∂–∏–º (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤)", value=getattr(s, 'dry_run', True),
                    help="–í –¥–µ–º–æ-–∑–∞–ø—É—Å–∫–µ –±–æ—Ç **–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç** —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞—è–≤–∫–∏.")
    if dry != getattr(s, 'dry_run', True):
        update_settings(tg_trade_notifs=bool(tg_trd), tg_trade_notifs_min_notional=float(tg_min), dry_run=bool(dry))
        st.rerun()

with right:
    st.write("**–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**")
    try:
        p = DATA_DIR / "ai" / "status.json"
        if p.exists():
            st.json(json.loads(p.read_text(encoding="utf-8")))
        else:
            st.info("–ü–æ–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Ç. –ù–∞–∂–º–∏—Ç–µ ¬´–ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä –∏ –∑–∞–ø—É—Å–∫¬ª.")
    except Exception as e:
        st.warning(f"–°—Ç–∞—Ç—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

st.divider()
st.subheader("–ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–ª–∞–µ—Ç –±–æ—Ç? (—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º —è–∑—ã–∫–æ–º)")
st.markdown(
"""
- –í—ã–±–∏—Ä–∞–µ—Ç **—Å–∞–º—ã–µ –ª–∏–∫–≤–∏–¥–Ω—ã–µ** –ø–∞—Ä—ã —Å —É–∑–∫–∏–º —Å–ø—Ä–µ–¥–æ–º.
- –ù–∞ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å–º–æ—Ç—Ä–∏—Ç **–ª–µ–Ω—Ç—É —Ü–µ–Ω/—Å–ø—Ä–µ–¥** –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç **–ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ** –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å/–ø–æ–¥–æ–∂–¥–∞—Ç—å.
- –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, –≤–∫–ª—é—á–µ–Ω—ã **–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∑–∞—ë–º —Å—Ä–µ–¥—Å—Ç–≤**, –ª–∏–º–∏—Ç—ã –Ω–∞ —Å–∏–º–≤–æ–ª –∏ —Å–¥–µ–ª–∫—É.
- **DRY RUN** –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤—ã —Å–Ω–∏–º–µ—Ç–µ —Ç—É–º–±–ª–µ—Ä ¬´–î–µ–º–æ¬ª. 
- –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤–∏–¥–Ω–æ –≤ **ü™µ –õ–æ–≥–∏** (–∏—â–∏—Ç–µ –∑–∞–ø–∏—Å–∏ `ai.*`).
"""
)



st.divider()

st.divider()
st.subheader("üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è")
with st.expander("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫/–∞–≤—Ç–æ—Å—Ç–æ–ø –±–æ—Ç–∞ –∏ –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç"):
    col1, col2 = st.columns(2)
    with col1:
        en = st.toggle("–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-—Ç–æ—Ä–≥–æ–≤–ª—é –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", value=bool(getattr(s, "auto_trade_enabled", False)))
        start_t = st.text_input("–í—Ä–µ–º—è –∞–≤—Ç–æ-—Å—Ç–∞—Ä—Ç–∞ (—á—á:–º–º)", value=str(getattr(s, "auto_start_time", "09:00")))
        stop_t  = st.text_input("–í—Ä–µ–º—è –∞–≤—Ç–æ-—Å—Ç–æ–ø–∞ (—á—á:–º–º)", value=str(getattr(s, "auto_stop_time", "21:00")))
        auto_dry = st.toggle("–¢–æ—Ä–≥–æ–≤–∞—Ç—å –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –ø—Ä–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–µ", value=bool(getattr(s, "auto_dry_run", True)))
    with col2:
        rep = st.toggle("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –≤ Telegram", value=bool(getattr(s, "daily_report_enabled", False)))
        rep_t = st.text_input("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ (—á—á:–º–º)", value=str(getattr(s, "daily_report_time", "20:00")))
        loss = st.number_input("–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–∞ (%)", value=float(getattr(s, "ai_daily_loss_limit_pct", 1.0)), step=0.1)
        prof = st.number_input("–î–Ω–µ–≤–Ω–∞—è —Ü–µ–ª—å –ø—Ä–∏–±—ã–ª–∏ (%)", value=float(getattr(s, "ai_daily_profit_target_pct", 0.0)), step=0.1)

    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"):
        update_settings(tg_trade_notifs=bool(tg_trd), tg_trade_notifs_min_notional=float(tg_min), auto_trade_enabled=bool(en), auto_start_time=start_t, auto_stop_time=stop_t, auto_dry_run=bool(auto_dry),
                        daily_report_enabled=bool(rep), daily_report_time=rep_t,
                        ai_daily_loss_limit_pct=float(loss), ai_daily_profit_target_pct=float(prof))
        st.success("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –§–æ–Ω–æ–≤–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")


st.subheader("‚öôÔ∏è –î–æ–ø. –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–Ω–∏–≤–µ—Ä—Å—É–º–∞")
with st.expander("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–µ—Ç (–¥–ª—è –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–∞)"):
    wl = st.text_input("–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", value=str(getattr(s, 'ai_symbols_whitelist', '')),
                       help="–ï—Å–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ ‚Äî –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä –±–µ—Ä—ë—Ç –º–æ–Ω–µ—Ç—ã —Ç–æ–ª—å–∫–æ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞.")
    bl = st.text_input("–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–æ–Ω–µ—Ç (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", value=str(getattr(s, 'ai_symbols_blacklist', '')),
                       help="–≠—Ç–∏ –º–æ–Ω–µ—Ç—ã –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è –∏–∑ –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–∞.")
    man = st.text_input("–Ø —Å–∞–º –∑–∞–¥–∞–º –º–æ–Ω–µ—Ç—ã (–ø–µ—Ä–µ—á–∏—Å–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", value=str(getattr(s, 'ai_symbols_manual', '')),
                        help="–ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ ‚Äî –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä –≤–æ–∑—å–º—ë—Ç –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –º–æ–Ω–µ—Ç—ã.")
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–∫–∏ –º–æ–Ω–µ—Ç"):
        update_settings(tg_trade_notifs=bool(tg_trd), tg_trade_notifs_min_notional=float(tg_min), ai_symbols_whitelist=wl, ai_symbols_blacklist=bl, ai_symbols_manual=man)
        st.success("–°–ø–∏—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

st.subheader("üóÇ –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫")
colx, coly = st.columns(2)
with colx:
    if st.button("‚¨áÔ∏è –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ JSON"):
        from utils.envs import get_settings
        s = get_settings()
        try:
            data = s.dict() if hasattr(s, "dict") else (s.__dict__ if hasattr(s, "__dict__") else {})
        except Exception:
            data = {}
        import io, json
        buf = io.BytesIO(json.dumps(data, ensure_ascii=False, indent=2).encode("utf-8"))
        st.download_button("–°–∫–∞—á–∞—Ç—å settings.json", data=buf.getvalue(), file_name="settings.json", mime="application/json")
with coly:
    up = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å settings.json", type=["json"])
    if up is not None:
        try:
            import json
            payload = json.loads(up.read().decode("utf-8"))
            from utils.envs import update_settings
            update_settings(tg_trade_notifs=bool(tg_trd), tg_trade_notifs_min_notional=float(tg_min), **payload)
            st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")

st.subheader("üîî Telegram-–æ—Ç—á—ë—Ç—ã")
tg_trd = st.checkbox("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–µ–ª–∫–∞—Ö –≤ Telegram", value=bool(getattr(s, "tg_trade_notifs", False)))
tg_min = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º —Å–¥–µ–ª–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (USDT)", value=float(getattr(s, "tg_trade_notifs_min_notional", 50.0)), step=10.0)

with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ—Ç—á—ë—Ç–æ–≤)"):
    tok = st.text_input("Bot Token", type="password", value=str(getattr(s, "telegram_token", "")))
    chat = st.text_input("Chat ID", value=str(getattr(s, "telegram_chat_id", "")))
    en = st.toggle("–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", value=bool(getattr(s, "telegram_notify", False)),
                   help="–ö–æ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ ‚Äî –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ/–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ –∑–∞—è–≤–∫–∞—Ö.")
    if st.button("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å Telegram-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        update_settings(tg_trade_notifs=bool(tg_trd), tg_trade_notifs_min_notional=float(tg_min), telegram_token=tok, telegram_chat_id=chat, telegram_notify=bool(en))
        st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    if st.button("üß™ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"):
        r = send_test_message("–ü—Ä–∏–≤–µ—Ç! Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω ‚úÖ")
        st.write(f"–û—Ç–≤–µ—Ç: {r}")


st.divider()
st.subheader("–û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
try:
    summary = summarize_today()
    st.write(f"–°–æ–±—ã—Ç–∏–π: **{summary.get('events',0)}**, —Å–∏–≥–Ω–∞–ª–æ–≤: **{summary.get('signals',0)}**, –∑–∞—è–≤–æ–∫: **{summary.get('orders',0)}**, –æ—à–∏–±–æ–∫: **{summary.get('errors',0)}**.")
except Exception as e:
    st.write("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –≤ Telegram"):
    r = send_daily_report()
    st.success(f"–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {r}")

if st.button("üîì –°–Ω—è—Ç—å ‚Äò—Å—Ç–æ–ø-–¥–µ–Ω—å‚Äô –¥–æ –∑–∞–≤—Ç—Ä–∞"):
    stf = _load_state_file() or {}
    stf['stop_day_locked'] = False
    stf['stop_day_reason'] = ''
    if _save_state_file(stf):
        st.success('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–Ω—è—Ç–æ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è.')
    else:
        st.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–æ–ø-–¥–Ω—è.')

st.divider()
st.subheader("üîé –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏")
with st.expander("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫ –±–∏—Ä–∂–∞ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"):
    from utils.safety import guard_order
    ps1, ps2, ps3 = st.columns(3)
    with ps1:
        sym_prev = st.text_input("–°–∏–º–≤–æ–ª", value=(getattr(s, "ai_symbols_manual", "") or "BTCUSDT").split(",")[0].strip())
    with ps2:
        side_prev = st.selectbox("–°—Ç–æ—Ä–æ–Ω–∞", ["BUY","SELL"], index=0)
    with ps3:
        cat_prev = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", ["spot"], index=0)
    colp, colq = st.columns(2)
    with colp:
        price_prev = st.text_input("–¶–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–π)", value="")
    with colq:
        qty_prev = st.text_input("–ö–æ–ª-–≤–æ", value="10")
    if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"):
        try:
            pr = float(price_prev) if price_prev else None
            qv = float(qty_prev)
            res = guard_order(api, category=cat_prev, symbol=sym_prev.upper(), side=side_prev, orderType="Limit" if pr else "Market", qty=qv, price=pr)
            st.json(res)
            if res.get("decision") == "ok":
                st.success("OK ‚Äî –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–∏—Ä–∂–∏.")
            elif res.get("decision") == "adjusted":
                st.warning("–ë–∏—Ä–∂–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏—é ‚Äî –Ω–∏–∂–µ –ø–æ–∫–∞–∑–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
            else:
                st.error(f"–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {res.get('reason')}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

st.divider()
st.subheader("üó∫Ô∏è –ü—Ä–µ—Å–µ—Ç—ã —É–Ω–∏–≤–µ—Ä—Å—É–º–∞")
with st.expander("–§–∏–ª—å—Ç—Ä—ã –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–∞ –º–æ–Ω–µ—Ç"):
    preset = st.selectbox("–ü—Ä–µ—Å–µ—Ç", ["–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π","–°—Ç–∞–Ω–¥–∞—Ä—Ç","–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π"], index={"–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π":0,"–°—Ç–∞–Ω–¥–∞—Ä—Ç":1,"–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π":2}[str(getattr(s, "ai_universe_preset", "–°—Ç–∞–Ω–¥–∞—Ä—Ç")) if hasattr(s, "ai_universe_preset") else "–°—Ç–∞–Ω–¥–∞—Ä—Ç"])
    # spread threshold in bps and min daily turnover USD (heuristic, based on tickers endpoint)
    if preset == "–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π":
        max_spread_bps = st.number_input("–ú–∞–∫—Å. —Å–ø—Ä–µ–¥ (–±–ø—Å)", value=float(getattr(s, "ai_max_spread_bps", 10.0)), step=1.0)
        min_turnover_usd = st.number_input("–ú–∏–Ω. –æ–±–æ—Ä–æ—Ç (USD)", value=float(getattr(s, "ai_min_turnover_usd", 5_000_000.0)), step=100000.0)
    elif preset == "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π":
        max_spread_bps = st.number_input("–ú–∞–∫—Å. —Å–ø—Ä–µ–¥ (–±–ø—Å)", value=float(getattr(s, "ai_max_spread_bps", 50.0)), step=1.0)
        min_turnover_usd = st.number_input("–ú–∏–Ω. –æ–±–æ—Ä–æ—Ç (USD)", value=float(getattr(s, "ai_min_turnover_usd", 500_000.0)), step=50000.0)
    else:
        max_spread_bps = st.number_input("–ú–∞–∫—Å. —Å–ø—Ä–µ–¥ (–±–ø—Å)", value=float(getattr(s, "ai_max_spread_bps", 25.0)), step=1.0)
        min_turnover_usd = st.number_input("–ú–∏–Ω. –æ–±–æ—Ä–æ—Ç (USD)", value=float(getattr(s, "ai_min_turnover_usd", 2_000_000.0)), step=100000.0)
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç"):
        update_settings(tg_trade_notifs=bool(tg_trd), tg_trade_notifs_min_notional=float(tg_min), ai_universe_preset=preset, ai_max_spread_bps=float(max_spread_bps), ai_min_turnover_usd=float(min_turnover_usd))
        st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")


st.divider()
st.subheader("‚ö° WS Watchdog")
colw1, colw2 = st.columns(2)
with colw1:
    wd_on = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ WS", value=bool(getattr(s, "ws_watchdog_enabled", True)))
with colw2:
    wd_max = st.number_input("–ú–∞–∫—Å. –∑–∞–¥–µ—Ä–∂–∫–∞ heartbeat (—Å–µ–∫)", value=int(getattr(s, "ws_watchdog_max_age_sec", 90)), step=10)
if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å Watchdog"):
    update_settings(ws_watchdog_enabled=bool(wd_on), ws_watchdog_max_age_sec=int(wd_max))
    st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")


st.divider()
st.subheader("üß™ –°–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç–∏–∫ (–ø—Ä–µ–≤—å—é)")
with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±–æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç –¥–∞–ª—å—à–µ (–æ—Ü–µ–Ω–∫–∞)"):
    try:
        from utils.preview import next_tick_preview
        pr = next_tick_preview(api)
        st.json(pr)
        if pr.get("decision") == "skip":
            st.warning("–°–µ–π—á–∞—Å –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –±—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –±–∏—Ä–∂–∏. –û—Ç—Ä–µ–≥—É–ª–∏—Ä—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã/–ø—Ä–µ—Å–µ—Ç.")
        elif pr.get("decision") == "adjusted":
            st.info("–ó–∞—è–≤–∫–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏: —Å–º. –∏—Ç–æ–≥–æ–≤—ã–µ qty/price –≤ –±–ª–æ–∫–µ preview.")
        else:
            st.success("–û—Ü–µ–Ω–∫–∞ –≤ –Ω–æ—Ä–º–µ. –†–µ–∞–ª—å–Ω—ã–π AI –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –∏–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ ‚Äî —ç—Ç–æ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–≤—å—é.")
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–≤—å—é: {e}")
