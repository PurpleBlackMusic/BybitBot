from __future__ import annotations

from datetime import datetime, timedelta, timezone

import copy

import pandas as pd
import streamlit as st

from utils.guardian_bot import GuardianBot
from utils.ui import rerun


def _format_age(seconds: float) -> str:
    if seconds <= 0:
        return "‚Äî"
    delta = timedelta(seconds=int(seconds))
    if delta.days:
        return f"{delta.days} –¥. {delta.seconds // 3600:02d}:{(delta.seconds % 3600) // 60:02d}"
    hours, remainder = divmod(delta.seconds, 3600)
    minutes, secs = divmod(remainder, 60)
    if hours:
        return f"{hours}:{minutes:02d}:{secs:02d}"
    if minutes:
        return f"{minutes} –º–∏–Ω {secs:02d} —Å"
    return f"{secs} —Å"


def _format_timestamp(ts: float | None) -> str:
    if ts is None:
        return "‚Äî"
    try:
        dt = datetime.fromtimestamp(float(ts), tz=timezone.utc)
    except (OSError, OverflowError, ValueError, TypeError):
        return "‚Äî"
    return dt.strftime("%d.%m.%Y %H:%M:%S UTC")


def _mode_label(mode: str | None) -> str:
    mapping = {
        "buy": "–ü–æ–∫—É–ø–∞–µ–º",
        "sell": "–§–∏–∫—Å–∏—Ä—É–µ–º",
        "wait": "–ñ–¥—ë–º",
    }
    return mapping.get((mode or "").lower(), "–ñ–¥—ë–º")


def _format_threshold_value(value: float, unit: str) -> str:
    if unit == "%":
        return f"{value:.1f}%"
    if unit == "–±.–ø.":
        return f"{value:.1f} –±.–ø."
    return f"{value:.2f} {unit}"


def _progress_to_threshold(value: float, target: float) -> tuple[float | None, float]:
    if target <= 0:
        return None, target - value
    ratio = 0.0 if value <= 0 else value / target
    return ratio, target - value


def _recommendation(reason: str) -> str:
    text = reason.lower()
    if "—É—Å—Ç–∞—Ä" in text:
        return "–û–±–Ω–æ–≤–∏—Ç–µ status.json –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç GuardianBot."
    if "—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å" in text:
        return "–î–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—Å–∏—Ç –∑–∞–¥–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –∏–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
    if "–≤—ã–≥–æ–¥–∞" in text:
        return "–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞ –∏–ª–∏ –∂–¥–∏—Ç–µ –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω–æ–≥–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ä–∏—Å–∫/–ø—Ä–∏–±—ã–ª—å."
    if "–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞" in text:
        return "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ ‚Äî AI –ø–æ–∫–∞ –Ω–µ –¥–∞—ë—Ç —è–≤–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
    if "–∫—ç—à" in text or "–¥–∞–Ω–Ω" in text:
        return "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ."
    return "–£—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GuardianBot –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø–æ–ª–Ω–æ–º—É –æ—Ç—á—ë—Ç—É."


def _priority_for(reason: str) -> tuple[int, str, str]:
    text = reason.lower()
    if "—É—Å—Ç–∞—Ä" in text:
        return 0, "–û—Å–≤–µ–∂–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ status.json –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ GuardianBot."
    if "—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å" in text:
        return 1, "–î–æ–∂–¥–∞—Ç—å—Å—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ –∏–ª–∏ –æ—Ç—Ä–µ–≥—É–ª–∏—Ä—É–π—Ç–µ –ø–æ—Ä–æ–≥–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏."
    if "–≤—ã–≥–æ–¥–∞" in text:
        return 1, "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã–≥–æ–¥—É", "–°—Ä–∞–≤–Ω–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—É—é –≤—ã–≥–æ–¥—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º –∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ —Ä–∏—Å–∫."
    if "–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞" in text:
        return 2, "–ñ–¥–∞—Ç—å —Å–∏–≥–Ω–∞–ª–∞", "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ ‚Äî —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –µ—â—ë —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è."
    return 3, "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã GuardianBot —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏."


def _priority_label(rank: int) -> str:
    if rank <= 0:
        return "–°—Ä–æ—á–Ω–æ"
    if rank == 1:
        return "–í–∞–∂–Ω–æ"
    if rank == 2:
        return "–ù–∞–±–ª—é–¥–∞–µ–º"
    return "–§–æ–Ω–æ–≤–æ"


def _readiness_guidance(title: str) -> str:
    title = title.lower()
    if "–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö" in title:
        return "–ù–∞–∂–º–∏—Ç–µ ¬´–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ¬ª –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ status.json –æ–±–Ω–æ–≤–∏–ª—Å—è —É GuardianBot."
    if "–∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö" in title:
        return "–í–∫–ª—é—á–∏—Ç–µ –∂–∏–≤–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ –±–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à."
    if "—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å" in title:
        return "–ñ–¥–∏—Ç–µ —Ä–æ—Å—Ç–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø–æ—Ä–æ–≥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö GuardianBot."
    if "–æ–∂–∏–¥–∞–µ–º–∞—è –≤—ã–≥–æ–¥–∞" in title:
        return "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞ –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ EV –ø—Ä–µ–≤—ã—Å–∏—Ç –º–∏–Ω–∏–º—É–º."
    if "–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª" in title:
        return "–î–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ AI —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏."
    return "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤ GuardianBot –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è."


def _append_history(
    summary: dict[str, object],
    readiness_score: float,
    passed_checks: int,
    total_checks: int,
) -> list[dict[str, object]]:
    history_list = list(st.session_state.get("readiness_history", []))
    next_index = len(history_list) + 1

    raw_label = summary.get("last_update") or summary.get("updated_text") or ""
    if isinstance(raw_label, str):
        raw_label = raw_label.strip()
    label = raw_label or f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ #{next_index}"

    existing_labels = {entry.get("label") for entry in history_list}
    if label in existing_labels:
        label = f"{label} ¬∑ {next_index}"

    probability_pct = float(summary.get("probability_pct") or 0.0)
    ev_bps = float(summary.get("ev_bps") or 0.0)
    age_seconds = float(summary.get("age_seconds") or 0.0)

    entry = {
        "label": label,
        "mode": _mode_label(summary.get("mode")),
        "probability_pct": round(probability_pct, 2),
        "ev_bps": round(ev_bps, 2),
        "readiness_score": round(readiness_score, 2),
        "checks": f"{passed_checks}/{total_checks}" if total_checks else "0/0",
        "actionable": "–î–∞" if summary.get("actionable") else "–ù–µ—Ç",
        "age": _format_age(age_seconds),
    }

    if history_list:
        last = history_list[-1]
        if (
            last.get("label") == entry["label"]
            and last.get("probability_pct") == entry["probability_pct"]
            and last.get("ev_bps") == entry["ev_bps"]
            and last.get("readiness_score") == entry["readiness_score"]
            and last.get("checks") == entry["checks"]
            and last.get("actionable") == entry["actionable"]
        ):
            return history_list

    history_list.append(entry)
    trimmed_history = history_list[-20:]
    st.session_state["readiness_history"] = trimmed_history
    return trimmed_history


def _recovery_steps(
    reasons: list[str],
    readiness_checks: list[tuple[str, bool, str]],
    summary: dict[str, object],
) -> list[dict[str, str]]:
    steps: list[dict[str, str]] = []
    seen_titles: set[str] = set()

    for reason in reasons:
        rank, title, guidance = _priority_for(reason)
        if title in seen_titles:
            continue
        steps.append(
            {
                "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç": _priority_label(rank),
                "–®–∞–≥": title,
                "–î–µ–π—Å—Ç–≤–∏–µ": guidance,
            }
        )
        seen_titles.add(title)

    if summary.get("fallback_used") and "–í–∫–ª—é—á–∏—Ç—å –∂–∏–≤—ã–µ –¥–∞–Ω–Ω—ã–µ" not in seen_titles:
        steps.append(
            {
                "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç": _priority_label(0),
                "–®–∞–≥": "–í–∫–ª—é—á–∏—Ç—å –∂–∏–≤—ã–µ –¥–∞–Ω–Ω—ã–µ",
                "–î–µ–π—Å—Ç–≤–∏–µ": "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –∂–∏–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞, —á—Ç–æ–±—ã —É–π—Ç–∏ –æ—Ç –∫—ç—à–∞.",
            }
        )
        seen_titles.add("–í–∫–ª—é—á–∏—Ç—å –∂–∏–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")

    for title, is_ok, detail in readiness_checks:
        if is_ok or title in seen_titles:
            continue
        steps.append(
            {
                "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç": _priority_label(1),
                "–®–∞–≥": title,
                "–î–µ–π—Å—Ç–≤–∏–µ": detail,
            }
        )
        seen_titles.add(title)

    return steps


st.set_page_config(page_title="–ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º", page_icon="üß≠", layout="wide")


@st.cache_resource(show_spinner=False)
def _get_guardian() -> GuardianBot:
    """Reuse a single GuardianBot instance across reruns."""

    return GuardianBot()


bot = _get_guardian()

st.title("üß≠ –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º")
st.caption(
    "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–º–Ω–æ–≥–æ —Å–ø–æ—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞: –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞, –ø–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω –∏ —á–∞—Ç –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤."
)

refresh = st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", use_container_width=True)
if refresh:
    bot.refresh()
    rerun()

summary = bot.status_summary()
brief = bot.generate_brief()
plan_steps = bot.plan_steps(brief)
risk_text = bot.risk_summary()
portfolio = bot.portfolio_overview()
watchlist = bot.market_watchlist()
recent_trades = bot.recent_trades()
trade_stats = bot.trade_statistics()
health = bot.data_health()
automation_health = health.get("automation") or {}

previous_summary = st.session_state.get("previous_summary")
previous_readiness = st.session_state.get("previous_readiness")

thresholds = summary.get("thresholds") or {}
mode = summary.get("mode", "wait")

status_cols = st.columns(3)
mode_delta = None
if previous_summary:
    previous_mode = _mode_label(previous_summary.get("mode"))
    if previous_mode != _mode_label(mode):
        mode_delta = f"–ë—ã–ª–æ: {previous_mode}"
status_cols[0].metric("–†–µ–∂–∏–º", _mode_label(mode), mode_delta)
if summary.get("headline"):
    status_cols[0].caption(summary.get("headline"))

probability_pct = float(summary.get("probability_pct") or 0.0)
probability_delta = (
    probability_pct - float(previous_summary.get("probability_pct") or 0.0)
    if previous_summary
    else None
)
probability_delta_text = (
    f"{probability_delta:+.1f} –ø.–ø."
    if probability_delta is not None
    else None
)
status_cols[1].metric("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", f"{probability_pct:.1f}%", probability_delta_text)

if mode == "buy":
    prob_threshold = float(thresholds.get("buy_probability_pct") or 0.0)
elif mode == "sell":
    prob_threshold = float(thresholds.get("sell_probability_pct") or 0.0)
else:
    prob_threshold = 0.0
if prob_threshold:
    status_cols[1].caption(f"–ü–æ—Ä–æ–≥: {prob_threshold:.0f}%")

ev_bps = float(summary.get("ev_bps") or 0.0)
ev_delta = (
    ev_bps - float(previous_summary.get("ev_bps") or 0.0)
    if previous_summary
    else None
)
ev_delta_text = f"{ev_delta:+.0f} –±.–ø." if ev_delta is not None else None
status_cols[2].metric("–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª", f"{ev_bps:.0f} –±.–ø.", ev_delta_text)
min_ev = float(thresholds.get("min_ev_bps") or 0.0)
if min_ev:
    status_cols[2].caption(f"–ú–∏–Ω.: {min_ev:.0f} –±.–ø.")

if summary.get("caution"):
    st.warning(summary["caution"])

st.write(summary.get("analysis", ""))
st.info(summary.get("action_text", ""))
st.caption(summary.get("updated_text", ""))
if summary.get("confidence_text"):
    st.caption(summary["confidence_text"])
if summary.get("ev_text"):
    st.caption(summary["ev_text"])

age_seconds = float(summary.get("age_seconds") or 0.0)
detail_cols = st.columns(3)
detail_cols[0].metric("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", summary.get("last_update", "‚Äî"))
detail_cols[1].metric("–í–æ–∑—Ä–∞—Å—Ç —Å—Ç–∞—Ç—É—Å–∞", _format_age(age_seconds))
source_label = str(summary.get("status_source") or "").lower()
if source_label == "live":
    source_text = "–ñ–∏–≤–æ–π —Å—Ç–∞—Ç—É—Å"
elif source_label == "file":
    source_text = "–§–∞–π–ª status.json"
elif source_label == "cached":
    source_text = "–ö—ç—à"
else:
    source_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
detail_cols[2].metric("–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö", source_text)

reasons = summary.get("actionable_reasons") or []
staleness = summary.get("staleness") or {}

if summary.get("actionable"):
    st.success("–°–∏–≥–Ω–∞–ª –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∏—Å–∫–∞ ‚Äî –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é.")
    if reasons:
        st.caption("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö:")
        st.markdown("\n".join(f"‚Ä¢ {reason}" for reason in reasons))
else:
    st.caption("–°–∏–≥–Ω–∞–ª –ø–æ–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π: –±–æ—Ç –∂–¥—ë—Ç –ª—É—á—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")
    if reasons:
        st.warning(
            "\n".join(
                [
                    "–ü—Ä–∏—á–∏–Ω—ã –ø–∞—É–∑—ã:",
                    *(f"‚Ä¢ {reason}" for reason in reasons),
                ]
            )
        )
        st.dataframe(
            pd.DataFrame(
                [
                    {
                        "–ü—Ä–∏—á–∏–Ω–∞": reason,
                        "–ß—Ç–æ –¥–µ–ª–∞—Ç—å": _recommendation(reason),
                    }
                    for reason in reasons
                ]
            ),
            use_container_width=True,
            hide_index=True,
        )

st.markdown("#### –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è")
with st.container(border=True):
    automation_ok = bool(automation_health.get("ok"))
    automation_message = (
        str(automation_health.get("message") or "AI –≥–æ—Ç–æ–≤ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–¥–µ–ª–∫–∞–º.").strip()
    )
    automation_details = automation_health.get("details")
    reasons = summary.get("actionable_reasons") or []

    if automation_ok:
        st.success(automation_message)
    else:
        st.warning(automation_message)

    if isinstance(automation_details, str) and automation_details.strip():
        st.caption(automation_details.strip())

    if not automation_ok and reasons:
        st.caption("–ü–æ—á–µ–º—É –±–æ—Ç –∂–¥—ë—Ç:")
        st.markdown("\n".join(f"‚Ä¢ {reason}" for reason in reasons))
    elif not reasons and not automation_ok:
        st.caption("AI –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—Ö–æ–¥–∞.")

readiness_checks = []
staleness_state = (staleness.get("state") or "").lower()
staleness_message = staleness.get("message") or ""
if staleness_state == "stale":
    readiness_checks.append(
        (
            "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
            False,
            staleness_message or "–°–∏–≥–Ω–∞–ª —É—Å—Ç–∞—Ä–µ–ª ‚Äî –æ–±–Ω–æ–≤–∏—Ç–µ status.json –ø–µ—Ä–µ–¥ —Å–¥–µ–ª–∫–æ–π.",
        )
    )
else:
    readiness_checks.append(
        (
            "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö",
            True,
            staleness_message or "–°—Ç–∞—Ç—É—Å —Å–≤–µ–∂–∏–π ‚Äî –¥–∞–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è.",
        )
    )

if summary.get("fallback_used"):
    readiness_checks.append(
        (
            "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö",
            False,
            "–ü–æ–∫–∞–∑–∞–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ GuardianBot –æ–±–Ω–æ–≤–∏–ª—Å—è –Ω–µ–¥–∞–≤–Ω–æ.",
        )
    )
else:
    readiness_checks.append(
        (
            "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö",
            True,
            "–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∂–∏–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.",
        )
    )

mode = summary.get("mode", "wait")
if mode == "buy":
    buy_threshold = float(thresholds.get("buy_probability_pct") or 0.0)
    has_threshold = buy_threshold > 0
    readiness_checks.append(
        (
            "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–æ–∫—É–ø–∫–µ",
            probability_pct >= buy_threshold if has_threshold else True,
            (
                f"{probability_pct:.1f}% –ø—Ä–æ—Ç–∏–≤ –ø–æ—Ä–æ–≥–∞ {buy_threshold:.1f}%."
                if has_threshold
                else "–ü–æ—Ä–æ–≥ –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏."
            ),
        )
    )
    min_ev = float(thresholds.get("min_ev_bps") or 0.0)
    readiness_checks.append(
        (
            "–û–∂–∏–¥–∞–µ–º–∞—è –≤—ã–≥–æ–¥–∞",
            ev_bps >= min_ev,
            f"{ev_bps:.0f} –±.–ø. –ø—Ä–æ—Ç–∏–≤ –º–∏–Ω–∏–º—É–º–∞ {min_ev:.0f} –±.–ø.",
        )
    )
elif mode == "sell":
    sell_threshold = float(thresholds.get("sell_probability_pct") or 0.0)
    has_threshold = sell_threshold > 0
    readiness_checks.append(
        (
            "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–¥–∞–∂–µ",
            probability_pct >= sell_threshold if has_threshold else True,
            (
                f"{probability_pct:.1f}% –ø—Ä–æ—Ç–∏–≤ –ø–æ—Ä–æ–≥–∞ {sell_threshold:.1f}%."
                if has_threshold
                else "–ü–æ—Ä–æ–≥ –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏."
            ),
        )
    )
    min_ev = float(thresholds.get("min_ev_bps") or 0.0)
    readiness_checks.append(
        (
            "–û–∂–∏–¥–∞–µ–º–∞—è –≤—ã–≥–æ–¥–∞",
            ev_bps >= min_ev,
            f"{ev_bps:.0f} –±.–ø. –ø—Ä–æ—Ç–∏–≤ –º–∏–Ω–∏–º—É–º–∞ {min_ev:.0f} –±.–ø.",
        )
    )
else:
    readiness_checks.append(
        (
            "–ê–∫—Ç–∏–≤–Ω—ã–π —Å–∏–≥–Ω–∞–ª",
            False,
            "AI –Ω–µ –¥–∞—ë—Ç —á—ë—Ç–∫–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Å–¥–µ–ª–∫—É ‚Äî —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è.",
        )
    )

st.markdown("#### –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏")
for title, is_ok, detail in readiness_checks:
    icon = "‚úÖ" if is_ok else "‚ö†Ô∏è"
    st.markdown(f"{icon} **{title}** ‚Äî {detail}")

total_checks = len(readiness_checks)
passed_checks = sum(1 for _, is_ok, _ in readiness_checks if is_ok)
status_cols = st.columns(3)
status_cols[0].metric(
    "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞",
    f"{passed_checks}/{total_checks}",
    "–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–æ–π–¥–µ–Ω—ã" if passed_checks == total_checks else "–¢—Ä–µ–±—É—é—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—è",
)

readiness_score = (passed_checks / total_checks) * 100.0 if total_checks else 0.0
readiness_delta = (
    readiness_score - previous_readiness
    if previous_readiness is not None
    else None
)
readiness_delta_text = (
    f"{readiness_delta:+.0f} –ø.–ø."
    if readiness_delta is not None
    else None
)
status_cols[1].metric("–ò–Ω–¥–µ–∫—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏", f"{readiness_score:.0f}%", readiness_delta_text)

blocker = None
if total_checks:
    blocker = next(((title, detail) for title, ok, detail in readiness_checks if not ok), None)
status_cols[2].metric(
    "–ì–ª–∞–≤–Ω—ã–π –±–ª–æ–∫–µ—Ä",
    blocker[0] if blocker else "‚Äî",
    blocker[1] if blocker else "–ù–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π",
)

readiness_rows = []
for title, is_ok, detail in readiness_checks:
    readiness_rows.append(
        {
            "–ü—Ä–æ–≤–µ—Ä–∫–∞": title,
            "–°—Ç–∞—Ç—É—Å": "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–∞" if is_ok else "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è",
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": detail,
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è": "‚Äî" if is_ok else _readiness_guidance(title),
        }
    )

if readiness_rows:
    st.dataframe(
        pd.DataFrame(readiness_rows),
        use_container_width=True,
        hide_index=True,
    )

progress_items: list[tuple[str, float, float, str]] = []
buy_threshold_pct = float(thresholds.get("buy_probability_pct") or 0.0)
sell_threshold_pct = float(thresholds.get("sell_probability_pct") or 0.0)
min_ev_bps = float(thresholds.get("min_ev_bps") or 0.0)

if mode == "buy" and buy_threshold_pct:
    progress_items.append(("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫ –ø–æ–∫—É–ø–∫–µ", probability_pct, buy_threshold_pct, "%"))
elif mode == "sell" and sell_threshold_pct:
    progress_items.append(("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∂–µ", probability_pct, sell_threshold_pct, "%"))

if min_ev_bps > 0:
    progress_items.append(("–û–∂–∏–¥–∞–µ–º–∞—è –≤—ã–≥–æ–¥–∞", ev_bps, min_ev_bps, "–±.–ø."))

if progress_items:
    st.markdown("#### –ü—Ä–æ–≥—Ä–µ—Å—Å –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–¥–µ–ª–∫–µ")
    st.caption(
        "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–∏–±–ª–∏–∑–∏–ª–∏—Å—å –∫ –ø–æ—Ä–æ–≥–∞–º, –∫–æ—Ç–æ—Ä—ã–µ —Å–Ω–∏–º–∞—é—Ç –∑–∞—â–∏—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã."
    )
    cols = st.columns(len(progress_items))
    for col, (title, value, target, unit) in zip(cols, progress_items):
        col.markdown(f"**{title}**")
        ratio, gap = _progress_to_threshold(value, target)
        if ratio is None:
            col.info(
                f"–ü–æ—Ä–æ–≥ –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ ({_format_threshold_value(value, unit)})."
            )
            continue
        progress = max(0.0, min(ratio, 1.0))
        col.progress(progress)
        formatted_value = _format_threshold_value(value, unit)
        formatted_target = _format_threshold_value(target, unit)
        formatted_gap = _format_threshold_value(abs(gap), unit)
        percent = progress * 100.0
        if gap > 0:
            col.caption(
                f"{formatted_value} –∏–∑ {formatted_target} ({percent:.0f}% –æ—Ç —Ü–µ–ª–∏). –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –µ—â—ë {formatted_gap}."
            )
        else:
            col.caption(
                f"{formatted_value} –∏–∑ {formatted_target} (—Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –Ω–∞ {percent:.0f}%). –ó–∞–ø–∞—Å {formatted_gap}."
            )

recovery_plan = _recovery_steps(reasons, readiness_checks, summary)
if recovery_plan:
    st.markdown("#### –ö–∞–∫ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
    st.dataframe(
        pd.DataFrame(recovery_plan),
        use_container_width=True,
        hide_index=True,
    )

history = _append_history(summary, readiness_score, passed_checks, total_checks)
if history:
    st.markdown("#### –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è —Å–∏–≥–Ω–∞–ª–∞")
    st.caption(
        "–§–∏–∫—Å–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –∫–∞–∫ –º–µ–Ω—è—é—Ç—Å—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, EV –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.",
    )
    history_df = pd.DataFrame(history)
    chart_df = history_df.set_index("label")[
        ["probability_pct", "ev_bps", "readiness_score"]
    ]
    chart_df = chart_df.rename(
        columns={
            "probability_pct": "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, %",
            "ev_bps": "EV, –±.–ø.",
            "readiness_score": "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å, %",
        }
    )
    st.line_chart(chart_df, height=240)

    display_df = history_df.copy()
    display_df["probability_pct"] = display_df["probability_pct"].map(lambda v: f"{v:.1f}%")
    display_df["ev_bps"] = display_df["ev_bps"].map(lambda v: f"{v:.0f} –±.–ø.")
    display_df["readiness_score"] = display_df["readiness_score"].map(lambda v: f"{v:.0f}%")
    display_df = display_df.rename(
        columns={
            "label": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
            "mode": "–†–µ–∂–∏–º",
            "checks": "–ß–µ–∫-–ª–∏—Å—Ç",
            "actionable": "–ì–æ—Ç–æ–≤ –∫ —Å–¥–µ–ª–∫–µ",
            "age": "–í–æ–∑—Ä–∞—Å—Ç",
            "probability_pct": "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å",
            "ev_bps": "EV",
            "readiness_score": "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å",
        }
    )
    display_df = display_df[
        [
            "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
            "–†–µ–∂–∏–º",
            "–ì–æ—Ç–æ–≤ –∫ —Å–¥–µ–ª–∫–µ",
            "–ß–µ–∫-–ª–∏—Å—Ç",
            "–í–æ–∑—Ä–∞—Å—Ç",
            "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å",
            "EV",
            "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å",
        ]
    ]
    st.dataframe(display_df, use_container_width=True, hide_index=True)

st.session_state["previous_summary"] = copy.deepcopy(summary)
st.session_state["previous_readiness"] = readiness_score

with st.expander("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ —Å–∏–≥–Ω–∞–ª–∞", expanded=False):
    mode_hint = summary.get("mode_hint")
    if mode_hint:
        st.markdown(
            f"**–ü–æ–¥—Å–∫–∞–∑–∫–∞ —Ä–µ–∂–∏–º–∞:** {mode_hint} (–∏—Å—Ç–æ—á–Ω–∏–∫: {summary.get('mode_hint_source', '‚Äî')})."
        )
    st.caption(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å–∞: "
        + ", ".join(summary.get("raw_keys", []))
        if summary.get("raw_keys")
        else "–°—ã—Ä—ã–µ –ø–æ–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã."
    )
    st.caption(
        (
            {
                "live": "–ò—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç–∞—Ç—É—Å–∞: –∂–∏–≤–æ–π",
                "file": "–ò—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç–∞—Ç—É—Å–∞: —Ñ–∞–π–ª",
                "cached": "–ò—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç–∞—Ç—É—Å–∞: –∫—ç—à",
            }.get(
                str(summary.get("status_source") or "").lower(),
                "–ò—Å—Ç–æ—á–Ω–∏–∫ —Å—Ç–∞—Ç—É—Å–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            )
        )
    )

st.divider()
st.subheader("–ü–æ—à–∞–≥–æ–≤—ã–π –ø–ª–∞–Ω")
if plan_steps:
    st.markdown("\n".join(f"{idx + 1}. {step}" for idx, step in enumerate(plan_steps)))
else:
    st.info("–ü–ª–∞–Ω —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞.")

st.subheader("–†–∏—Å–∫–∏ –∏ –∑–∞—â–∏—Ç–∞")
st.markdown(risk_text)

st.divider()
st.subheader("–ü–æ—Ä—Ç—Ñ–µ–ª—å")
portfolio_totals = portfolio.get("human_totals", {})
cols = st.columns(3)
cols[0].metric("–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ", portfolio_totals.get("realized", "0.00 USDT"))
cols[1].metric("–í –ø–æ–∑–∏—Ü–∏–∏", portfolio_totals.get("open_notional", "0.00 USDT"))
cols[2].metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫", portfolio_totals.get("open_positions", "0"))

positions = portfolio.get("positions", [])
if positions:
    st.dataframe(pd.DataFrame(positions), use_container_width=True, hide_index=True)
else:
    st.caption("–ü–æ–∑–∏—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚Äî –∫–∞–ø–∏—Ç–∞–ª –≤ —Ä–µ–∑–µ—Ä–≤–µ.")

st.divider()
st.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")

health_cards = [
    health.get("ai_signal"),
    health.get("executions"),
    health.get("api_keys"),
    health.get("realtime_trading"),
]
health_cards = [card for card in health_cards if card]
if health_cards:
    cols = st.columns(len(health_cards))
    for col, card in zip(cols, health_cards):
        icon = "‚úÖ" if card.get("ok") else "‚ö†Ô∏è"
        col.metric(card.get("title", "–°—Ç–∞—Ç—É—Å"), icon, card.get("message", ""))
        details = card.get("details")
        if details:
            col.caption(details)

if watchlist:
    st.markdown("#### –ù–∞–±–ª—é–¥–∞–µ–º—ã–µ –ø–∞—Ä—ã")
    st.dataframe(pd.DataFrame(watchlist), use_container_width=True, hide_index=True)

if recent_trades:
    st.markdown("#### –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏")
    st.dataframe(pd.DataFrame(recent_trades), use_container_width=True, hide_index=True)

if trade_stats.get("trades"):
    st.markdown("#### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")
    stats_cols = st.columns(3)
    stats_cols[0].metric("–°–¥–µ–ª–æ–∫", int(trade_stats.get("trades", 0)))
    stats_cols[1].metric("–û–±–æ—Ä–æ—Ç", trade_stats.get("gross_volume_human", "0.00 USDT"))
    maker_ratio = float(trade_stats.get("maker_ratio", 0.0) or 0.0) * 100.0
    stats_cols[2].metric("–ú–µ–π–∫–µ—Ä", f"{maker_ratio:.0f}%")
    st.caption(
        " ¬∑ ".join(
            [
                f"{trade_stats.get('activity', {}).get('15m', 0)} –∑–∞ 15 –º–∏–Ω—É—Ç",
                f"{trade_stats.get('activity', {}).get('1h', 0)} –∑–∞ —á–∞—Å",
                f"{trade_stats.get('activity', {}).get('24h', 0)} –∑–∞ —Å—É—Ç–∫–∏",
                f"–ø–æ—Å–ª–µ–¥–Ω—è—è: {trade_stats.get('last_trade_at', '‚Äî')}",
            ]
        )
    )

st.divider()
st.subheader("–ü–æ–æ–±—â–∞–π—Ç–µ—Å—å —Å –±–æ—Ç–æ–º")
if "guardian_chat" not in st.session_state:
    st.session_state["guardian_chat"] = [
        {"role": "assistant", "content": bot.initial_message()},
    ]

for message in st.session_state["guardian_chat"]:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if prompt := st.chat_input("–°–ø—Ä–æ—Å–∏—Ç–µ –æ —Ä–∏—Å–∫–∞—Ö, –ø—Ä–∏–±—ã–ª–∏ –∏–ª–∏ –ø–ª–∞–Ω–µ‚Ä¶"):
    st.session_state["guardian_chat"].append({"role": "user", "content": prompt})
    st.session_state["guardian_chat"].append({"role": "assistant", "content": bot.answer(prompt)})
    rerun()
