
from __future__ import annotations
import streamlit as st, pandas as pd
from utils.envs import get_settings
from utils.bybit_api import BybitAPI, BybitCreds
from utils.portfolio import corr_matrix, estimate_portfolio_allocation, load_corr
from utils.hrp import hrp_weights

st.title("üß≠ HRP vs Vol‚ÄëTarget ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–ª–ª–æ–∫–∞—Ü–∏–π")

s = get_settings()
api = BybitAPI(BybitCreds(s.api_key, s.api_secret, s.testnet))
symbols = [x.strip().upper() for x in (s.ai_symbols or "BTCUSDT,ETHUSDT,SOLUSDT").split(",") if x.strip()]

if st.button("üîÑ –ü–æ—Å—á–∏—Ç–∞—Ç—å –º–∞—Ç—Ä–∏—Ü—É (30–¥, 1h)"):
    C = corr_matrix(api, symbols, interval="60", lookback_hours=24*30)
    st.dataframe(C, use_container_width=True)
else:
    C = load_corr()
    if not C.empty:
        st.dataframe(C, use_container_width=True)
    else:
        st.info("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã. –ü–µ—Ä–µ—Å—á–∏—Ç–∞–π—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ Portfolio Risk.")

st.divider()
st.subheader("HRP –≤–µ—Å–∞ (–ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–∞—Ç—Ä–∏—Ü–µ)")
if not C.empty:
    # —á–µ—Ä–Ω–æ–≤–æ–π R DataFrame –¥–ª—è –≤–µ—Å–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–≤–∞—Ä–∏–∞—Ü–∏—é –∏–∑ C –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ ‚Äî —Å—É—Ä—Ä–æ–≥–∞—Ç)
    import numpy as np
    # —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Ä—è–¥—ã –Ω–µ —Å—Ç—Ä–æ–∏–º ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º corr –¥–ª—è –ø–æ—Ä—è–¥–∫–∞, –∫–æ–≤–∞—Ä–∏–∞—Ü–∏—é –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –º–∞—Å—à—Ç–∞–±–∞ –≤ HRP‚Äë–≤–µ—Å–∞—Ö
    # –ø–æ–¥–∞–¥–∏–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É R, —á—Ç–æ–±—ã hrp_weights –ø—Ä–∏–Ω—è–ª DataFrame
    R = pd.DataFrame(np.random.randn(100, len(C.columns)), columns=C.columns)
    w_hrp = hrp_weights(R)
    st.dataframe(w_hrp.rename("weight").to_frame(), use_container_width=True)
else:
    st.info("–ù–µ—Ç –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è HRP.")

st.divider()
st.subheader("Vol‚ÄëTarget –∞–ª–ª–æ–∫–∞—Ü–∏–∏ (–∏–∑ Portfolio Risk)")
eq = st.number_input("Equity (USDT)", 0.0, 1e9, 1000.0, 10.0)
if st.button("üìê –†–∞—Å—Å—á–∏—Ç–∞—Ç—å vol‚Äëtarget"):
    out = estimate_portfolio_allocation(api, symbols, prices={}, equity_usdt=float(eq), settings=s)
    st.json(out.get("alloc", {}))
