
from __future__ import annotations
import streamlit as st, pandas as pd
from utils.dataframe import arrow_safe
from utils.envs import get_api_client, get_settings, update_settings
from utils.universe import (
    apply_universe_to_settings,
    build_universe,
    filter_available_spot_pairs,
    filter_usdt_pairs,
    load_universe,
)

st.title("üåê Universe Builder (Spot) ‚Äî —Ç–æ–ø –ø–æ –æ–±–æ—Ä–æ—Ç—É 24h")

s = get_settings()
api = get_api_client()

size = st.number_input("–†–∞–∑–º–µ—Ä —é–Ω–∏–≤–µ—Ä—Å–∞", 1, 50, int(getattr(s, "ai_universe_size", 8) or 8))
min_turn = st.number_input("–ú–∏–Ω. –æ–±–æ—Ä–æ—Ç 24h (USD)", 0.0, 1e12, float(getattr(s, "ai_universe_min_turnover_usd", 2_000_000.0) or 2_000_000.0))
if st.button("üîé –°–æ–±—Ä–∞—Ç—å —Ç–æ–ø USDT‚Äë–ø–∞—Ä –ø–æ 24h –æ–±–æ—Ä–æ—Ç—É"):
    syms = build_universe(api, size=int(size), min_turnover=float(min_turn))
    st.success(f"–Æ–Ω–∏–≤–µ—Ä—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {', '.join(syms)}")
    st.dataframe(arrow_safe(pd.DataFrame({"symbol": syms})), use_container_width=True)

if st.button("üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (ai_symbols)"):
    syms = load_universe()
    filtered_syms = filter_available_spot_pairs(syms)
    if filtered_syms:
        apply_universe_to_settings(filtered_syms)
        st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ ai_symbols (—Ç–æ–ª—å–∫–æ USDT-–ø–∞—Ä—ã).")
    else:
        st.info("–°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ —é–Ω–∏–≤–µ—Ä—Å –∏–∑ USDT-–ø–∞—Ä.")


st.divider()
st.subheader("Auto‚Äërotate (—Ä–∞–∑ –≤ —Å—É—Ç–∫–∏) + WL/BL")
wl = st.text_input(
    "Whitelist (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å)",
    value=(getattr(s, "ai_whitelist", "") or ""),
)
bl = st.text_input(
    "Blacklist (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –∏—Å–∫–ª—é—á–∏—Ç—å)",
    value=(getattr(s, "ai_blacklist", "") or ""),
)
force_text = st.text_input(
    "Force include (–æ–±–æ–π—Ç–∏ —Ñ–∏–ª—å—Ç—Ä—ã —Å–∫–∞–Ω–µ—Ä–∞)",
    value=(getattr(s, "ai_force_include", "") or ""),
    help="–°–∏–º–≤–æ–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –±—É–¥—É—Ç –ø–æ–ø–∞–¥–∞—Ç—å –≤ —à–æ—Ä—Ç-–ª–∏—Å—Ç –¥–∞–∂–µ –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏.",
)
if st.button("üîÅ –ê–≤—Ç–æ‚Äë—Ä–æ—Ç–∞—Ü–∏—è —Å–µ–π—á–∞—Å"):
    from utils.universe import auto_rotate_universe
    from utils.envs import update_settings
    wl_list = [x.strip().upper() for x in (wl or "").split(',') if x.strip()]
    bl_list = [x.strip().upper() for x in (bl or "").split(',') if x.strip()]
    wl_usdt = filter_available_spot_pairs(wl_list)
    if wl_usdt != wl_list:
        st.warning("Whitelist –æ—á–∏—â–µ–Ω –æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–ª–∏ –Ω–µ-USDT –ø–∞—Ä –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.")
    force_list = [x.strip().upper() for x in (force_text or "").split(',') if x.strip()]
    force_usdt = filter_available_spot_pairs(force_list)
    syms = auto_rotate_universe(
        api,
        size=int(size),
        min_turnover=float(min_turn),
        max_spread_bps=25.0,
        whitelist=wl_usdt,
        blacklist=bl_list,
    )
    if syms:
        st.success(', '.join(syms))
        update_settings(
            ai_symbols=','.join(syms),
            ai_whitelist=','.join(wl_usdt),
            ai_blacklist=','.join(bl_list),
            ai_force_include=','.join(force_usdt),
        )
    else:
        st.info("–ù–µ–¥–∞–≤–Ω–æ —É–∂–µ –∫—Ä—É—Ç–∏–ª–∏. –ü—Ä–æ–π–¥—ë—Ç ~—Å—É—Ç–∫–∏ ‚Äî –æ–±–Ω–æ–≤–∏–º.")

st.caption("Force include —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (ai_force_include) –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ —Å –æ—Å–ª–∞–±–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.")
col1, col2 = st.columns([2, 1])
with col1:
    new_force = st.text_input(
        "–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É –≤ force include", "", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, INJUSDT"
    )
with col2:
    remove_force = st.checkbox("–û—á–∏—Å—Ç–∏—Ç—å force include", value=False)

if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å force include"):
    symbols = [x.strip().upper() for x in (force_text or "").split(',') if x.strip()]
    if remove_force:
        symbols = []
    elif new_force.strip():
        candidate = new_force.strip().upper()
        filtered = filter_available_spot_pairs([candidate])
        if not filtered:
            st.warning("–ú–æ–Ω–µ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ–π USDT-–ø–∞—Ä–æ–π –Ω–∞ —Å–ø–æ—Ç–µ.")
        elif filtered[0] not in symbols:
            symbols.append(filtered[0])
    force_usdt = filter_available_spot_pairs(symbols)
    update_settings(ai_force_include=','.join(force_usdt))
    st.success(
        "Force include –æ–±–Ω–æ–≤–ª—ë–Ω: " + (', '.join(force_usdt) if force_usdt else "–ø—É—Å—Ç–æ")
    )
