from __future__ import annotations

import json
from pathlib import Path

import pandas as pd
import streamlit as st

from utils.guardian_bot import GuardianBot
from utils.paths import DATA_DIR

st.set_page_config(page_title="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–¥–µ–ª–æ–∫", page_icon="üìà", layout="wide")

st.title("üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–¥–µ–ª–æ–∫")
st.caption("–°–ª–µ–¥–∏–º, –∫–∞–∫–∏–µ —Å–¥–µ–ª–∫–∏ –æ—Ç–∫—Ä—ã–ª —Å–ø–æ—Ç–æ–≤—ã–π –±–æ—Ç, –∫–∞–∫–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –Ω–µ—Ç –ª–∏ –∑–∞–¥–µ—Ä–∂–µ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö.")

bot = GuardianBot()
brief = bot.generate_brief()
portfolio = bot.portfolio_overview()
trade_stats = bot.trade_statistics()
health = bot.data_health()

with st.container(border=True):
    st.subheader("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
    for key in ("ai_signal", "executions", "api_keys"):
        info = health.get(key, {})
        if not info:
            continue
        icon = "‚úÖ" if info.get("ok") else "‚ö†Ô∏è"
        title = info.get("title", key)
        message = info.get("message", "")
        st.markdown(f"{icon} **{title}** ‚Äî {message}")
        details = info.get("details")
        if details:
            st.caption(details)

st.divider()

with st.container(border=True):
    st.subheader("–ò—Ç–æ–≥–∏ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é")
    totals = portfolio.get("human_totals", {})
    col1, col2, col3 = st.columns(3)
    col1.metric("–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL", totals.get("realized", "0.00 USDT"))
    col2.metric("–û–±—ä—ë–º –≤ —Ä–∞–±–æ—Ç–µ", totals.get("open_notional", "0.00 USDT"))
    col3.metric("–û—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫", totals.get("open_positions", "0"))

    col4, col5, col6 = st.columns(3)
    col4.metric("–°–æ–≤–µ—Ä—à–µ–Ω–æ —Å–¥–µ–ª–æ–∫", int(trade_stats.get("trades", 0)))
    col5.metric("–û–±–æ—Ä–æ—Ç", trade_stats.get("gross_volume_human", "0.00 USDT"))
    col6.metric("–ö–æ–º–∏—Å—Å–∏–∏", trade_stats.get("fees_paid_human", "0.0000 USDT"))

    positions = portfolio.get("positions", [])
    if positions:
        df = pd.DataFrame(positions)
        df = df.rename(
            columns={
                "symbol": "–°–∏–º–≤–æ–ª",
                "qty": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                "avg_cost": "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞",
                "notional": "–û–±—ä—ë–º –≤ —Ä–∞–±–æ—Ç–µ",
                "realized_pnl": "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL",
            }
        )
        st.dataframe(df, use_container_width=True, hide_index=True)
    else:
        st.info("–ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã ‚Äî –±–æ—Ç –∂–¥—ë—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞.")

    if trade_stats.get("per_symbol"):
        st.markdown("#### –ì–¥–µ –±–æ—Ç —Ç–æ—Ä–≥—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–µ–µ –≤—Å–µ–≥–æ")
        df_activity = pd.DataFrame(trade_stats.get("per_symbol", []))
        df_activity = df_activity.rename(
            columns={
                "symbol": "–°–∏–º–≤–æ–ª",
                "trades": "–°–¥–µ–ª–æ–∫",
                "volume_human": "–û–±–æ—Ä–æ—Ç",
                "buy_share": "–î–æ–ª—è –ø–æ–∫—É–ø–æ–∫",
            }
        )
        df_activity["–î–æ–ª—è –ø–æ–∫—É–ø–æ–∫"] = (df_activity["–î–æ–ª—è –ø–æ–∫—É–ø–æ–∫"] * 100).round(1).astype(str) + "%"
        st.dataframe(df_activity, use_container_width=True, hide_index=True)
    else:
        st.caption("–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è —Å–¥–µ–ª–∫–∏, –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –ø–∞—Ä–∞–º.")

st.divider()

st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")
ledger_path = Path(DATA_DIR) / "pnl" / "executions.jsonl"
if not ledger_path.exists():
    st.warning("–ñ—É—Ä–Ω–∞–ª –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç.")
else:
    rows = []
    for line in ledger_path.read_text(encoding="utf-8").splitlines()[-200:]:
        if not line.strip():
            continue
        try:
            payload = json.loads(line)
        except json.JSONDecodeError:
            continue
        rows.append(
            {
                "ts": payload.get("execTime"),
                "symbol": payload.get("symbol"),
                "side": payload.get("side"),
                "price": float(payload.get("execPrice") or 0.0),
                "qty": float(payload.get("execQty") or 0.0),
                "fee": float(payload.get("execFee") or 0.0),
                "is_maker": payload.get("isMaker"),
            }
        )

    if rows:
        df = pd.DataFrame(rows)
        df = df.sort_values("ts", ascending=False)
        df = df.rename(
            columns={
                "ts": "–í—Ä–µ–º—è",
                "symbol": "–°–∏–º–≤–æ–ª",
                "side": "–°—Ç–æ—Ä–æ–Ω–∞",
                "price": "–¶–µ–Ω–∞",
                "qty": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                "fee": "–ö–æ–º–∏—Å—Å–∏—è",
                "is_maker": "–ú–µ–π–∫–µ—Ä?",
            }
        )
        st.dataframe(df, use_container_width=True, hide_index=True)
    else:
        st.info("–ï—â—ë –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –∑–∞–ø–∏—Å–∞–ª –≤ –∂—É—Ä–Ω–∞–ª.")

st.divider()

st.subheader("–ù–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö")
st.caption("–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –±–æ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ¬´–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å–ø–æ—Ç-–±–æ—Ç¬ª. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é.")
age = brief.status_age
if age is None:
    st.success("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω —Ç–æ–ª—å–∫–æ —á—Ç–æ.")
elif age < 300:
    st.success(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {int(age // 60)} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥.")
else:
    st.warning("–î–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞ –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∂—É—Ä–Ω–∞–ª –ª–æ–≥–æ–≤.")
