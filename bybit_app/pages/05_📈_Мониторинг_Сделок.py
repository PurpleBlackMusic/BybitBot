from __future__ import annotations

import json
import math
import pandas as pd
import streamlit as st

from utils.ui import safe_set_page_config

from utils.dataframe import arrow_safe
from utils.guardian_bot import GuardianBot
from utils.pnl import _ledger_path_for

safe_set_page_config(page_title="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–¥–µ–ª–æ–∫", page_icon="üìà", layout="wide")

st.title("üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–¥–µ–ª–æ–∫")
st.caption("–°–ª–µ–¥–∏–º, –∫–∞–∫–∏–µ —Å–¥–µ–ª–∫–∏ –æ—Ç–∫—Ä—ã–ª —Å–ø–æ—Ç–æ–≤—ã–π –±–æ—Ç, –∫–∞–∫–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –Ω–µ—Ç –ª–∏ –∑–∞–¥–µ—Ä–∂–µ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö.")

bot = GuardianBot()
brief = bot.generate_brief()
portfolio = bot.portfolio_overview()
trade_stats = bot.trade_statistics()
health = bot.data_health()


def _normalise_exec_time(raw: object) -> int | None:
    """Return unix timestamp in milliseconds for heterogeneous ``execTime`` values."""

    if raw is None:
        return None

    if isinstance(raw, str):
        text = raw.strip()
        if not text:
            return None
        try:
            parsed = pd.to_datetime(text, utc=True, errors="coerce")
        except (ValueError, TypeError):
            parsed = pd.NaT
        if pd.notna(parsed):
            return int(parsed.to_pydatetime().timestamp() * 1000)
        try:
            raw = float(text)
        except (TypeError, ValueError):
            return None

    if isinstance(raw, (int, float)):
        if isinstance(raw, float) and (math.isnan(raw) or not math.isfinite(raw)):
            return None
        value = float(raw)
        magnitude = abs(value)
        if magnitude >= 1e18:
            seconds = value / 1e9
        elif magnitude >= 1e15:
            seconds = value / 1e6
        elif magnitude >= 1e12:
            seconds = value / 1e3
        elif magnitude >= 1e9:
            seconds = value
        else:
            return None
        return int(seconds * 1000)

    return None

with st.container(border=True):
    st.subheader("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö")
    for key in ("ai_signal", "executions", "api_keys", "realtime_trading"):
        info = health.get(key, {})
        if not info:
            continue
        icon = "‚úÖ" if info.get("ok") else "‚ö†Ô∏è"
        title = info.get("title", key)
        message = info.get("message", "")
        st.markdown(f"{icon} **{title}** ‚Äî {message}")
        details = info.get("details")
        if details:
            st.caption(details)

        if key == "realtime_trading":
            stats: list[str] = []
            latency = info.get("latency_ms")
            if latency is not None:
                stats.append(f"–ó–∞–¥–µ—Ä–∂–∫–∞ REST: {float(latency):.0f} –º—Å")
            total = info.get("balance_total")
            available = info.get("balance_available")
            withdrawable = info.get("balance_withdrawable")
            if total is not None and available is not None:
                parts = [
                    f"{float(total):.2f} –≤—Å–µ–≥–æ",
                    f"{float(available):.2f} –¥–æ—Å—Ç—É–ø–Ω–æ",
                ]
                if withdrawable is not None:
                    try:
                        withdraw_val = float(withdrawable)
                    except (TypeError, ValueError):
                        withdraw_val = None
                    if withdraw_val is not None:
                        parts.append(f"{withdraw_val:.2f} –≤—ã–≤–µ—Å—Ç–∏")
                stats.append("–ë–∞–ª–∞–Ω—Å: " + ", ".join(parts) + " USDT")
            assets = info.get("wallet_assets") or []
            if assets:
                asset_bits = []
                for asset in assets:
                    coin = asset.get("coin")
                    total_val = asset.get("total")
                    available_val = asset.get("available")
                    if not isinstance(coin, str):
                        continue
                    try:
                        total_float = float(total_val)
                    except (TypeError, ValueError):
                        continue
                    available_text = ""
                    try:
                        available_float = float(available_val)
                    except (TypeError, ValueError):
                        available_float = None
                    if available_float is not None:
                        available_text = f" (–¥–æ—Å—Ç—É–ø–Ω–æ {available_float:.4f})"
                    asset_bits.append(f"{coin} {total_float:.4f}{available_text}")
                if asset_bits:
                    stats.append("–ê–∫—Ç–∏–≤—ã: " + ", ".join(asset_bits))
            orders = info.get("order_count")
            if orders is not None:
                stats.append(f"–û—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {int(orders)}")
            age = info.get("order_age_sec")
            if age is not None:
                human_age = info.get("order_age_human")
                if human_age:
                    stats.append(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤: {human_age} –Ω–∞–∑–∞–¥")
                else:
                    stats.append(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤: {float(age):.0f} —Å")
            executions = info.get("execution_count")
            if executions is not None:
                stats.append(f"–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–π: {int(executions)}")
            exec_age = info.get("execution_age_sec")
            last_exec_brief = info.get("last_execution_brief")
            last_exec_at = info.get("last_execution_at")
            last_exec = info.get("last_execution") or {}
            if exec_age is not None:
                exec_human = info.get("execution_age_human")
                if exec_human:
                    if last_exec_brief:
                        stats.append(
                            f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {exec_human} –Ω–∞–∑–∞–¥ ({last_exec_brief})"
                        )
                    else:
                        stats.append(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {exec_human} –Ω–∞–∑–∞–¥")
                else:
                    stats.append(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {float(exec_age):.0f} —Å –Ω–∞–∑–∞–¥")
            elif last_exec_brief:
                stats.append(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {last_exec_brief}")

            if last_exec_at:
                stats.append(f"–í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏: {last_exec_at}")

            fee_val = last_exec.get("fee")
            if fee_val not in (None, ""):
                try:
                    fee_float = float(fee_val)
                except (TypeError, ValueError):
                    fee_float = None
                if fee_float is not None:
                    maker_flag = last_exec.get("is_maker")
                    maker_note = (
                        " (–º–µ–π–∫–µ—Ä)" if maker_flag is True else " (—Ç–µ–π–∫–µ—Ä)" if maker_flag is False else ""
                    )
                    stats.append(
                        f"–ö–æ–º–∏—Å—Å–∏—è —Å–¥–µ–ª–∫–∏: {fee_float:.6f}{maker_note}"
                    )
            ws_private = info.get("ws_private_age_human") or info.get("ws_private_age_sec")
            if ws_private is not None:
                if isinstance(ws_private, str):
                    stats.append(f"–ü—Ä–∏–≤–∞—Ç–Ω—ã–π WS: {ws_private} –Ω–∞–∑–∞–¥")
                else:
                    stats.append(f"–ü—Ä–∏–≤–∞—Ç–Ω—ã–π WS: {float(ws_private):.0f} —Å –Ω–∞–∑–∞–¥")
            ws_public = info.get("ws_public_age_human") or info.get("ws_public_age_sec")
            if ws_public is not None:
                if isinstance(ws_public, str):
                    stats.append(f"–ü—É–±–ª–∏—á–Ω—ã–π WS: {ws_public} –Ω–∞–∑–∞–¥")
                else:
                    stats.append(f"–ü—É–±–ª–∏—á–Ω—ã–π WS: {float(ws_public):.0f} —Å –Ω–∞–∑–∞–¥")
            stats = [s for s in stats if s]
            if stats:
                st.caption(" ¬∑ ".join(stats))

st.divider()

with st.container(border=True):
    st.subheader("–ò—Ç–æ–≥–∏ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é")
    totals = portfolio.get("human_totals", {})
    col1, col2, col3 = st.columns(3)
    col1.metric("–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL", totals.get("realized", "0.00 USDT"))
    col2.metric("–û–±—ä—ë–º –≤ —Ä–∞–±–æ—Ç–µ", totals.get("open_notional", "0.00 USDT"))
    col3.metric("–û—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫", totals.get("open_positions", "0"))

    col4, col5, col6 = st.columns(3)
    col4.metric("–°–æ–≤–µ—Ä—à–µ–Ω–æ —Å–¥–µ–ª–æ–∫", int(trade_stats.get("trades", 0)))
    col5.metric("–û–±–æ—Ä–æ—Ç", trade_stats.get("gross_volume_human", "0.00 USDT"))
    col6.metric("–ö–æ–º–∏—Å—Å–∏–∏", trade_stats.get("fees_paid_human", "0.0000 USDT"))

    positions = portfolio.get("positions", [])
    if positions:
        df = pd.DataFrame(positions)
        df = df.rename(
            columns={
                "symbol": "–°–∏–º–≤–æ–ª",
                "qty": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                "avg_cost": "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞",
                "notional": "–û–±—ä—ë–º –≤ —Ä–∞–±–æ—Ç–µ",
                "realized_pnl": "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL",
            }
        )
        st.dataframe(arrow_safe(df), use_container_width=True, hide_index=True)
    else:
        st.info("–ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã ‚Äî –±–æ—Ç –∂–¥—ë—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞.")

    if trade_stats.get("per_symbol"):
        st.markdown("#### –ì–¥–µ –±–æ—Ç —Ç–æ—Ä–≥—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–µ–µ –≤—Å–µ–≥–æ")
        df_activity = pd.DataFrame(trade_stats.get("per_symbol", []))
        df_activity = df_activity.rename(
            columns={
                "symbol": "–°–∏–º–≤–æ–ª",
                "trades": "–°–¥–µ–ª–æ–∫",
                "volume_human": "–û–±–æ—Ä–æ—Ç",
                "buy_share": "–î–æ–ª—è –ø–æ–∫—É–ø–æ–∫",
            }
        )
        df_activity["–î–æ–ª—è –ø–æ–∫—É–ø–æ–∫"] = (df_activity["–î–æ–ª—è –ø–æ–∫—É–ø–æ–∫"] * 100).round(1).astype(str) + "%"
        st.dataframe(arrow_safe(df_activity), use_container_width=True, hide_index=True)
    else:
        st.caption("–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è —Å–¥–µ–ª–∫–∏, –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –ø–∞—Ä–∞–º.")

st.divider()

st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")
ledger_path = _ledger_path_for()
if not ledger_path.exists():
    st.warning("–ñ—É—Ä–Ω–∞–ª –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç.")
else:
    rows = []
    for line in ledger_path.read_text(encoding="utf-8").splitlines()[-200:]:
        if not line.strip():
            continue
        try:
            payload = json.loads(line)
        except json.JSONDecodeError:
            continue
        rows.append(
            {
                "ts": _normalise_exec_time(payload.get("execTime")),
                "symbol": payload.get("symbol"),
                "side": payload.get("side"),
                "price": float(payload.get("execPrice") or 0.0),
                "qty": float(payload.get("execQty") or 0.0),
                "fee": float(payload.get("execFee") or 0.0),
                "is_maker": payload.get("isMaker"),
            }
        )

    if rows:
        df = pd.DataFrame(rows)
        df["ts"] = pd.to_datetime(df["ts"], unit="ms", errors="coerce")
        df = df.sort_values("ts", ascending=False)
        df = df.rename(
            columns={
                "symbol": "–°–∏–º–≤–æ–ª",
                "side": "–°—Ç–æ—Ä–æ–Ω–∞",
                "price": "–¶–µ–Ω–∞",
                "qty": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                "fee": "–ö–æ–º–∏—Å—Å–∏—è",
                "is_maker": "–ú–µ–π–∫–µ—Ä?",
            }
        )
        df["–í—Ä–µ–º—è"] = df["ts"].dt.strftime("%Y-%m-%d %H:%M:%S").fillna("‚Äî")
        df = df.drop(columns=["ts"])
        st.dataframe(arrow_safe(df), use_container_width=True, hide_index=True)
    else:
        st.info("–ï—â—ë –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –∑–∞–ø–∏—Å–∞–ª –≤ –∂—É—Ä–Ω–∞–ª.")

st.divider()

st.subheader("–ù–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö")
st.caption("–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –±–æ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ¬´–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å–ø–æ—Ç-–±–æ—Ç¬ª. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é.")
age = brief.status_age
if age is None:
    st.success("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω —Ç–æ–ª—å–∫–æ —á—Ç–æ.")
elif age < 300:
    st.success(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {int(age // 60)} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥.")
else:
    st.warning("–î–∞–Ω–Ω—ã—Ö –æ—Ç –±–æ—Ç–∞ –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∂—É—Ä–Ω–∞–ª –ª–æ–≥–æ–≤.")
