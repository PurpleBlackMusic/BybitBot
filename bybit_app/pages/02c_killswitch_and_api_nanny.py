
from __future__ import annotations
import streamlit as st, time, json

from utils.envs import get_api_client, get_settings
from ..ui.actions import run_api_action

st.title("üõë KillSwitch and API Nanny")

# Build API client from settings
s = get_settings()
api = get_api_client()

st.subheader("–ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–º–µ–Ω—ã (Spot)")

with st.expander("‚ö° Cancel tools", expanded=True):
    colA, colB = st.columns(2)
    with colA:
        sym_cancel = st.text_input("–°–∏–º–≤–æ–ª (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è Cancel All)", value="")
        if st.button("‚ùå Cancel All (spot)"):
            run_api_action(
                lambda: api.cancel_all(category="spot", symbol=(sym_cancel or None)),
                success=st.json,
                error_message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä–∞.",
                description="cancel_all_spot",
            )

    with colB:
        st.caption("Batch Cancel –ø–æ orderId/orderLinkId (JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤).")
        payload = st.text_area("Requests JSON", value='[{"symbol":"BTCUSDT","orderLinkId":"AI-BTCUSDT-123"}]')
        if st.button("üß∫ Batch Cancel"):
            def _load_requests():
                data = json.loads(payload)
                if not isinstance(data, list):
                    raise ValueError("–û–∂–∏–¥–∞–ª—Å—è JSON-–º–∞—Å—Å–∏–≤ –∑–∞—è–≤–æ–∫")
                return data

            requests_payload = run_api_action(
                _load_requests,
                error_message="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON —Å –∑–∞—è–≤–∫–∞–º–∏.",
                description="parse_batch_cancel_payload",
            )
            if requests_payload is not None:
                run_api_action(
                    lambda: api.batch_cancel(category="spot", requests=requests_payload),
                    success=st.json,
                    error_message="–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–∞–∫–µ—Ç–Ω—É—é –æ—Ç–º–µ–Ω—É.",
                    description="batch_cancel_spot",
                )
