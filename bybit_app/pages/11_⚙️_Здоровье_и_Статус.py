from __future__ import annotations

import datetime as dt
import time
from typing import Any, Mapping

import streamlit as st

from utils.background import (
    ensure_background_services,
    get_automation_status,
    get_ws_snapshot,
    restart_automation,
    restart_websockets,
)
from utils.envs import get_settings
from utils.ui import auto_refresh


st.set_page_config(page_title="–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å—Ç–∞—Ç—É—Å", layout="wide")
auto_refresh(15, key="health-status-refresh")
ensure_background_services()

settings = get_settings()
st.title("‚öôÔ∏è –ó–¥–æ—Ä–æ–≤—å–µ –∏ —Å—Ç–∞—Ç—É—Å")


def _to_float(value: object | None) -> float | None:
    try:
        return float(value)
    except (TypeError, ValueError):
        return None


def _format_duration(seconds: float | None) -> str:
    if seconds is None:
        return "‚Äî"
    seconds = max(0.0, seconds)
    if seconds < 1:
        return "–º–µ–Ω–µ–µ —Å–µ–∫—É–Ω–¥—ã"
    minutes, secs = divmod(int(seconds), 60)
    hours, minutes = divmod(minutes, 60)
    days, hours = divmod(hours, 24)
    parts: list[str] = []
    if days:
        parts.append(f"{days} –¥")
    if hours:
        parts.append(f"{hours} —á")
    if minutes:
        parts.append(f"{minutes} –º–∏–Ω")
    if not parts:
        parts.append(f"{secs} —Å")
    return " ".join(parts)


def _format_timestamp(value: object | None) -> str:
    numeric = _to_float(value)
    if numeric is None:
        return "‚Äî"
    if numeric > 1_000_000_000_000:
        numeric /= 1000.0
    try:
        ts = dt.datetime.fromtimestamp(numeric, tz=dt.timezone.utc)
    except (OSError, OverflowError, ValueError):
        return "‚Äî"
    return ts.strftime("%d.%m.%Y %H:%M:%S UTC")


def _channel_state_label(running: bool, connected: bool | None) -> str:
    if not running:
        return "‚è∏ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    if connected is False:
        return "üü° –ù–µ—Ç —Å–æ–∫–µ—Ç–∞"
    return "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"


def _render_ws_channel(
    title: str,
    info: Mapping[str, Any] | None,
    *,
    stale: bool,
    threshold: float | None,
) -> None:
    container = st.container(border=True)
    with container:
        st.markdown(f"#### {title}")
        if not isinstance(info, Mapping):
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ WebSocket.")
            return

        running = bool(info.get("running"))
        connected_field = info.get("connected")
        connected = None if connected_field is None else bool(connected_field)
        state_label = _channel_state_label(running, connected)

        age = _to_float(info.get("age_seconds"))
        last_beat = info.get("last_beat")
        last_beat_human = _format_timestamp(last_beat)
        age_text = _format_duration(age)

        meta = []
        if connected is not None:
            meta.append("–ø–æ–¥–∫–ª—é—á—ë–Ω" if connected else "–æ—Ç–∫–ª—é—á—ë–Ω")
        subs = info.get("subscriptions")
        if isinstance(subs, list) and subs:
            meta.append(f"–ø–æ–¥–ø–∏—Å–∫–∏: {len(subs)}")
        st.markdown(
            "\n".join(
                [
                    f"**–°—Ç–∞—Ç—É—Å:** {state_label}",
                    f"**–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª:** {last_beat_human}",
                    f"**–í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** {age_text}",
                ]
            )
        )
        if meta:
            st.caption(", ".join(meta))

        if stale:
            threshold_text = _format_duration(threshold)
            st.error(
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {age_text} –Ω–∞–∑–∞–¥ ‚Äî –ø—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ {threshold_text}.",
            )
        else:
            st.success(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç—É–ø–∞—é—Ç –≤–æ–≤—Ä–µ–º—è ({age_text}).")


ws_snapshot = get_ws_snapshot()
automation_snapshot = get_automation_status()

ws_status = ws_snapshot.get("status") if isinstance(ws_snapshot, Mapping) else {}
public_info = ws_status.get("public") if isinstance(ws_status, Mapping) else {}
private_info = ws_status.get("private") if isinstance(ws_status, Mapping) else {}

public_threshold = _to_float(ws_snapshot.get("public_stale_after"))
private_threshold = _to_float(ws_snapshot.get("private_stale_after"))

col1, col2 = st.columns(2)
with col1:
    st.subheader("WebSocket")
    _render_ws_channel(
        "–ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª",
        public_info,
        stale=bool(ws_snapshot.get("public_stale")),
        threshold=public_threshold,
    )
    _render_ws_channel(
        "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª",
        private_info,
        stale=bool(ws_snapshot.get("private_stale")),
        threshold=private_threshold,
    )

with col2:
    st.subheader("–ê–≤—Ç–æ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ")
    container = st.container(border=True)
    with container:
        thread_alive = bool(automation_snapshot.get("thread_alive"))
        stale = bool(automation_snapshot.get("stale"))
        last_run_at = automation_snapshot.get("last_run_at") or automation_snapshot.get("last_cycle_at")
        last_run_ts = _to_float(last_run_at)
        last_run_human = _format_timestamp(last_run_ts)
        last_age = _format_duration(
            max(0.0, time.time() - last_run_ts) if last_run_ts else None
        )

        status_label = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if thread_alive else "‚è∏ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        st.markdown(
            "\n".join(
                [
                    f"**–°—Ç–∞—Ç—É—Å –ø–µ—Ç–ª–∏:** {status_label}",
                    f"**–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª:** {last_run_human}",
                    f"**–í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** {last_age}",
                ]
            )
        )
        if stale:
            limit = _format_duration(_to_float(automation_snapshot.get("stale_after")))
            st.error(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª —É—Å—Ç–∞—Ä–µ–ª ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ {last_age} –Ω–∞–∑–∞–¥ (–ø–æ—Ä–æ–≥ {limit}).")
        else:
            st.success("–¶–∏–∫–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –≤–æ–≤—Ä–µ–º—è.")

        last_result = automation_snapshot.get("last_result")
        if isinstance(last_result, Mapping) and last_result:
            st.caption("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:")
            st.json(last_result)

    st.subheader("–î–µ–π—Å—Ç–≤–∏—è")
    action_col1, action_col2 = st.columns(2)
    with action_col1:
        if st.button("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å WebSocket", use_container_width=True):
            restarted = restart_websockets()
            st.success("WebSocket –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω." if restarted else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å.")
    with action_col2:
        if st.button("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∫—É", use_container_width=True):
            restarted = restart_automation()
            st.success("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞." if restarted else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å.")

st.divider()

with st.expander("–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ"):
    st.markdown("### –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    st.json({"testnet": settings.testnet, "dry_run": getattr(settings, "dry_run", True)})
    st.markdown("### WebSocket snapshot")
    st.json(ws_snapshot)
    st.markdown("### Automation snapshot")
    st.json(automation_snapshot)
