
from __future__ import annotations
import streamlit as st
from utils.envs import get_settings, update_settings
from utils.time_sync import check_time_drift_seconds

st.title("ü©∫ Health ‚Äî Time Sync & API Window")

settings = get_settings()
drift = check_time_drift_seconds()
st.metric("Drift (sec, local - server)", f"{drift:.3f}")

current_window = int(getattr(settings, "recv_window_ms", 15000) or 15000)

with st.form("recv_window_form"):
    new_window = st.number_input(
        "recvWindow (ms)",
        min_value=1000,
        max_value=120000,
        step=1000,
        value=current_window,
        help="–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∞ –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Å–µ—Ä–≤–µ—Ä–æ–º Bybit.",
    )
    submitted = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–∫–Ω–æ")
    if submitted:
        update_settings(recv_window_ms=int(new_window))
        st.success("recvWindow –æ–±–Ω–æ–≤–ª—ë–Ω")
        settings = get_settings(force_reload=True)  # type: ignore[call-arg]
        current_window = int(getattr(settings, "recv_window_ms", new_window) or new_window)

st.caption(f"–¢–µ–∫—É—â–µ–µ –æ–∫–Ω–æ: {current_window} –º—Å")

if abs(drift * 1000) > current_window / 2:
    st.warning(
        "–î—Ä–∏—Ñ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤–µ–ª–∏–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ recvWindow ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —á–∞—Å—ã/NTP.",
    )
