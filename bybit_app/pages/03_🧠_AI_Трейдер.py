
from __future__ import annotations
import streamlit as st
from utils.envs import get_api_client, get_settings, update_settings
from utils.ai.engine import AIPipeline
from utils.ai.live import AIRunner
from utils.paths import DATA_DIR
from utils.log import log
import json
from pathlib import Path

st.title("üß† AI-–¢—Ä–µ–π–¥–µ—Ä (BETA)")

s = get_settings()
st.info("–í–∞–∂–Ω–æ: –Ω–∏–∫–∞–∫–æ–π –ò–ò –Ω–µ –º–æ–∂–µ—Ç –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å. –ú—ã –≤–∫–ª—é—á–∏–ª–∏ —Å—Ç—Ä–æ–≥–∏–µ **risk-guards**: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ —É–±—ã—Ç–∫–∞, —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É, max –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫.")


with st.form("ai_cfg"):
    enabled = st.toggle("–í–∫–ª—é—á–∏—Ç—å AI", value=s.ai_enabled)
    category = st.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è", ["spot","linear"], index=(0 if s.ai_category=='spot' else 1))
    symbols = st.text_input("–°–∏–º–≤–æ–ª—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", value=s.ai_symbols or "BTCUSDT,ETHUSDT")
    interval = st.selectbox("–¢–∞–π–º—Ñ—Ä–µ–π–º", ["1","3","5","15","30","60","240","D"], index=(["1","3","5","15","30","60","240","D"].index(str(s.ai_interval)) if str(s.ai_interval) in ["1","3","5","15","30","60","240","D"] else 5))
    horizon = st.number_input("–ì–æ—Ä–∏–∑–æ–Ω—Ç –º–µ—Ç–∫–∏ (–±–∞—Ä–æ–≤)", min_value=3, max_value=96, value=int(s.ai_horizon_bars or 12))
    buy_th = st.slider("–ü–æ—Ä–æ–≥ –¥–ª—è Long (prob)", 0.50, 0.80, float(s.ai_buy_threshold or 0.55))
    sell_th = st.slider("–ü–æ—Ä–æ–≥ –¥–ª—è Short (prob, –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤)", 0.20, 0.50, float(s.ai_sell_threshold or 0.45))
    risk_pct = st.number_input("–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É, % –æ—Ç USDT", min_value=0.01, max_value=5.0, value=float(s.ai_risk_per_trade_pct or 0.25))
    fee_bps = st.number_input("–ö–æ–º–∏—Å—Å–∏—è (bps)", min_value=0.0, max_value=50.0, value=float(s.ai_fee_bps or 7.0))
    slip_bps = st.number_input("–°–ª–∏–ø–ø–µ–¥–∂ (bps)", min_value=0.0, max_value=100.0, value=float(s.ai_slippage_bps or 10.0))
    retrain_m = st.number_input("–†–µ–æ–±—É—á–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ (–º–∏–Ω)", min_value=5, max_value=720, value=int(s.ai_retrain_minutes or 60))
    min_ev_bps = st.number_input("–§–∏–ª—å—Ç—Ä: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π EV (bps)", min_value=-50.0, max_value=100.0, value=float(s.ai_min_ev_bps or 1.0))
    st.subheader("Spot ‚Äî cash only")
    spot_cash_only = st.toggle("–ó–∞–ø—Ä–µ—Ç –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞)", value=bool(s.spot_cash_only))
    spot_reserve = st.number_input("–†–µ–∑–µ—Ä–≤ –∫—ç—à–∞, %", min_value=0.0, max_value=90.0, value=float(s.spot_cash_reserve_pct or 10.0))
    spot_cap_trade = st.number_input("–õ–∏–º–∏—Ç –Ω–∞ —Å–¥–µ–ª–∫—É, % –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞", min_value=0.0, max_value=50.0, value=float(s.spot_max_cap_per_trade_pct or 5.0))
    spot_cap_symbol = st.number_input("–õ–∏–º–∏—Ç –Ω–∞ —Å–∏–º–≤–æ–ª, % –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞", min_value=0.0, max_value=100.0, value=float(s.spot_max_cap_per_symbol_pct or 20.0))
    st.subheader("TIF (Limit)")
    spot_tif = st.selectbox("–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –ª–∏–º–∏—Ç–æ–∫", ["PostOnly","GTC","IOC","FOK"], index=(["PostOnly","GTC","IOC","FOK"].index(getattr(s, 'spot_limit_tif', 'PostOnly')) if getattr(s, 'spot_limit_tif', 'PostOnly') in ["PostOnly","GTC","IOC","FOK"] else 0))
    st.subheader("Server TPSL (Spot UTA)")
    spot_server_tpsl = st.toggle("–í–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—ã–π TP/SL –¥–ª—è –ª–∏–º–∏—Ç–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ (UTA)", value=bool(s.spot_server_tpsl))
    spot_tpsl_tp_type = st.selectbox("TP Order Type", ["Market","Limit"], index=(0 if (s.spot_tpsl_tp_order_type or "Market")=="Market" else 1))
    spot_tpsl_sl_type = st.selectbox("SL Order Type", ["Market","Limit"], index=(0 if (s.spot_tpsl_sl_order_type or "Market")=="Market" else 1))
    st.subheader("TWAP")
    twap_enabled = st.toggle("–í–∫–ª—é—á–∏—Ç—å TWAP –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤", value=bool(s.twap_enabled))
    twap_slices = st.number_input("–°—Ä–µ–∑–æ–≤", 2, 50, int(s.twap_slices or 5))
    twap_child_secs = st.number_input("–ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ä–µ–∑–∞–º–∏ (—Å–µ–∫)", 1, 120, int(s.twap_child_secs or 10))
    twap_agg_bps = st.number_input("–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å (bps)", 0.0, 50.0, float(s.twap_aggressiveness_bps or 2.0))
    daily_loss = st.number_input("–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–∞, % –æ—Ç USDT (–ø–æ—Ä–æ–≥ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è AI)", min_value=0.0, max_value=10.0, value=float(s.ai_daily_loss_limit_pct or 1.0))
    max_conc = st.number_input("–ú–∞–∫—Å. –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö", min_value=1, max_value=5, value=int(s.ai_max_concurrent or 1))
    saved = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
    if saved:
        update_settings(
            ai_enabled=bool(enabled),
            ai_category=category,
            ai_symbols=symbols,
            ai_interval=interval,
            ai_horizon_bars=int(horizon),
            ai_buy_threshold=float(buy_th),
            ai_sell_threshold=float(sell_th),
            ai_risk_per_trade_pct=float(risk_pct),
            ai_fee_bps=float(fee_bps),
            ai_slippage_bps=float(slip_bps),
            ai_retrain_minutes=int(retrain_m),
            ai_min_ev_bps=float(min_ev_bps),
            spot_cash_only=bool(spot_cash_only),
            spot_cash_reserve_pct=float(spot_reserve),
            spot_max_cap_per_trade_pct=float(spot_cap_trade),
            spot_max_cap_per_symbol_pct=float(spot_cap_symbol),
            spot_limit_tif=str(spot_tif),
            spot_server_tpsl=bool(spot_server_tpsl),
            spot_tpsl_tp_order_type=str(spot_tpsl_tp_type),
            spot_tpsl_sl_order_type=str(spot_tpsl_sl_type),
            twap_enabled=bool(twap_enabled),
            twap_slices=int(twap_slices),
            twap_child_secs=int(twap_child_secs),
            twap_aggressiveness_bps=float(twap_agg_bps),
            ai_daily_loss_limit_pct=float(daily_loss),
            ai_max_concurrent=int(max_conc),
        )
        st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
st.divider()
st.subheader("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
sym = st.text_input("–°–∏–º–≤–æ–ª –¥–ª—è –æ–±—É—á–µ–Ω–∏—è", value=(s.ai_symbols.split(",")[0].strip() if s.ai_symbols else "BTCUSDT"))
if st.button("üß™ –û–±—É—á–∏—Ç—å —Å–µ–π—á–∞—Å"):
    api = get_api_client()
    pipe = AIPipeline(DATA_DIR / "ai")
    try:
        meta = pipe.train(api, s.ai_category, sym.strip().upper(), s.ai_interval, int(s.ai_horizon_bars or 12), (DATA_DIR / "ai" / f"model_{s.ai_category}_{sym.strip().upper()}_{s.ai_interval}.json"))
        st.success(f"–ì–æ—Ç–æ–≤–æ. Accuracy={meta['accuracy']:.3f}")
        st.json(meta)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")

st.divider()
st.subheader("–ó–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
if "ai_runner" not in st.session_state:
    st.session_state["ai_runner"] = AIRunner(DATA_DIR / "ai")

c1, c2 = st.columns(2)
if c1.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å AI"):
    st.session_state["ai_runner"].start()
    st.success("AI –∑–∞–ø—É—â–µ–Ω (—Ñ–æ–Ω–æ–≤–æ–π –ø–æ—Ç–æ–∫).")
if c2.button("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AI"):
    st.session_state["ai_runner"].stop()
    st.info("AI –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

st.caption("–õ–æ–≥–∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ ü™µ –õ–æ–≥–∏ (—Ñ–∏–ª—å—Ç—Ä—ã –ø–æ 'ai.').")

st.divider()
st.subheader("–°—Ç–∞—Ç—É—Å AI (–æ–Ω–ª–∞–π–Ω)")
import json, os
from utils.paths import DATA_DIR
status_p = DATA_DIR / "ai" / "status.json"
if status_p.exists():
    try:
        st.json(json.loads(status_p.read_text(encoding="utf-8")))
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—É—Å: {e}")
else:
    st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞. –ù–∞–∂–º–∏—Ç–µ ‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å AI –∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5‚Äì10 —Å–µ–∫—É–Ω–¥.")
