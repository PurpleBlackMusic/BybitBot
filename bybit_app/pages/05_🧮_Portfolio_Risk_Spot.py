
from __future__ import annotations
import streamlit as st, pandas as pd
from utils.envs import get_settings
from utils.bybit_api import BybitAPI, BybitCreds
from utils.portfolio import corr_matrix, save_corr, load_corr, estimate_portfolio_allocation

st.title("üßÆ Portfolio Risk (Spot) ‚Äî –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∏ –ª–∏–º–∏—Ç—ã")

s = get_settings()
api = BybitAPI(BybitCreds(s.api_key, s.api_secret, s.testnet))

symbols = [x.strip().upper() for x in (s.ai_symbols or "BTCUSDT,ETHUSDT,SOLUSDT").split(',') if x.strip()]
if st.button("üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ (30–¥, 1h)"):
    C = corr_matrix(api, symbols, interval="60", lookback_hours=24*30)
    if not C.empty:
        save_corr(C)
        st.success("–û–±–Ω–æ–≤–ª–µ–Ω–æ.")
        st.dataframe(C, use_container_width=True)
else:
    C = load_corr()
    if not C.empty:
        st.dataframe(C, use_container_width=True)
    else:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å¬ª.")

st.divider()
st.subheader("–û—Ü–µ–Ω–∫–∞ –∞–ª–ª–æ–∫–∞—Ü–∏–π (vol-target + –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã)")
eq = st.number_input("Equity (USDT)", 0.0, 1e9, 1000.0, 10.0)
if st.button("üìê –†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
    out = estimate_portfolio_allocation(api, symbols, prices={}, equity_usdt=float(eq), settings=s)
    st.json({k: v for k, v in out.items() if k in ["alloc","group_caps"]})


st.divider()
st.subheader("ENB ‚Äî Effective Number of Bets")
from utils.portfolio import load_corr, effective_number_of_bets
C = load_corr()
if not C.empty:
    enb = effective_number_of_bets(C)
    st.metric("ENB (–ø–æ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è–º)", f"{enb:.2f}")
    st.caption("ENB‚âà–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã—Ö —Ä–∏—Å–∫–æ–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ. –ë–ª–∏–∂–µ –∫ —á–∏—Å–ª—É —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî –ª—É—á—à–µ –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è.")
else:
    st.info("–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π –µ—â—ë –Ω–µ –ø–æ—Å—á–∏—Ç–∞–Ω–∞.")
