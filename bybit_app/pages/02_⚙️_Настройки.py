
from __future__ import annotations
import streamlit as st
from utils.envs import get_settings, update_settings
from utils.guardian_bot import GuardianBot
from utils.ui import section

st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

s = get_settings()

section("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã GuardianBot")

mode_options = {
    "auto": {
        "label": "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        "description": "–ë–æ—Ç —Å–∞–º –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞ –∏ –∏—Å–ø–æ–ª–Ω—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã.",
    },
    "manual": {
        "label": "üõ† –†—É—á–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å",
        "description": "–í—ã –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–¥–µ–ª–∫–∏ —Å–∞–º–∏, –∞ AI –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è.",
    },
}

current_mode = str(getattr(s, "operation_mode", "manual") or "manual").lower()
if current_mode not in mode_options:
    current_mode = "manual"

mode_keys = list(mode_options.keys())
default_index = mode_keys.index(current_mode)

with st.form("operation_mode_form"):
    selected_mode = st.radio(
        "–ö–∞–∫ –±–æ—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å?",
        options=mode_keys,
        index=default_index,
        format_func=lambda key: mode_options[key]["label"],
    )
    submitted = st.form_submit_button("üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º")

if submitted:
    updates = {"operation_mode": selected_mode}
    if selected_mode == "auto" and not getattr(s, "ai_enabled", False):
        updates["ai_enabled"] = True
    update_settings(**updates)
    st.success("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –æ–±–Ω–æ–≤–ª—ë–Ω.")
    s = get_settings(force_reload=True)
    current_mode = selected_mode
else:
    current_mode = selected_mode

st.caption(mode_options[current_mode]["description"])

bot = GuardianBot(settings=s)
summary = bot.status_summary()

if current_mode == "auto":
    st.success(
        "GuardianBot —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ —É—Å–ª–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ —Ä—É—á–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞."
    )
    blockers = [reason for reason in summary.get("actionable_reasons", []) if reason]
    if blockers:
        st.caption("–ß—Ç–æ–±—ã –∞–≤—Ç–æ-—Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–∞–ª, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∏–∂–µ:")
        for reason in blockers:
            st.markdown(f"- {reason}")
else:
    guidance = summary.get("manual_guidance") or {}
    st.info(
        "–í —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å–¥–µ–ª–∫–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚Äî AI –≥–æ—Ç–æ–≤–∏—Ç –≤–∞–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ —á–µ–∫-–ª–∏—Å—Ç –¥–µ–π—Å—Ç–≤–∏–π."
    )
    headline = guidance.get("headline")
    if headline:
        st.subheader(headline)
    control_status = guidance.get("control_status") or {}
    if control_status:
        awaiting_operator = bool(control_status.get("awaiting_operator"))
        is_active = bool(control_status.get("active"))
        message = control_status.get("message") or ""
        label = control_status.get("label") or "–°—Ç–∞—Ç—É—Å —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        status_block = st.warning if awaiting_operator else st.success if is_active else st.info
        status_lines = [f"**{label}**"]
        if message:
            status_lines.append("")
            status_lines.append(message)
        status_block("\n\n".join(status_lines))

        meta_bits = []
        symbol = control_status.get("symbol")
        if symbol:
            meta_bits.append(f"–°–∏–º–≤–æ–ª: {symbol}")
        last_action_at = control_status.get("last_action_at")
        if last_action_at:
            meta_bits.append(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞: {last_action_at}")
        last_action_age = control_status.get("last_action_age")
        if last_action_age:
            meta_bits.append(f"–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {last_action_age}")
        if meta_bits:
            st.caption(" ¬∑ ".join(meta_bits))

        history_preview = control_status.get("history_preview") or []
        if history_preview:
            with st.expander(
                "–ò—Å—Ç–æ—Ä–∏—è —Ä—É—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥", expanded=False
            ):
                for entry in history_preview:
                    st.markdown(f"- {entry}")
    notes = guidance.get("notes") or []
    if notes:
        st.markdown("**–ß—Ç–æ —Å–æ–≤–µ—Ç—É–µ—Ç AI:**")
        for note in notes:
            st.markdown(f"- {note}")
    thresholds = guidance.get("thresholds") or {}
    if thresholds:
        col_buy, col_sell, col_ev = st.columns(3)
        col_buy.metric("–ü–æ—Ä–æ–≥ –ø–æ–∫—É–ø–∫–∏", f"{thresholds.get('effective_buy_probability_pct', 0):.2f}%")
        col_sell.metric("–ü–æ—Ä–æ–≥ –ø—Ä–æ–¥–∞–∂–∏", f"{thresholds.get('effective_sell_probability_pct', 0):.2f}%")
        col_ev.metric("–ú–∏–Ω. –≤—ã–≥–æ–¥–∞", f"{thresholds.get('min_ev_bps', 0):.2f} –±.–ø.")

    blockers = guidance.get("reasons") or summary.get("actionable_reasons", [])
    blockers = [reason for reason in blockers if reason]
    if blockers:
        st.markdown("**–ü–æ—á–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–π—á–∞—Å –≤—ã–∫–ª—é—á–µ–Ω–æ:**")
        for reason in blockers:
            st.markdown(f"- {reason}")

    plan_steps = guidance.get("plan_steps") or []
    if plan_steps:
        with st.expander("–ß–µ–∫-–ª–∏—Å—Ç –¥–µ–π—Å—Ç–≤–∏–π", expanded=True):
            for idx, step in enumerate(plan_steps, start=1):
                st.markdown(f"{idx}. {step}")

    risk_outline = guidance.get("risk_summary") or ""
    if risk_outline:
        with st.expander("–ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∏—Å–∫–æ–≤", expanded=False):
            st.markdown(risk_outline.replace("\n", "  \n"))

    safety_notes = guidance.get("safety_notes") or []
    if safety_notes:
        with st.expander("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", expanded=False):
            for note in safety_notes:
                st.markdown(f"- {note}")

    thresholds = summary.get("thresholds") or {}
    recommended_buy = thresholds.get("effective_buy_probability_pct", 0.0)
    recommended_sell = thresholds.get("effective_sell_probability_pct", 0.0)
    recommended_ev = thresholds.get("min_ev_bps", 0.0)

    st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥ —Å–µ–±—è")
    st.caption("AI –¥–µ–ª–∏—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞–º–∏ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å–∏–≥–Ω–∞–ª–∞ –∏ –æ–∂–∏–¥–∞–µ–º–æ–π –≤—ã–≥–æ–¥–µ. –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç—ã –≤—Ä—É—á–Ω—É—é –Ω–∏–∂–µ.")

    current_buy = float(getattr(s, "ai_buy_threshold", 0.55) or 0.0) * 100.0
    current_sell = float(getattr(s, "ai_sell_threshold", 0.45) or 0.0) * 100.0
    current_ev = float(getattr(s, "ai_min_ev_bps", 0.0) or 0.0)
    current_risk = float(getattr(s, "ai_risk_per_trade_pct", 0.25) or 0.0)
    current_reserve = float(getattr(s, "spot_cash_reserve_pct", 10.0) or 0.0)
    current_daily_stop = float(getattr(s, "ai_daily_loss_limit_pct", 3.0) or 0.0)
    ai_analysis_active = bool(getattr(s, "ai_enabled", False))

    with st.form("manual_ai_tuning"):
        col_buy_sell, col_ev, col_risk = st.columns([1.2, 1.0, 1.0])
        with col_buy_sell:
            buy_pct = st.slider(
                "–ü–æ—Ä–æ–≥ –ø–æ–∫—É–ø–∫–∏, %",
                min_value=0.0,
                max_value=100.0,
                value=current_buy,
                step=0.5,
                help=f"AI —Å–æ–≤–µ—Ç—É–µ—Ç ‚â• {recommended_buy:.2f}%",
            )
            sell_pct = st.slider(
                "–ü–æ—Ä–æ–≥ –ø—Ä–æ–¥–∞–∂–∏, %",
                min_value=0.0,
                max_value=100.0,
                value=current_sell,
                step=0.5,
                help=f"AI —Å–æ–≤–µ—Ç—É–µ—Ç ‚â• {recommended_sell:.2f}%",
            )
        with col_ev:
            min_ev_bps = st.number_input(
                "–ú–∏–Ω. –æ–∂–∏–¥–∞–µ–º–∞—è –≤—ã–≥–æ–¥–∞, –±.–ø.",
                min_value=0.0,
                max_value=200.0,
                value=current_ev,
                step=0.5,
                help=f"AI –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –æ–ø—É—Å–∫–∞—Ç—å—Å—è –Ω–∏–∂–µ {recommended_ev:.2f} –±.–ø.",
            )
            daily_stop = st.number_input(
                "–î–Ω–µ–≤–Ω–æ–π —Å—Ç–æ–ø –ø–æ —É–±—ã—Ç–∫—É, %",
                min_value=0.0,
                max_value=100.0,
                value=current_daily_stop,
                step=0.5,
            )
        with col_risk:
            risk_pct = st.number_input(
                "–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É, % –∫–∞–ø–∏—Ç–∞–ª–∞",
                min_value=0.0,
                max_value=100.0,
                value=current_risk,
                step=0.1,
            )
            reserve_pct = st.number_input(
                "–†–µ–∑–µ—Ä–≤ –≤ –∫—ç—à–µ, %",
                min_value=0.0,
                max_value=100.0,
                value=current_reserve,
                step=1.0,
            )

        ai_analysis = st.checkbox(
            "AI –∞–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤–∫–ª—é—á—ë–Ω",
            value=ai_analysis_active,
            help="–û—Å—Ç–∞–≤—å—Ç–µ –∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á—ë–Ω–Ω—ã–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –±–µ–∑ –∞–≤—Ç–æ—Ç–æ—Ä–≥–æ–≤–ª–∏.",
        )

        tuning_submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

    if tuning_submitted:
        update_settings(
            ai_buy_threshold=buy_pct / 100.0,
            ai_sell_threshold=sell_pct / 100.0,
            ai_min_ev_bps=min_ev_bps,
            ai_risk_per_trade_pct=risk_pct,
            spot_cash_reserve_pct=reserve_pct,
            ai_daily_loss_limit_pct=daily_stop,
            ai_enabled=ai_analysis,
        )
        st.success("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. GuardianBot —É—á—Ç—ë—Ç –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∞–Ω–∞–ª–∏–∑–µ.")
        s = get_settings(force_reload=True)

section("Telegram")
col1, col2 = st.columns(2)
with col1:
    token = st.text_input("Bot Token", value=s.telegram_token, type="password")
with col2:
    chat = st.text_input("Chat ID", value=s.telegram_chat_id)

if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å Telegram"):
    update_settings(telegram_token=token.strip(), telegram_chat_id=chat.strip())
    st.success("Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
