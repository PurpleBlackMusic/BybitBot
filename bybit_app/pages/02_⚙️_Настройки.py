
from __future__ import annotations
import streamlit as st
from utils.envs import get_settings, update_settings
from utils.guardian_bot import GuardianBot
from utils.ui import section

st.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

s = get_settings()

with st.form("automation_toggle"):
    ai_enabled_initial = bool(getattr(s, "ai_enabled", False))
    ai_enabled_choice = st.checkbox(
        "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤",
        value=ai_enabled_initial,
        help="–ö–æ–≥–¥–∞ —Ñ–ª–∞–∂–æ–∫ –∞–∫—Ç–∏–≤–µ–Ω, GuardianBot –∏—Å–ø–æ–ª–Ω—è–µ—Ç —Å–¥–µ–ª–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.",
    )
    toggle_submitted = st.form_submit_button("üíæ –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∂–∏–º")

if toggle_submitted:
    if ai_enabled_choice != ai_enabled_initial:
        update_settings(ai_enabled=ai_enabled_choice)
        st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        s = get_settings(force_reload=True)
    else:
        st.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")

bot = GuardianBot(settings=s)
summary = bot.status_summary()
automation_health = bot.data_health().get("automation") or {}
brief = bot.generate_brief()

ai_enabled = bool(getattr(s, "ai_enabled", False))

if ai_enabled:
    automation_ok = bool(automation_health.get("ok"))
    automation_message = (
        str(automation_health.get("message") or "AI –≥–æ—Ç–æ–≤ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–¥–µ–ª–∫–∞–º.").strip()
    )
    automation_details = automation_health.get("details")
    status_renderer = st.success if automation_ok else st.warning
    status_renderer(automation_message)
    if isinstance(automation_details, str) and automation_details.strip():
        st.caption(automation_details.strip())
    blockers = [reason for reason in summary.get("actionable_reasons", []) if reason]
    if blockers:
        st.markdown("**–ü–æ—á–µ–º—É –±–æ—Ç –ø–æ–∫–∞ –∂–¥—ë—Ç:**")
        for reason in blockers:
            st.markdown(f"- {reason}")
else:
    st.info(
        "AI —Å–∏–≥–Ω–∞–ª—ã –≤—ã–∫–ª—é—á–µ–Ω—ã ‚Äî –≤–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –≤—ã—à–µ, —á—Ç–æ–±—ã GuardianBot –∏—Å–ø–æ–ª–Ω—è–ª —Å–¥–µ–ª–∫–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ."
    )

plan_steps = bot.plan_steps(brief=brief)
if plan_steps:
    with st.expander("–ß–µ–∫-–ª–∏—Å—Ç –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç AI", expanded=True):
        for idx, step in enumerate(plan_steps, start=1):
            st.markdown(f"{idx}. {step}")

risk_outline = bot.risk_summary()
if risk_outline:
    with st.expander("–ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∏—Å–∫–æ–≤", expanded=False):
        st.markdown(risk_outline.replace("\n", "  \n"))

safety_notes = bot.safety_notes()
if safety_notes:
    with st.expander("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", expanded=False):
        for note in safety_notes:
            st.markdown(f"- {note}")

thresholds = summary.get("thresholds") or {}
if thresholds:
    st.subheader("–û—Ä–∏–µ–Ω—Ç–∏—Ä—ã GuardianBot")
    st.caption(
        "–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –ø–æ–º–æ–≥–∞—é—Ç –ø–æ–Ω—è—Ç—å, –∫–æ–≥–¥–∞ AI –≥–æ—Ç–æ–≤ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ä–∏—Å–∫–∞."
    )
    cols = st.columns(3)
    cols[0].metric(
        "–ü–æ—Ä–æ–≥ –ø–æ–∫—É–ø–∫–∏",
        f"{float(thresholds.get('effective_buy_probability_pct') or 0.0):.1f}%",
    )
    cols[1].metric(
        "–ü–æ—Ä–æ–≥ –ø—Ä–æ–¥–∞–∂–∏",
        f"{float(thresholds.get('effective_sell_probability_pct') or 0.0):.1f}%",
    )
    cols[2].metric(
        "–ú–∏–Ω. –æ–∂–∏–¥–∞–µ–º–∞—è –≤—ã–≥–æ–¥–∞",
        f"{float(thresholds.get('min_ev_bps') or 0.0):.1f} –±.–ø.",
    )

st.caption(
    "GuardianBot –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –≤–µ–¥—ë—Ç —Å–¥–µ–ª–∫–∏. –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Ä—É—á–Ω—ã–µ –ø—Ä–∞–≤–∫–∏, –æ–±–Ω–æ–≤–∏—Ç–µ settings.json –Ω–∞–ø—Ä—è–º—É—é."
)

section("Telegram")
col1, col2 = st.columns(2)
with col1:
    token = st.text_input("Bot Token", value=s.telegram_token, type="password")
with col2:
    chat = st.text_input("Chat ID", value=s.telegram_chat_id)

if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å Telegram"):
    update_settings(telegram_token=token.strip(), telegram_chat_id=chat.strip())
    st.success("Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
