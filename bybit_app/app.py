
from __future__ import annotations

import re
import sys
import time
from collections.abc import Iterable, Mapping, Sequence
from dataclasses import dataclass
from pathlib import Path
from typing import Any

import pandas as pd
import streamlit as st

if __package__ in (None, ""):
    project_root = Path(__file__).resolve().parent.parent
    if str(project_root) not in sys.path:
        sys.path.insert(0, str(project_root))

from bybit_app.utils.dataframe import arrow_safe
from bybit_app.utils.ui import (
    build_pill,
    build_status_card,
    inject_css,
    navigation_link,
    page_slug_from_path,
    safe_set_page_config,
    auto_refresh,
)
from bybit_app.utils.ai.kill_switch import (
    clear_pause,
    get_state as get_kill_switch_state,
    set_pause as activate_kill_switch,
)
from bybit_app.utils.background import ensure_background_services
from bybit_app.utils.envs import (
    CredentialValidationError,
    active_api_key,
    active_api_secret,
    active_dry_run,
    get_settings,
    validate_runtime_credentials,
    update_settings,
)
from bybit_app.ui.state import (
    BASE_SESSION_STATE,
    cached_api_client,
    cached_guardian_snapshot,
    cached_preflight_snapshot,
    cached_ws_snapshot,
    clear_data_caches,
    ensure_keys,
)
from bybit_app.ui.components import (
    log_viewer,
    metrics_strip,
    orders_table,
    show_error_banner,
    signals_table,
    status_bar,
    trade_ticket,
    wallet_overview,
)





def _safe_float(value: object, default: float | None = 0.0) -> float | None:
    try:
        if value is None:
            return default
        return float(value)
    except (TypeError, ValueError):
        return default


def _normalise_tone(value: object) -> str:
    if not isinstance(value, str):
        return "warning"
    tone = value.strip().lower()
    mapping = {
        "critical": "danger",
        "danger": "danger",
        "error": "danger",
        "severe": "danger",
        "warn": "warning",
        "warning": "warning",
        "caution": "warning",
        "info": "info",
        "information": "info",
        "notice": "info",
        "success": "success",
        "ok": "success",
    }
    return mapping.get(tone, "warning")


def _tone_priority(tone: str) -> int:
    return {"danger": 0, "warning": 1, "info": 2, "success": 3}.get(tone, 1)


def _normalise_brief(raw: Mapping[str, object] | None) -> dict[str, object]:
    if not isinstance(raw, Mapping):
        raw = {}

    def _text(key: str, fallback: str = "") -> str:
        value = raw.get(key)
        if value is None:
            return fallback
        return str(value)

    mode = _text("mode", "wait").lower() or "wait"
    status_age = _safe_float(raw.get("status_age"), None)

    return {
        "mode": mode,
        "symbol": _text("symbol", "‚Äî"),
        "headline": _text("headline"),
        "action_text": _text("action_text"),
        "confidence_text": _text("confidence_text"),
        "ev_text": _text("ev_text"),
        "caution": _text("caution"),
        "updated_text": _text("updated_text"),
        "analysis": _text("analysis"),
        "status_age": status_age,
    }


def _normalise_key_fragment(value: str) -> str:
    """Return a Streamlit-safe fragment for widget keys."""

    fragment = re.sub(r"[^0-9a-zA-Z_]+", "_", value).strip("_")
    return fragment or "page"


def render_navigation_grid(
    shortcuts: list[tuple[str, str, str]], *, columns: int = 2, key_prefix: str = "nav"
) -> None:
    """Render navigation links in a compact grid layout."""

    if not shortcuts:
        return

    prefix_fragment = _normalise_key_fragment(str(key_prefix))

    for idx in range(0, len(shortcuts), columns):
        row = shortcuts[idx : idx + columns]
        cols = st.columns(len(row))
        for column_offset, (column, shortcut) in enumerate(zip(cols, row)):
            label, page, description = shortcut
            slug_fragment = _normalise_key_fragment(page_slug_from_path(page))
            unique_key = f"{prefix_fragment}_{slug_fragment}_{idx + column_offset}"
            with column:
                navigation_link(page, label=label, key=unique_key)
                st.caption(description)


def render_header() -> None:
    st.title("Bybit Spot Guardian")
    st.caption(
        "–¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–º–Ω—ã–º —Å–ø–æ—Ç–æ–≤—ã–º –±–æ—Ç–æ–º: —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Ç–∏—Ö–∏–µ –ø–æ–º–æ—â–Ω–∏–∫–∏."
    )
    st.markdown(
        """
        <div class="pill-row">
            <span>üõ° –ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∏—Å–∫–æ–≤</span>
            <span>‚ö° –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫</span>
            <span>üìä –ß—ë—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å</span>
        </div>
        """,
        unsafe_allow_html=True,
    )


def render_status(settings) -> None:
    api_key_value = active_api_key(settings)
    api_secret_value = active_api_secret(settings)
    ok = bool(api_key_value and api_secret_value)
    status = build_status_card(
        "–ö–ª—é—á–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã" if ok else "–î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏",
        "–ì–æ—Ç–æ–≤—ã –∫ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –æ—Ä–¥–µ—Ä–æ–≤." if ok else "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á –∏ —Å–µ–∫—Ä–µ—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.",
        icon="üîê" if ok else "‚ö†Ô∏è",
        tone="success" if ok else "warning",
    )
    with st.container(border=True):
        status_col, metrics_col = st.columns([2, 1])
        with status_col:
            st.markdown(status, unsafe_allow_html=True)
        with metrics_col:
            st.metric("–°–µ—Ç—å", "Testnet" if settings.testnet else "Mainnet")
            st.metric("–†–µ–∂–∏–º", "DRY-RUN" if active_dry_run(settings) else "Live")
            reserve = getattr(settings, "spot_cash_reserve_pct", 10.0)
            st.metric("–†–µ–∑–µ—Ä–≤ –∫—ç—à–∞", f"{reserve:.0f}%")

        updated_at = getattr(settings, "updated_at", None)
        last_update = updated_at.strftime("%d.%m.%Y %H:%M") if updated_at else "‚Äî"
        st.caption(
            f"API key: {'‚úÖ' if api_key_value else '‚ùå'} ¬∑ Secret: {'‚úÖ' if api_secret_value else '‚ùå'} ¬∑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {last_update}"
        )

        if not ok:
            st.warning(
                "–ë–µ–∑ API –∫–ª—é—á–µ–π –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å –æ—Ä–¥–µ—Ä–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª ¬´–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ¬ª –∏ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö."
            )


def _format_seconds_ago(value: object | None) -> str:
    try:
        seconds = float(value) if value is not None else None
    except (TypeError, ValueError):
        seconds = None

    if seconds is None or seconds < 0:
        return "‚Äî"
    if seconds < 1:
        return "< 1 —Å –Ω–∞–∑–∞–¥"
    if seconds < 60:
        return f"{seconds:.0f} —Å –Ω–∞–∑–∞–¥"
    minutes = seconds / 60
    if minutes < 60:
        return f"{minutes:.0f} –º–∏–Ω –Ω–∞–∑–∞–¥"
    hours = minutes / 60
    if hours < 24:
        return f"{hours:.1f} —á –Ω–∞–∑–∞–¥"
    days = hours / 24
    return f"{days:.1f} –¥–Ω –Ω–∞–∑–∞–¥"


def _pick_freshest(records: Mapping[str, Mapping[str, object]]) -> tuple[str, Mapping[str, object]] | None:
    freshest: tuple[float, str, Mapping[str, object]] | None = None
    for topic, payload in records.items():
        age_raw = payload.get("age_seconds") if isinstance(payload, Mapping) else None
        try:
            age = float(age_raw) if age_raw is not None else float("inf")
        except (TypeError, ValueError):
            age = float("inf")
        if freshest is None or age < freshest[0]:
            freshest = (age, topic, payload)
    if freshest is None:
        return None
    return freshest[1], freshest[2]


def _summarise_order(order: Mapping[str, object] | None) -> str:
    if not isinstance(order, Mapping):
        return "–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤"
    symbol = str(order.get("symbol") or "‚Äî")
    side = str(order.get("side") or "‚Äî").upper()
    status = str(order.get("status") or order.get("orderStatus") or "‚Äî")
    return f"{symbol} ¬∑ {side} ¬∑ {status}"


def _summarise_execution(execution: Mapping[str, object] | None) -> str:
    if not isinstance(execution, Mapping):
        return "–ù–µ—Ç —Å–≤–µ–∂–∏—Ö –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π"
    symbol = str(execution.get("symbol") or "‚Äî")
    side = str(execution.get("side") or "‚Äî").upper()
    qty = execution.get("execQty") or execution.get("qty")
    price = execution.get("execPrice") or execution.get("price")
    qty_text = f"{qty}" if qty not in (None, "") else "?"
    price_text = f"{price}" if price not in (None, "") else "?"
    return f"{symbol} ¬∑ {side} ¬∑ {qty_text}@{price_text}"


def render_ws_telemetry(snapshot: Mapping[str, object] | None) -> None:
    if not snapshot:
        return

    realtime = snapshot.get("realtime") if isinstance(snapshot, Mapping) else None
    realtime = realtime if isinstance(realtime, Mapping) else {}
    generated_at = realtime.get("generated_at") if isinstance(realtime, Mapping) else None
    try:
        snapshot_age = time.time() - float(generated_at) if generated_at is not None else None
    except (TypeError, ValueError):
        snapshot_age = None
    public_records = realtime.get("public") if isinstance(realtime, Mapping) else {}
    if not isinstance(public_records, Mapping):
        public_records = {}
    private_records = realtime.get("private") if isinstance(realtime, Mapping) else {}
    if not isinstance(private_records, Mapping):
        private_records = {}

    last_order = snapshot.get("last_order") if isinstance(snapshot, Mapping) else None
    last_execution = snapshot.get("last_execution") if isinstance(snapshot, Mapping) else None
    public_stale = bool(snapshot.get("public_stale")) if isinstance(snapshot, Mapping) else False
    private_stale = bool(snapshot.get("private_stale")) if isinstance(snapshot, Mapping) else False

    with st.container(border=True):
        st.markdown("#### –ñ–∏–≤–æ–π –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
        cols = st.columns(2)

        latest_public = _pick_freshest(public_records) if public_records else None
        if latest_public is None:
            delta = "–æ–∂–∏–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ" if not public_stale else "–¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏"
            cols[0].metric("–ü—É–±–ª–∏—á–Ω—ã–π –ø–æ—Ç–æ–∫", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö", delta)
        else:
            topic, payload = latest_public
            age_text = _format_seconds_ago(payload.get("age_seconds") if isinstance(payload, Mapping) else None)
            delta = "—É—Å—Ç–∞—Ä–µ–ª–∏" if public_stale else age_text
            cols[0].metric("–ü—É–±–ª–∏—á–Ω—ã–π –ø–æ—Ç–æ–∫", topic, delta)
            cols[0].caption(f"–¢–µ–º {len(public_records)} ¬∑ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {age_text}")

        latest_private = _pick_freshest(private_records) if private_records else None
        if latest_private is None:
            delta = "–æ–∂–∏–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ" if not private_stale else "–¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏"
            cols[1].metric("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –ø–æ—Ç–æ–∫", "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö", delta)
        else:
            topic, payload = latest_private
            age_text = _format_seconds_ago(payload.get("age_seconds") if isinstance(payload, Mapping) else None)
            delta = "—É—Å—Ç–∞—Ä–µ–ª–∏" if private_stale else age_text
            cols[1].metric("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –ø–æ—Ç–æ–∫", topic, delta)
            cols[1].caption(f"–¢–µ–º {len(private_records)} ¬∑ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {age_text}")

        info_bits: list[str] = []
        if last_order:
            info_bits.append(f"üßæ { _summarise_order(last_order) }")
        if last_execution:
            info_bits.append(f"‚ö° { _summarise_execution(last_execution) }")
        if snapshot_age is not None:
            info_bits.append(f"‚è± –°–Ω–∏–º–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω { _format_seconds_ago(snapshot_age) }")
        if info_bits:
            st.markdown("<br />".join(info_bits), unsafe_allow_html=True)

def _mode_meta(mode: str) -> tuple[str, str, str]:
    mapping: dict[str, tuple[str, str, str]] = {
        "buy": ("–ü–æ–∫—É–ø–∫–∞", "üü¢", "success"),
        "sell": ("–ü—Ä–æ–¥–∞–∂–∞", "üî¥", "warning"),
        "wait": ("–ù–∞–±–ª—é–¥–∞–µ–º", "‚è∏", "neutral"),
    }
    return mapping.get(mode, ("–ù–∞–±–ª—é–¥–∞–µ–º", "‚è∏", "neutral"))


def render_signal_brief(
    brief_raw: Mapping[str, object] | None,
    score: Mapping[str, object] | None,
    *,
    settings,
) -> dict[str, object]:
    brief = _normalise_brief(brief_raw)
    probability_pct = _safe_float(
        score.get("probability_pct") if isinstance(score, Mapping) else None, 0.0
    )
    buy_threshold = _safe_float(
        score.get("buy_threshold") if isinstance(score, Mapping) else None, 0.0
    )
    ev_bps = _safe_float(
        score.get("ev_bps") if isinstance(score, Mapping) else None, 0.0
    )
    min_ev_bps = _safe_float(
        score.get("min_ev_bps") if isinstance(score, Mapping) else None, 0.0
    )
    last_update = (
        score.get("last_update") if isinstance(score, Mapping) else None
    ) or "‚Äî"

    mode_label, mode_icon, tone = _mode_meta(brief.get("mode", "wait"))

    st.subheader("–°–≤–æ–¥–∫–∞ —Å–∏–≥–Ω–∞–ª–∞")
    with st.container(border=True):
        st.markdown(
            """
            <div class="signal-card__badge">
                {pill}<span class="signal-card__symbol">¬∑ {symbol}</span>
            </div>
            """.format(
                pill=build_pill(mode_label, icon=mode_icon, tone=tone),
                symbol=brief.get("symbol", "‚Äî"),
            ),
            unsafe_allow_html=True,
        )
        for key in ("headline", "analysis", "action_text", "confidence_text", "ev_text"):
            text = str(brief.get(key) or "").strip()
            if not text:
                continue
            st.markdown(
                f"<div class='signal-card__body'>{text}</div>",
                unsafe_allow_html=True,
            )

        metric_cols = st.columns(3)
        metric_cols[0].metric(
            "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å",
            f"{probability_pct or 0.0:.1f}%",
            f"–ü–æ—Ä–æ–≥ {buy_threshold or 0.0:.0f}%",
        )
        metric_cols[1].metric(
            "–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª",
            f"{ev_bps or 0.0:.1f} –±.–ø.",
            f"–ú–∏–Ω. {min_ev_bps or 0.0:.1f} –±.–ø.",
        )
        trade_mode = "DRY-RUN" if active_dry_run(settings) else "Live"
        metric_cols[2].metric("–¢–∞–∫—Ç–∏–∫–∞", mode_label, trade_mode)
        st.caption(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {last_update}")

    caution = str(brief.get("caution") or "").strip()
    if caution:
        st.warning(caution)
    status_age = _safe_float(brief.get("status_age"), None)
    if status_age is not None and status_age > 300:
        st.error(
            "–°–∏–≥–Ω–∞–ª –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è –±–æ–ª–µ–µ –ø—è—Ç–∏ –º–∏–Ω—É—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫."
        )

    return brief


def _normalise_health(health: Mapping[str, object] | Sequence[tuple[str, object]] | None) -> dict[str, object]:
    """Return a dictionary representation of the health payload."""

    if health is None:
        return {}
    if isinstance(health, Mapping):
        return dict(health)
    try:
        return dict(health)
    except Exception:
        return {}


def _normalise_watchlist(watchlist: object) -> list[Mapping[str, object] | object]:
    """Convert watchlist payloads to a list consumable by the UI."""

    if watchlist is None:
        return []

    if hasattr(watchlist, "to_dict"):
        try:
            records = watchlist.to_dict("records")  # type: ignore[call-arg]
        except Exception:
            records = None
        else:
            if isinstance(records, Iterable) and not isinstance(records, (str, bytes)):
                return list(records)

    if isinstance(watchlist, Mapping):
        return [watchlist]

    if isinstance(watchlist, Sequence) and not isinstance(watchlist, (str, bytes)):
        return list(watchlist)

    if isinstance(watchlist, Iterable) and not isinstance(watchlist, (str, bytes)):
        return list(watchlist)

    return [watchlist]


_TONE_ICON_MAP: dict[str, str] = {
    "danger": "‚õî",
    "warning": "‚ö†Ô∏è",
    "info": "‚ÑπÔ∏è",
    "success": "‚úÖ",
}

def _combine_descriptions(primary: str, extra: str) -> str:
    primary = (primary or "").strip()
    extra = (extra or "").strip()
    if not extra:
        return primary
    if not primary:
        return extra
    if extra.lower() == primary.lower():
        return primary
    if extra in primary:
        return primary
    if primary in extra:
        return extra
    joiner = " " if primary.endswith((".", "!", "?", ":", "‚Äî", "-", "‚Äì")) else " ¬∑ "
    return f"{primary}{joiner}{extra}".strip()


def _format_details(details: object) -> str:
    if not details:
        return ""
    if isinstance(details, str):
        return details
    if isinstance(details, Mapping):
        return "; ".join(f"{key}: {value}".strip() for key, value in details.items() if str(value).strip())
    if isinstance(details, Sequence) and not isinstance(details, (str, bytes)):
        return "; ".join(str(item) for item in details)
    return str(details)


def _normalise_step_item(item: object) -> str | None:
    if isinstance(item, Mapping):
        for key in ("title", "text", "description", "label", "message"):
            value = item.get(key)
            if isinstance(value, str) and value.strip():
                return value.strip()
        values = [str(value).strip() for value in item.values() if str(value).strip()]
        if values:
            return " ".join(values)
        return None
    if isinstance(item, (str, bytes)):
        text = item.decode() if isinstance(item, bytes) else item
    else:
        text = str(item)
    text = text.strip()
    return text or None


def _normalise_steps(raw: object) -> list[str]:
    if not raw:
        return []
    if isinstance(raw, str):
        parts = [
            part.strip(" ‚Ä¢-‚Äì‚Äî")
            for part in re.split(r"[\n;,‚Ä¢¬∑]+", raw)
            if part.strip(" ‚Ä¢-‚Äì‚Äî")
        ]
        return parts
    if isinstance(raw, Mapping):
        return [
            f"{key}: {value}".strip()
            for key, value in raw.items()
            if str(value).strip()
        ]
    if isinstance(raw, Sequence) and not isinstance(raw, (str, bytes)):
        steps: list[str] = []
        for item in raw:
            normalised = _normalise_step_item(item)
            if normalised:
                steps.append(normalised)
        return steps
    if isinstance(raw, Iterable) and not isinstance(raw, (str, bytes)):
        return [
            step
            for item in raw
            if (step := _normalise_step_item(item))
        ]
    normalised = _normalise_step_item(raw)
    return [normalised] if normalised else []


def _collect_steps(info: Mapping[str, Any]) -> list[str]:
    fields = ("checklist", "steps", "actions", "remediation", "recommendations")
    steps: list[str] = []
    for field in fields:
        steps.extend(_normalise_steps(info.get(field)))
    deduped: list[str] = []
    seen_keys: set[str] = set()
    for step in steps:
        lowered = step.lower()
        if lowered in seen_keys:
            continue
        seen_keys.add(lowered)
        deduped.append(step)
    return deduped


@dataclass
class _ActionCandidate:
    title: str
    description: str
    icon: str
    tone: str
    page: str | None
    page_label: str | None
    priority: int
    order: int

    def merge_with(self, other: "_ActionCandidate") -> None:
        if other.priority < self.priority:
            combined = _combine_descriptions(other.description, self.description)
            self.title = other.title
            self.description = combined
            self.icon = other.icon
            self.tone = other.tone
            self.page = other.page
            self.page_label = other.page_label
            self.priority = other.priority
            self.order = min(self.order, other.order)
            return

        self.description = _combine_descriptions(self.description, other.description)
        if not self.page and other.page:
            self.page = other.page
        if not self.page_label and other.page_label:
            self.page_label = other.page_label
        self.order = min(self.order, other.order)

    def to_dict(self) -> dict[str, Any]:
        return {
            "title": self.title,
            "description": self.description,
            "icon": self.icon,
            "tone": self.tone,
            "page": self.page,
            "page_label": self.page_label,
            "priority": self.priority,
        }


class _ActionBuilder:
    def __init__(self) -> None:
        self._actions: list[_ActionCandidate] = []
        self._seen: dict[tuple[str, str], _ActionCandidate] = {}
        self._order = 0

    def _next_order(self) -> int:
        self._order += 1
        return self._order

    def add(
        self,
        title: str,
        description: str,
        *,
        icon: str | None = None,
        tone: str | None = None,
        page: str | None = None,
        page_label: str | None = None,
        priority: int | None = None,
        identity_hint: tuple[str, str] | None = None,
    ) -> None:
        resolved_tone = _normalise_tone(tone)
        resolved_icon = icon or _TONE_ICON_MAP.get(resolved_tone, "‚ö†Ô∏è")
        resolved_priority = priority if priority is not None else _tone_priority(resolved_tone)
        identity = identity_hint or (title.strip(), description.strip())
        candidate = _ActionCandidate(
            title=title,
            description=description,
            icon=resolved_icon,
            tone=resolved_tone,
            page=page,
            page_label=page_label,
            priority=resolved_priority,
            order=self._next_order(),
        )

        existing = self._seen.get(identity)
        if existing is not None:
            existing.merge_with(candidate)
            return

        self._seen[identity] = candidate
        self._actions.append(candidate)

    def as_list(self) -> list[dict[str, Any]]:
        ordered = sorted(self._actions, key=lambda item: (item.priority, item.order))
        return [item.to_dict() for item in ordered]


def collect_user_actions(
    settings,
    brief: Mapping[str, object] | None,
    health: dict[str, dict[str, object]] | None,
    watchlist: Sequence[object] | None,
) -> list[dict[str, object]]:
    """Compile context-aware next steps for the home dashboard."""

    builder = _ActionBuilder()

    brief_map = dict(brief) if isinstance(brief, Mapping) else {}
    brief_caution = str(brief_map.get("caution") or "").strip()
    brief_status_age = _safe_float(brief_map.get("status_age"), None)

    has_keys = bool(active_api_key(settings) and active_api_secret(settings))
    dry_run_enabled = bool(active_dry_run(settings))
    reserve_pct = getattr(settings, "spot_cash_reserve_pct", None)

    if not has_keys:
        builder.add(
            "–î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏",
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–ª—é—á –∏ —Å–µ–∫—Ä–µ—Ç Bybit –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –±–æ—Ç —Å–º–æ–≥ —Ä–∞–∑–º–µ—â–∞—Ç—å –æ—Ä–¥–µ—Ä–∞.",
            icon="üîë",
            tone="warning",
            page="pages/00_‚úÖ_–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ_–∏_–°–æ—Å—Ç–æ—è–Ω–∏–µ.py",
            page_label="–û—Ç–∫—Ä—ã—Ç—å ¬´–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ¬ª",
        )
    else:
        if dry_run_enabled:
            builder.add(
                "DRY-RUN –∞–∫—Ç–∏–≤–µ–Ω",
                "–ñ–∏–≤—ã–µ –∑–∞—è–≤–∫–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è. –û—Ç–∫–ª—é—á–∏—Ç–µ —É—á–µ–±–Ω—ã–π —Ä–µ–∂–∏–º, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ.",
                icon="üß™",
                tone="warning",
                page="pages/02_‚öôÔ∏è_–ù–∞—Å—Ç—Ä–æ–π–∫–∏.py",
                page_label="–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º",
            )

    if isinstance(reserve_pct, (int, float)) and reserve_pct < 10:
        builder.add(
            "–†–µ–∑–µ—Ä–≤ –∫—ç—à–∞ –Ω–∏–∂–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
            f"–°–µ–π—á–∞—Å –æ—Ç–ª–æ–∂–µ–Ω–æ {reserve_pct:.0f}% ‚Äî –¥–µ—Ä–∂–∏—Ç–µ –Ω–µ –º–µ–Ω—å—à–µ 10%, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –∏—Å—Ç–æ—â–∏–ª –¥–µ–ø–æ–∑–∏—Ç.",
            icon="üíß",
            tone="warning",
            page="pages/02_‚öôÔ∏è_–ù–∞—Å—Ç—Ä–æ–π–∫–∏.py",
            page_label="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∑–µ—Ä–≤",
        )

    if brief_caution:
        builder.add(
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞",
            brief_caution,
            icon="üõü",
            tone="warning",
            page="pages/00_üß≠_–ü—Ä–æ—Å—Ç–æ–∏ÃÜ_—Ä–µ–∂–∏–º.py",
            page_label="–ò–∑—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª",
        )

    if brief_status_age is not None and brief_status_age > 300:
        builder.add(
            "–°–∏–≥–Ω–∞–ª —É—Å—Ç–∞—Ä–µ–ª",
            "–î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –±–æ–ª–µ–µ –ø—è—Ç–∏ –º–∏–Ω—É—Ç ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–∞–π–ø–ª–∞–π–Ω —Å–∏–≥–Ω–∞–ª–æ–≤.",
            icon="‚è±",
            tone="danger",
            page="pages/00_üß≠_–ü—Ä–æ—Å—Ç–æ–∏ÃÜ_—Ä–µ–∂–∏–º.py",
            page_label="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–≥–Ω–∞–ª",
        )

    health_map = health or {}
    page_lookup: dict[str, tuple[str | None, str | None]] = {
        "ai_signal": ("pages/00_üß≠_–ü—Ä–æ—Å—Ç–æ–∏ÃÜ_—Ä–µ–∂–∏–º.py", "–û—Ç–∫—Ä—ã—Ç—å ¬´–ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º¬ª"),
        "executions": ("pages/05_üìà_–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥_–°–¥–µ–ª–æ–∫.py", "–û—Ç–∫—Ä—ã—Ç—å ¬´–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–¥–µ–ª–æ–∫¬ª"),
        "realtime_trading": ("pages/05_‚ö°_WS_–ö–æ–Ω—Ç—Ä–æ–ª—å.py", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å real-time"),
        "api_keys": ("pages/00_‚úÖ_–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ_–∏_–°–æ—Å—Ç–æ—è–Ω–∏–µ.py", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"),
    }
    priority_lookup: dict[str, int] = {
        "ai_signal": -1,
    }

    for key, info in health_map.items():
        if not isinstance(info, Mapping):
            continue
        if info.get("ok") is not False:
            continue
        if key == "realtime_trading" and (dry_run_enabled or not has_keys):
            continue

        title = str(info.get("title") or key)
        message = str(info.get("message") or "").strip()
        details_text = _format_details(info.get("details"))
        description = " ".join(part for part in (message, details_text) if part).strip() or "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        default_page, default_page_label = page_lookup.get(key, (None, None))
        page = info.get("page") or info.get("link") or default_page
        if not isinstance(page, str):
            page = default_page
        page_label = info.get("page_label") or info.get("link_label") or info.get("action") or default_page_label
        if not isinstance(page_label, str):
            page_label = default_page_label
        tone = info.get("tone") or info.get("status") or info.get("severity")
        normalised_tone = _normalise_tone(tone)
        computed_priority = _tone_priority(normalised_tone)
        raw_priority = info.get("priority") if isinstance(info.get("priority"), int) else None
        effective_priority = raw_priority if raw_priority is not None else computed_priority
        if raw_priority is not None:
            effective_priority = min(raw_priority, computed_priority)
        default_priority = priority_lookup.get(key)
        if default_priority is not None:
            effective_priority = min(effective_priority, default_priority)
        raw_icon = info.get("icon")
        icon = raw_icon if isinstance(raw_icon, str) else None
        steps = _collect_steps(info)
        if steps:
            limit = 4
            trimmed = steps[:limit]
            steps_text = "–®–∞–≥–∏: " + " ¬∑ ".join(trimmed)
            if len(steps) > limit:
                steps_text += f" (+{len(steps) - limit})"
            description = _combine_descriptions(description, steps_text)

        builder.add(
            title,
            description,
            icon=icon,
            tone=normalised_tone,
            page=page,
            page_label=page_label,
            priority=effective_priority,
            identity_hint=(
                title.strip(),
                str(
                    info.get("slug")
                    or info.get("id")
                    or message
                    or description
                    or key
                    or title.strip()
                ),
            ),
        )

    if not watchlist:
        builder.add(
            "–î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä—ã –≤ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ",
            "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç ‚Äî —Å–æ–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á–∏–π —É–Ω–∏–≤–µ—Ä—Å—É–º —á–µ—Ä–µ–∑ Universe Builder –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–∏–∫–µ—Ä—ã –≤—Ä—É—á–Ω—É—é.",
            icon="üëÄ",
            tone="warning",
            page="pages/01d_üåê_Universe_Builder_Spot.py",
            page_label="–û—Ç–∫—Ä—ã—Ç—å Universe Builder",
        )

    return builder.as_list()


def render_user_actions(
    settings,
    brief: Mapping[str, object] | None,
    health: dict[str, dict[str, object]] | None,
    watchlist: Sequence[object] | None,
) -> None:
    st.subheader("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
    actions = collect_user_actions(settings, brief, health, watchlist)

    if not actions:
        st.success("–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–µ–ª—ë–Ω—ã–µ ‚Äî –º–æ–∂–Ω–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª–µ.")
        return

    for index, action in enumerate(actions):
        with st.container(border=True):
            st.markdown(
                build_status_card(
                    str(action["title"]),
                    str(action["description"]),
                    icon=str(action.get("icon") or ""),
                    tone=str(action.get("tone") or "warning"),
                ),
                unsafe_allow_html=True,
            )
            page = action.get("page")
            if isinstance(page, str) and page:
                navigation_link(
                    page,
                    label=action.get("page_label") or "–ü–µ—Ä–µ–π—Ç–∏",
                    key=f"action_nav_{index}_{page}",
                )

        st.markdown("")


def render_onboarding() -> None:
    st.subheader("–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏")
    st.markdown(
        """
        1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª **¬´–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ¬ª** –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ API –∫–ª—é—á–∏.
        2. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ **¬´–ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º¬ª**, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª, –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –∏ —á–∞—Ç —Å –±–æ—Ç–æ–º.
        3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **¬´–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–¥–µ–ª–æ–∫¬ª** –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
        4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏ (Telegram, –∂—É—Ä–Ω–∞–ª—ã) —Å–ø—Ä—è—Ç–∞–Ω—ã –≤ –±–ª–æ–∫–µ **¬´–°–∫—Ä—ã—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã¬ª** –Ω–∏–∂–µ.
        """
    )


def render_shortcuts() -> None:
    st.subheader("–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã")
    shortcuts = [
        (
            "üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
            "pages/00_‚úÖ_–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ_–∏_–°–æ—Å—Ç–æ—è–Ω–∏–µ.py",
            "API –∫–ª—é—á–∏, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ –∏ —Ä–µ–∂–∏–º DRY-RUN.",
        ),
        (
            "üß≠ –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º",
            "pages/00_üß≠_–ü—Ä–æ—Å—Ç–æ–∏ÃÜ_—Ä–µ–∂–∏–º.py",
            "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª, –ø–ª–∞–Ω –∏ —á–∞—Ç —Å –±–æ—Ç–æ–º.",
        ),
        (
            "üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
            "pages/05_üìà_–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥_–°–¥–µ–ª–æ–∫.py",
            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è.",
        ),
    ]

    render_navigation_grid(shortcuts, columns=3, key_prefix="shortcuts")


def render_data_health(health: dict[str, dict[str, object]] | None) -> None:
    health = health or {}
    with st.container(border=True):
        st.subheader("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–æ—Ç–∞")
        st.caption(
            "–°–ª–µ–¥–∏–º –∑–∞ —Å–≤–µ–∂–µ—Å—Ç—å—é —Å–∏–≥–Ω–∞–ª–∞, –∂—É—Ä–Ω–∞–ª–æ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º API, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã."
        )
        cards: list[tuple[str, str, str, str]] = []
        for key in ("ai_signal", "executions", "api_keys"):
            info = health.get(key, {})
            if not info:
                continue
            ok = bool(info.get("ok"))
            tone_candidates = [
                _normalise_tone(info.get(field))
                for field in ("tone", "severity", "status", "level")
                if info.get(field) is not None
            ]
            if ok:
                tone = "success"
            else:
                tone = (
                    min(tone_candidates, key=_tone_priority)
                    if tone_candidates
                    else _normalise_tone(None)
                )
                if tone == "success":
                    tone = "warning"
            if tone not in {"success", "warning", "danger"}:
                tone = "warning" if not ok else "success"
            icon = {"success": "‚úÖ", "warning": "‚ö†Ô∏è", "danger": "‚õî"}.get(tone, "‚ö†Ô∏è")
            title = info.get("title", key)
            message = info.get("message", "")
            cards.append((title, message, icon, tone))

        if not cards:
            st.caption("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")
            return

        cols = st.columns(min(3, len(cards)))
        for column, (title, message, icon, tone) in zip(cols, cards):
            with column:
                st.markdown(
                    build_status_card(title, message, icon=icon, tone=tone),
                    unsafe_allow_html=True,
                )


def render_market_watchlist(
    watchlist: Sequence[dict[str, object]] | Sequence[Mapping[str, object]]
) -> None:
    st.subheader("–ù–∞–±–ª—é–¥–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã")
    if not watchlist:
        st.caption("–ü–æ–∫–∞ –Ω–µ—Ç —Ç–∏–∫–µ—Ä–æ–≤ –≤ —Å–ø–∏—Å–∫–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è ‚Äî –±–æ—Ç –∂–¥—ë—Ç –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª.")
        return

    st.dataframe(
        arrow_safe(pd.DataFrame(watchlist)),
        hide_index=True,
        use_container_width=True,
    )


def render_hidden_tools() -> None:
    with st.expander("ü´• –°–∫—Ä—ã—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –±–æ—Ç–∞"):
        st.caption(
            "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏ –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π."
        )

        groups = [
            (
                "–†—ã–Ω–æ–∫ –∏ —Å–∏–≥–Ω–∞–ª—ã",
                [
                    ("üìà –°–∫—Ä–∏–Ω–µ—Ä", "pages/01_üìà_–°–∫—Ä–∏–Ω–µ—Ä.py", "–¢–æ–ø –ª–∏–∫–≤–∏–¥–Ω—ã—Ö –ø–∞—Ä –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å."),
                    (
                        "üåê Universe Builder",
                        "pages/01d_üåê_Universe_Builder_Spot.py",
                        "–ü–æ–¥–±–æ—Ä –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è —Å–ø–æ—Ç-–±–æ—Ç–∞.",
                    ),
                ],
            ),
            (
                "–†–∏—Å–∫ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
                [
                    ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "pages/02_‚öôÔ∏è_–ù–∞—Å—Ç—Ä–æ–π–∫–∏.py", "–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–æ—Ç–∞."),
                    ("üõë KillSwitch", "pages/02c_üõë_KillSwitch_and_API_Nanny.py", "–ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏."),
                    ("üßΩ –ì–∏–≥–∏–µ–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤", "pages/02d_üßΩ_Order_Hygiene_Spot.py", "–ß–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞—è–≤–æ–∫."),
                    ("üìè –õ–∏–º–∏—Ç—ã –æ—Ä–¥–µ—Ä–æ–≤", "pages/02e_üìè_Spot_Order_Limits.py", "–ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ —á–∞—Å—Ç–æ—Ç—ã."),
                    ("üßÆ –†–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è", "pages/05_üßÆ_Portfolio_Risk_Spot.py", "–î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Ä–∏—Å–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º."),
                    ("üß≠ HRP vs VolTarget", "pages/05b_üß≠_HRP_vs_VolTarget_Spot.py", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–æ–∫."),
                    ("‚ö° WS –∫–æ–Ω—Ç—Ä–æ–ª—å", "pages/05_‚ö°_WS_–ö–æ–Ω—Ç—Ä–æ–ª—å.py", "–°—Ç–∞—Ç—É—Å real-time —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."),
                    ("üï∏Ô∏è WS –º–æ–Ω–∏—Ç–æ—Ä", "pages/05b_üï∏Ô∏è_WS_–ú–æ–Ω–∏—Ç–æ—Ä.py", "–¢—Ä–∞—Ñ–∏–∫ –∏ –∑–∞–¥–µ—Ä–∂–∫–∏ WebSocket."),
                    ("üß∞ Reconcile", "pages/09_üß∞_Reconcile.py", "–°–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–π –∏ –∂—É—Ä–Ω–∞–ª–æ–≤."),
                    ("‚öôÔ∏è –ó–¥–æ—Ä–æ–≤—å–µ", "pages/11_‚öôÔ∏è_–ó–¥–æ—Ä–æ–≤—å–µ_–∏_–°—Ç–∞—Ç—É—Å.py", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã."),
                    ("ü©∫ Time Sync", "pages/00c_ü©∫_Health_TimeSync.py", "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞–¥–µ—Ä–∂–∫–∏."),
                ],
            ),
            (
                "–¢–æ—Ä–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
                [
                    ("üß© TWAP", "pages/04c_üß©_TWAP_Spot.py", "–ü–∞–∫–µ—Ç–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∫—Ä—É–ø–Ω–æ–≥–æ –æ–±—ä—ë–º–∞."),
                    ("‚ö° Live OB Impact", "pages/04d_‚ö°_Live_OB_Impact_Spot.py", "–í–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Å—Ç–∞–∫–∞–Ω –≤ —Ä–µ–∂–∏–º–µ live."),
                    ("üß™ Impact Analyzer", "pages/04d_üß™_Impact_Analyzer_Spot.py", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–ª–∏—è–Ω–∏—è —Å–¥–µ–ª–æ–∫."),
                    ("üß† EV Tuner", "pages/04e_üß†_EV_Tuner_Spot.py", "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–∂–∏–¥–∞–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏."),
                    ("üîÅ –ü—Ä–∞–≤–∏–ª–∞", "pages/04f_üîÅ_Rules_Refresher_Spot.py", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ."),
                    ("üß∞ Overrides", "pages/04g_üß∞_Overrides_Spot.py", "–†—É—á–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤."),
                    ("üåä Liquidity", "pages/04h_üåä_Liquidity_Sampler_Spot.py", "–ó–∞–º–µ—Ä –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –ø–æ –±–∏—Ä–∂–µ."),
                    ("üîó Trade Pairs", "pages/06_üîó_Trade_Pairs_Spot.py", "–°–≤—è–∑–∞–Ω–Ω—ã–µ –ø–∞—Ä—ã –¥–ª—è —Ö–µ–¥–∂–µ–π."),
                ],
            ),
            (
                "PnL –∏ –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç—å",
                [
                    ("üí∞ PnL –¥–∞—à–±–æ—Ä–¥", "pages/06_üí∞_PnL_–î–∞—à–±–æ—Ä–¥.py", "–ò—Å—Ç–æ—Ä–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏."),
                    ("üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å", "pages/06_üìä_–ü–æ—Ä—Ç—Ñ–µ–ª—å_–î–∞—à–±–æ—Ä–¥.py", "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–æ–≤ –∏ –¥–∏–Ω–∞–º–∏–∫–∞."),
                    ("üí∞ PnL –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "pages/10_üí∞_PnL_–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.py", "–î–µ—Ç–∞–ª—å–Ω—ã–π –∂—É—Ä–Ω–∞–ª —Å–¥–µ–ª–æ–∫."),
                    ("üìâ Shortfall", "pages/10b_üìâ_Shortfall_Report.py", "–ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–æ—Å–∞–¥–æ–∫ –∏ –Ω–µ–¥–æ–ø–æ–ª—É—á–µ–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏."),
                ],
            ),
            (
                "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏",
                [
                    ("ü§ñ Telegram", "pages/06_ü§ñ_Telegram_–ë–æ—Ç.py", "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ heartbeat."),
                    ("ü™µ –õ–æ–≥–∏", "pages/07_ü™µ_–õ–æ–≥–∏.py", "–ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."),
                ],
            ),
        ]

        tab_titles = [title for title, _ in groups]
        tabs = st.tabs(tab_titles)

        for group_index, (tab, (_, items)) in enumerate(zip(tabs, groups)):
            with tab:
                render_navigation_grid(items, key_prefix=f"hidden_{group_index}")


def render_action_plan(
    plan_steps: Sequence[object] | None,
    safety_notes: Sequence[object] | None,
    risk_summary: str | None,
) -> None:
    steps = [str(step) for step in plan_steps or [] if str(step).strip()]
    notes = [str(note) for note in safety_notes or [] if str(note).strip()]

    plan_html = "".join(f"<li>{step}</li>" for step in steps)
    safety_html = "".join(f"<li>{note}</li>" for note in notes)

    cols = st.columns(2)
    with cols[0]:
        st.markdown("#### –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ")
        st.markdown(f"<ol class='checklist'>{plan_html}</ol>", unsafe_allow_html=True)

    with cols[1]:
        st.markdown("#### –ü–∞–º—è—Ç–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        st.markdown(f"<ul class='safety-list'>{safety_html}</ul>", unsafe_allow_html=True)
        summary_text = str(risk_summary or "").replace("\n", "  \n")
        if summary_text.strip():
            st.caption(summary_text)


def render_guides(
    settings,
    plan_steps: Sequence[object] | None,
    safety_notes: Sequence[object] | None,
    risk_summary: str | None,
    brief: Mapping[str, object] | None,
) -> None:
    st.subheader("–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Å–æ–≤–µ—Ç—ã")
    plan_tab, onboarding_tab, tips_tab = st.tabs(["–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π", "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏", "–ü–æ–¥—Å–∫–∞–∑–∫–∏"])

    with plan_tab:
        render_action_plan(plan_steps, safety_notes, risk_summary)

    with onboarding_tab:
        render_onboarding()

    with tips_tab:
        render_tips(settings, brief)


def render_tips(settings, brief: Mapping[str, object] | None) -> None:
    with st.container(border=True):
        st.markdown("### –ë—ã—Å—Ç—Ä—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏")
        st.markdown(
            """
            - DRY-RUN –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫–∏ –≤ –∂—É—Ä–Ω–∞–ª–∞—Ö, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—è –∏—Ö –Ω–∞ –±–∏—Ä–∂—É.
            - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä–µ–∑–µ—Ä–≤ –∫—ç—à–∞ –Ω–µ –æ–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∏–∂–µ 10%, —á—Ç–æ–±—ã —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å —É—Å—Ç–æ–π—á–∏–≤–æ–π.
            - –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Guardian Bot ‚Äî –æ–Ω —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –∑–∞—â–∏—Ç—É –¥–µ–ø–æ–∑–∏—Ç–∞.
            - –ó–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç Telegram-–±–æ—Ç: –≤–∫–ª—é—á–∏—Ç–µ –µ–≥–æ –≤ –±–ª–æ–∫–µ ¬´–°–∫—Ä—ã—Ç—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã¬ª.
            """
        )
        if active_dry_run(settings):
            st.info("DRY-RUN –∞–∫—Ç–∏–≤–µ–Ω: –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–µ—Ä–µ–¥ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ–π.")
        else:
            st.warning("DRY-RUN –≤—ã–∫–ª—é—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã —Ä–∏—Å–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.")
        status_age = _safe_float(brief.get("status_age") if isinstance(brief, Mapping) else None, None)
        if status_age is not None and status_age > 300:
            st.error("–î–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø–∞–π–ø–ª–∞–π–Ω —Å–∏–≥–Ω–∞–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        if not (active_api_key(settings) and active_api_secret(settings)):
            st.warning("API –∫–ª—é—á–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã: –±–µ–∑ –Ω–∏—Ö —Ç–æ—Ä–≥–æ–≤–ª—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")


def main() -> None:
    safe_set_page_config(page_title="Bybit Spot Guardian", page_icon="üß†", layout="wide")

    ensure_keys()
    state = st.session_state

    theme_dir = Path(__file__).resolve().parent / "ui"
    theme_files = {"dark": "theme.css", "light": "theme_light.css"}
    theme_name = str(state.get("ui_theme", "dark")).lower()
    theme_path = theme_dir / theme_files.get(theme_name, "theme.css")
    if not theme_path.exists():
        theme_path = theme_dir / "theme.css"
    if theme_path.exists():
        try:
            inject_css(theme_path.read_text(encoding="utf-8"))
        except Exception:  # pragma: no cover - IO errors
            pass

    try:
        validate_runtime_credentials()
    except CredentialValidationError as cred_err:
        show_error_banner(str(cred_err), title="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π")

    ensure_background_services()

    kill_state = get_kill_switch_state()

    auto_enabled = bool(state.get("auto_refresh_enabled", BASE_SESSION_STATE["auto_refresh_enabled"]))
    refresh_interval = int(state.get("refresh_interval", BASE_SESSION_STATE["refresh_interval"]))

    def _trigger_refresh() -> None:
        clear_data_caches()
        st.experimental_rerun()

    settings = get_settings()

    with st.sidebar:
        st.header("üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        kill_reason = st.text_input(
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
            value=state.get("kill_reason", BASE_SESSION_STATE.get("kill_reason", "Manual kill-switch")),
            key="kill_reason",
            help="–ë—É–¥–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –∫ –ø–∞—É–∑–µ –∏ Kill-Switch.",
        )
        pause_minutes_widget = st.number_input(
            "–ü–∞—É–∑–∞ (–º–∏–Ω)",
            min_value=5,
            max_value=1440,
            step=5,
            value=int(state.get("pause_minutes", BASE_SESSION_STATE.get("pause_minutes", 60))),
            disabled=kill_state.paused,
            key="pause_minutes",
        )
        pause_minutes = float(state.get("pause_minutes", pause_minutes_widget))
        if kill_state.paused:
            st.success("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            if kill_state.until:
                remaining_minutes = max((kill_state.until - time.time()) / 60.0, 0.0)
                st.caption(f"–î–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚âà {remaining_minutes:.1f} –º–∏–Ω.")
            if kill_state.reason:
                st.caption(f"–ü—Ä–∏—á–∏–Ω–∞: {kill_state.reason}")
            if st.button("‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É", use_container_width=True):
                clear_pause()
                _trigger_refresh()
        else:
            if st.button("‚è∏ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É", use_container_width=True):
                activate_kill_switch(pause_minutes, kill_reason or "Paused via dashboard")
                _trigger_refresh()

        st.divider()
        st.header("üõë Kill-Switch")
        kill_duration = st.number_input(
            "Kill-switch (–º–∏–Ω)",
            min_value=1,
            max_value=2880,
            step=5,
            value=int(state.get("kill_custom_minutes", BASE_SESSION_STATE.get("kill_custom_minutes", 60))),
            key="kill_custom_minutes",
        )
        if st.button("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Kill-Switch", use_container_width=True):
            activate_kill_switch(float(kill_duration), kill_reason or "Manual kill-switch")
            _trigger_refresh()
        if kill_state.paused and not kill_state.until:
            st.caption("Kill-Switch –∞–∫—Ç–∏–≤–µ–Ω –¥–æ —Ä—É—á–Ω–æ–≥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")

        st.divider()
        trade_ticket(
            settings=settings,
            client_factory=cached_api_client,
            state=state,
            on_success=[_trigger_refresh],
            key_prefix="quick_trade",
            compact=True,
            submit_label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä",
        )

        st.divider()
        st.header("üåê –§–∏–ª—å—Ç—Ä—ã —Å–∏–≥–Ω–∞–ª–æ–≤")
        actionable_only = st.checkbox(
            "–¢–æ–ª—å–∫–æ actionable",
            value=bool(state.get("signals_actionable_only", False)),
            key="signals_actionable_only",
        )
        ready_only = st.checkbox(
            "–¢–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã–µ",
            value=bool(state.get("signals_ready_only", False)),
            key="signals_ready_only",
        )
        hide_skipped = st.checkbox(
            "–°–∫—Ä—ã—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏",
            value=bool(state.get("signals_hide_skipped", False)),
            key="signals_hide_skipped",
        )
        min_ev = st.number_input(
            "–ú–∏–Ω. EV (bps)",
            min_value=0.0,
            step=1.0,
            value=float(state.get("signals_min_ev", 0.0)),
            key="signals_min_ev",
        )
        min_prob = st.slider(
            "–ú–∏–Ω. –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å (%)",
            min_value=0.0,
            max_value=100.0,
            step=1.0,
            value=float(state.get("signals_min_probability", 0.0)),
            key="signals_min_probability",
        )

        st.divider()
        st.header("‚è± –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
        auto_enabled = st.toggle("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", value=auto_enabled)
        refresh_interval = st.slider("–ò–Ω—Ç–µ—Ä–≤–∞–ª, —Å–µ–∫", min_value=5, max_value=120, value=refresh_interval)
        refresh_now = st.button("–û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å", use_container_width=True)
        state["auto_refresh_enabled"] = auto_enabled
        state["refresh_interval"] = refresh_interval
        if refresh_now:
            _trigger_refresh()
        if not auto_enabled:
            st.caption("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")

    if auto_enabled:
        auto_refresh(refresh_interval, key="home_auto_refresh_v2")

    guardian_snapshot = cached_guardian_snapshot()
    ws_snapshot = cached_ws_snapshot()
    preflight_snapshot = cached_preflight_snapshot()

    guardian_state = guardian_snapshot.get("state") if isinstance(guardian_snapshot, Mapping) else {}
    guardian_state = guardian_state if isinstance(guardian_state, Mapping) else {}
    report = guardian_state.get("report") if isinstance(guardian_state.get("report"), Mapping) else {}

    brief_payload = guardian_state.get("brief") if isinstance(guardian_state.get("brief"), Mapping) else {}
    if not brief_payload and isinstance(report.get("brief"), Mapping):
        brief_payload = report.get("brief", {})  # type: ignore[assignment]

    health = _normalise_health(report.get("health"))
    watchlist = _normalise_watchlist(report.get("watchlist"))
    actions = collect_user_actions(settings, brief_payload, health, watchlist)

    guardian_error = guardian_snapshot.get("error")
    if guardian_error:
        show_error_banner(str(guardian_error), title="Guardian background worker")

    preflight_error = preflight_snapshot.get("error")
    if preflight_error:
        show_error_banner(str(preflight_error), title="Preflight")

    def _state_float(key: str, default: float = 0.0) -> float:
        value = state.get(key, default)
        try:
            return float(value)
        except (TypeError, ValueError):
            return float(default)

    signal_filters = {
        "actionable_only": bool(state.get("signals_actionable_only", False)),
        "ready_only": bool(state.get("signals_ready_only", False)),
        "hide_skipped": bool(state.get("signals_hide_skipped", False)),
        "min_ev_bps": _state_float("signals_min_ev", 0.0),
        "min_probability": _state_float("signals_min_probability", 0.0),
    }

    tabs = st.tabs(["Dashboard", "Signals", "Orders", "Wallet", "Settings", "Logs"])

    with tabs[0]:
        status_bar(
            settings,
            guardian_snapshot=guardian_snapshot,
            ws_snapshot=ws_snapshot,
            report=report,
            kill_switch=kill_state,
        )
        metrics_strip(report)
        if not guardian_state:
            st.info(
                "–§–æ–Ω–æ–≤—ã–µ —Å–ª—É–∂–±—ã –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ ‚Äî —Å–≤–µ–∂–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            )
        st.markdown("### –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        if actions:
            for action in actions:
                icon = str(action.get("icon") or "").strip()
                title = str(action.get("title") or "").strip()
                description = str(action.get("description") or "").strip()
                tone = str(action.get("tone") or "info").lower()
                message = " ".join(part for part in (icon, f"**{title}**", description) if part).strip()
                if tone == "danger":
                    st.error(message)
                elif tone == "warning":
                    st.warning(message)
                elif tone == "success":
                    st.success(message)
                else:
                    st.info(message)
                page = action.get("page")
                if isinstance(page, str) and page:
                    navigation_link(
                        page,
                        label=action.get("page_label") or "–û—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–¥–µ–ª",
                        key=f"action_link_{page}_{title}",
                    )
        else:
            st.success("–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–µ–ª—ë–Ω—ã–µ ‚Äî –º–æ–∂–Ω–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª–µ.")
        if watchlist:
            st.markdown("### –ù–∞–±–ª—é–¥–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤—ã")
            st.dataframe(
                arrow_safe(pd.DataFrame(watchlist)),
                hide_index=True,
                use_container_width=True,
                key="dashboard_watchlist",
            )

    with tabs[1]:
        signals_table(
            report.get("symbol_plan") if isinstance(report, Mapping) else {},
            filters=signal_filters,
            table_key="signals_table_main",
        )
        caution = ""
        if isinstance(brief_payload, Mapping):
            caution = str(brief_payload.get("caution") or "").strip()
        if caution:
            st.warning(caution)
        if watchlist:
            st.divider()
            st.markdown("**Watchlist**")
            st.dataframe(
                arrow_safe(pd.DataFrame(watchlist)),
                hide_index=True,
                use_container_width=True,
                key="signals_watchlist",
            )

    with tabs[2]:
        orders_table(report)

        trade_ticket(
            settings,
            client_factory=cached_api_client,
            state=state,
            on_success=[_trigger_refresh],
        )

    with tabs[3]:
        wallet_overview(report)

    with tabs[4]:
        st.subheader("–°—Ç—Ä–∞—Ç–µ–≥–∏—è")
        buy_threshold = float(getattr(settings, "ai_buy_threshold", 0.52) * 100.0)
        sell_threshold = float(getattr(settings, "ai_sell_threshold", 0.42) * 100.0)
        min_ev = float(getattr(settings, "ai_min_ev_bps", 12.0))
        kill_streak = int(getattr(settings, "ai_kill_switch_loss_streak", 0) or 0)
        kill_cooldown = float(getattr(settings, "ai_kill_switch_cooldown_min", 60.0) or 0.0)

        buy_value = st.slider("–ü–æ—Ä–æ–≥ –ø–æ–∫—É–ø–∫–∏ (%)", min_value=40.0, max_value=90.0, value=buy_threshold, step=0.5)
        sell_value = st.slider("–ü–æ—Ä–æ–≥ –ø—Ä–æ–¥–∞–∂–∏ (%)", min_value=10.0, max_value=60.0, value=sell_threshold, step=0.5)
        ev_value = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞ (bps)", min_value=0.0, value=min_ev, step=1.0)
        kill_streak_value = st.number_input("Kill-switch: —Å–µ—Ä–∏—è —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫", min_value=0, value=kill_streak, step=1)
        kill_cooldown_value = st.number_input("Kill-switch: –ø–∞—É–∑–∞ (–º–∏–Ω)", min_value=0.0, value=kill_cooldown, step=5.0)

        st.subheader("–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã")
        dry_run_value = st.toggle("–£—á–µ–±–Ω—ã–π —Ä–µ–∂–∏–º (DRY-RUN)", value=active_dry_run(settings))
        network_value = st.selectbox("–°–µ—Ç—å", ["Testnet", "Mainnet"], index=0 if settings.testnet else 1)

        st.subheader("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        refresh_slider = st.slider("–ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫)", min_value=5, max_value=120, value=refresh_interval, key="settings_refresh_interval")
        if refresh_slider != state.get("refresh_interval"):
            state["refresh_interval"] = refresh_slider
        theme_options = [("dark", "–¢—ë–º–Ω–∞—è —Ç–µ–º–∞"), ("light", "–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞")]
        current_theme_index = next((index for index, (value, _) in enumerate(theme_options) if value == theme_name), 0)
        selected_theme = st.selectbox(
            "–¢–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
            theme_options,
            index=current_theme_index,
            format_func=lambda item: item[1],
        )
        if isinstance(selected_theme, tuple):
            chosen_theme = selected_theme[0]
        else:
            chosen_theme = theme_name
        if chosen_theme != theme_name:
            state["ui_theme"] = chosen_theme
            st.experimental_rerun()

        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            update_settings(
                ai_buy_threshold=buy_value / 100.0,
                ai_sell_threshold=sell_value / 100.0,
                ai_min_ev_bps=ev_value,
                ai_kill_switch_loss_streak=kill_streak_value,
                ai_kill_switch_cooldown_min=kill_cooldown_value,
                dry_run=dry_run_value,
                testnet=(network_value == "Testnet"),
            )
            settings = get_settings(force_reload=True)
            clear_data_caches()
            st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

    with tabs[5]:
        log_path = Path(__file__).resolve().parent / "_data" / "logs" / "app.log"
        log_viewer(log_path, state=state)


if __name__ == "__main__":
    main()
