
from __future__ import annotations

from textwrap import dedent

import streamlit as st

from bybit_app.utils.ui import (
    safe_set_page_config,
    inject_css,
    build_pill,
    build_status_card,
)
from bybit_app.utils.paths import APP_ROOT
from bybit_app.utils.envs import get_settings

safe_set_page_config(page_title="Bybit Smart OCO ‚Äî PRO", page_icon="üß†", layout="wide")

GLOBAL_CSS = """
@import url('https://fonts.googleapis.com/css2?family=Manrope:wght@400;500;600;700&display=swap');

:root { color-scheme: dark; }
html, body, [class*="css"] { font-family: 'Manrope', sans-serif; }
.block-container { padding: 1.6rem 2.4rem 3rem; max-width: 1240px; }
[data-testid="stSidebar"] > div:first-child { background: linear-gradient(180deg, rgba(15,23,42,0.95), rgba(15,118,110,0.75)); }
[data-testid="stSidebar"] nav { padding-top: 0.5rem; }
.stButton>button {
    border-radius: 14px;
    padding: 0.75rem 1.1rem;
    font-weight: 600;
    background: linear-gradient(120deg, rgba(16,185,129,0.9), rgba(45,212,191,0.85));
    border: none;
    color: white;
    box-shadow: 0 12px 30px rgba(45,212,191,0.28);
    transition: transform 0.18s ease, box-shadow 0.18s ease;
}
.stButton>button:hover { transform: translateY(-2px); box-shadow: 0 18px 40px rgba(45,212,191,0.32); }
.stTabs [role="tablist"] { gap: 0.6rem; }
.stTabs [role="tab"] {
    padding: 0.6rem 1.35rem;
    border-radius: 999px;
    background: rgba(148, 163, 184, 0.12);
    color: rgba(226, 232, 240, 0.9);
    border: 1px solid transparent;
    transition: background 0.2s ease, color 0.2s ease, border 0.2s ease;
}
.stTabs [role="tab"][aria-selected="true"] {
    background: linear-gradient(120deg, rgba(16,185,129,0.95), rgba(45,212,191,0.85));
    color: white;
    border-color: rgba(16,185,129,0.55);
    box-shadow: 0 14px 32px rgba(16,185,129,0.25);
}
.stMetric {
    background: rgba(15,118,110,0.12);
    border-radius: 18px;
    padding: 0.9rem 1.1rem;
    border: 1px solid rgba(45,212,191,0.35);
}
.metric-subtitle { font-size: 0.8rem; opacity: 0.65; margin-top: 0.2rem; }
.bybit-hero {
    background: linear-gradient(135deg, rgba(30,41,59,0.92), rgba(15,118,110,0.88));
    color: white;
    padding: 1.6rem 1.9rem;
    border-radius: 22px;
    box-shadow: 0 20px 52px rgba(15, 118, 110, 0.28);
    margin-bottom: 1.5rem;
    position: relative;
    overflow: hidden;
}
.bybit-hero::after {
    content: "";
    position: absolute;
    inset: -40% 40% auto auto;
    width: 260px;
    height: 260px;
    background: radial-gradient(circle, rgba(56,189,248,0.45) 0%, rgba(15,118,110,0) 70%);
    opacity: 0.7;
}
.bybit-hero h1 { margin-bottom: 0.4rem; font-size: 2.4rem; }
.bybit-hero__sub { opacity: 0.9; font-size: 1.05rem; max-width: 760px; }
.hero-grid { display: flex; flex-wrap: wrap; gap: 0.5rem; margin-top: 0.85rem; position: relative; z-index: 1; }
.hero-grid .bybit-pill { background: rgba(255,255,255,0.18); color: white; }
.hero-grid .bybit-pill.bybit-pill--success { background: rgba(45,212,191,0.28); color: #0f172a; }
.hero-grid .bybit-pill.bybit-pill--warning { background: rgba(250,204,21,0.3); color: #0f172a; }
.hero-grid .bybit-pill.bybit-pill--danger { background: rgba(248,113,113,0.3); color: #0f172a; }
.quick-actions__desc { font-size: 0.85rem; opacity: 0.75; margin-top: 0.45rem; }
@media (max-width: 900px) {
    .block-container { padding: 1.2rem 1.2rem 2.4rem; }
    .bybit-hero { padding: 1.35rem 1.4rem; }
    .bybit-hero h1 { font-size: 2rem; }
}
"""

inject_css(GLOBAL_CSS)

def render_hero() -> None:
    hero_badges = [
        build_pill("–†–µ–∞–∫—Ü–∏—è < 1s", icon="‚ö°"),
        build_pill("AI OCO & TWAP", icon="üß†"),
        build_pill("Risk Guards", icon="üõ°", tone="success"),
        build_pill("Telegram Ping", icon="üîî"),
    ]

    st.markdown(
        dedent(
            f"""
            <div class="bybit-hero">
                <h1>Bybit Smart OCO ‚Äî PRO</h1>
                <p class="bybit-hero__sub">–£–º–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏, –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å —Ä–∏—Å–∫–æ–≤ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ü–µ–Ω–∏—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π.</p>
                <div class="hero-grid">{''.join(hero_badges)}</div>
            </div>
            """
        ),
        unsafe_allow_html=True,
    )
    st.caption("–£–ª—É—á—à–µ–Ω–Ω–∞—è 3Commas: —É–º–Ω—ã–π OCO, –ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –∂–∏–≤—ã–µ —Å—Ç–∞—Ç—É—Å—ã.")


def render_mission() -> None:
    st.subheader("üéØ –ú–∏—Å—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    st.markdown(
        """
        - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∂–∏–≤—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞, —á—Ç–æ–±—ã –≤—ã –ø–æ–Ω–∏–º–∞–ª–∏ **—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å**;
        - –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –±–∞–∑–µ AI‚Äë–º–æ–¥–µ–ª–∏ –∏ –ø–æ–º–æ–≥–∞–µ—Ç —Ä–µ—à–∏—Ç—å, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è **–ø–æ–∫—É–ø–∞—Ç—å, –ø—Ä–æ–¥–∞–≤–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å**;
        - –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç —Å–¥–µ–ª–∫–∏ OCO –∏ TWAP, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—è –∫–æ–º–∏—Å—Å–∏–∏ –∏ —Å–ø—Ä—ç–¥—ã, —á—Ç–æ–±—ã –∑–∞–±–∏—Ä–∞—Ç—å **–º–∞–∫—Å–∏–º—É–º –ø—Ä–∏–±—ã–ª–∏** —Å –±–∏—Ä–∂–∏;
        - –¥–µ–ª–∏—Ç—Å—è –≤—Å–µ–π —Å–ª—É–∂–µ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π: –æ—Ç—á—ë—Ç—ã, —Å—Ç–∞—Ç—É—Å WebSocket, –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram;
        - –≤–∫–ª—é—á–∞–µ—Ç —Å—Ç—Ä–æ–≥–∏–µ risk‚Äëguards –∏ kill‚Äëswitch'–∏, —á—Ç–æ–±—ã **–Ω–µ –¥–∞—Ç—å —Å—á—ë—Ç—É —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å** –∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é –ø—Ä–∏ —É–≥—Ä–æ–∑–µ —É–±—ã—Ç–∫–∞.
        """
    )


def render_status_section(settings) -> None:
    ok = bool(settings.api_key and settings.api_secret)
    with st.container(border=True):
        st.markdown("#### ‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ñ–∏–ª—è")
        col_a, col_b = st.columns([1.2, 1])
        status_title = "–í—Å–µ –∫–ª—é—á–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã" if ok else "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API"
        status_hint = (
            "–ì–æ—Ç–æ–≤—ã –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º."
            if ok
            else "–î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á –∏ —Å–µ–∫—Ä–µ—Ç, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é."
        )
        status_html = build_status_card(
            status_title,
            status_hint,
            icon="üîê" if ok else "‚ö†Ô∏è",
            tone="success" if ok else "warning",
        )
        with col_a:
            st.markdown(status_html, unsafe_allow_html=True)
        with col_b:
            st.metric("–†–µ–∂–∏–º", "Testnet" if settings.testnet else "Mainnet", help="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ —Å–µ—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
            st.metric(
                "DRY-RUN",
                "ON" if settings.dry_run else "OFF",
                help="–í–∫–ª—é—á–∏—Ç–µ DRY-RUN, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤.",
            )

        updated_at = getattr(settings, "updated_at", None)
        last_update = updated_at.strftime("%d.%m.%Y %H:%M:%S") if updated_at else "‚Äî"
        st.caption(
            f"API key: {'‚úÖ' if settings.api_key else '‚ùå'} ¬∑ Secret: {'‚úÖ' if settings.api_secret else '‚ùå'} ¬∑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {last_update}"
        )


def _render_metric(column, *, label: str, value: str, help_text: str, hint: str) -> None:
    column.metric(label, value, help=help_text)
    column.markdown(
        f"<div class='metric-subtitle'>{hint}</div>",
        unsafe_allow_html=True,
    )


def _risk_metrics(settings) -> list[dict[str, str]]:
    cap_guard = 100 - float(getattr(settings, "spot_cash_reserve_pct", 10.0) or 0.0)
    return [
        {
            "label": "–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É",
            "value": f"{getattr(settings, 'ai_risk_per_trade_pct', 0.25):.2f}%",
            "help_text": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ª—è –∫–∞–ø–∏—Ç–∞–ª–∞, –∫–æ—Ç–æ—Ä—É—é –±–æ—Ç —Ä–∏—Å–∫—É–µ—Ç –≤ –æ–¥–Ω–æ–π —Å–¥–µ–ª–∫–µ.",
            "hint": "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è ‚â§ 0.50% –¥–ª—è —Å–ø–æ–∫–æ–π–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏.",
        },
        {
            "label": "–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É–±—ã—Ç–∫–∞",
            "value": f"{getattr(settings, 'ai_daily_loss_limit_pct', 3.0):.2f}%",
            "help_text": "–ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ —Ç–æ—Ä–≥–æ–≤–ª—è —Å—Ç–∞–≤–∏—Ç—Å—è –Ω–∞ –ø–∞—É–∑—É.",
            "hint": "–ü–æ—Å–ª–µ –ø–∞—É–∑—ã –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä—ã–Ω–æ–∫ –∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ —Ä–∏—Å–∫.",
        },
        {
            "label": "–ó–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª",
            "value": f"‚â§ {cap_guard:.0f}%",
            "help_text": "–ß–∞—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞, —á—Ç–æ–±—ã –ø–æ—Ä—Ç—Ñ–µ–ª—å –Ω–µ —É—Ö–æ–¥–∏–ª –≤ –º–∏–Ω—É—Å.",
            "hint": "–†–µ–∑–µ—Ä–≤ –ø–æ–º–æ–≥–∞–µ—Ç –ø–µ—Ä–µ–∂–∏—Ç—å –ø–æ–≤—ã—à–µ–Ω–Ω—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å.",
        },
    ]


def render_risk_controls(settings) -> None:
    st.subheader("üõ° –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞–ø–∏—Ç–∞–ª–∞")
    risk_cols = st.columns(3)
    for column, metric in zip(risk_cols, _risk_metrics(settings)):
        _render_metric(column, **metric)
    st.caption(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–∞—Ö üß† AI-–¢—Ä–µ–π–¥–µ—Ä –∏ üß≠ –ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º. –í–∫–ª—é—á—ë–Ω–Ω–∞—è –æ–ø—Ü–∏—è DRY-RUN –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤."
    )


_QUICK_ACTIONS = [
    {
        "label": "üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
        "page": "pages/00_‚úÖ_–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ_–∏_–°–æ—Å—Ç–æ—è–Ω–∏–µ.py",
        "description": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á–∏, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–æ—Å—Ç—É–ø –∫ –±–∏—Ä–∂–µ.",
    },
    {
        "label": "üìà AI-—Å–∫—Ä–∏–Ω–µ—Ä —Ä—ã–Ω–∫–∞",
        "page": "pages/01_üìà_–°–∫—Ä–∏–Ω–µ—Ä.py",
        "description": "–ü–æ–ª—É—á–∏—Ç–µ —Å–≤–µ–∂–∏–µ —Å–∏–≥–Ω–∞–ª—ã –∏ —Ç–µ–ø–ª–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.",
    },
    {
        "label": "üéØ –°–º–∞—Ä—Ç —Å–¥–µ–ª–∫–∏ OCO",
        "page": "pages/04_üéØ_–°–º–∞—Ä—Ç_–°–¥–µ–ª–∫–∏_OCO.py",
        "description": "–ó–∞–ø—É—Å–∫–∞–π—Ç–µ —É–º–Ω—ã–µ OCO-—Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è.",
    },
    {
        "label": "üßÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–º –ø–æ—Ä—Ç—Ñ–µ–ª—è",
        "page": "pages/05_üßÆ_Portfolio_Risk_Spot.py",
        "description": "–í—ã—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ –ª–∏–º–∏—Ç—ã —Ä–∏—Å–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–µ—Ç–æ–¥–∏–∫–µ.",
    },
    {
        "label": "üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π –¥–∞—à–±–æ—Ä–¥",
        "page": "pages/06_üìä_–ü–æ—Ä—Ç—Ñ–µ–ª—å_–î–∞—à–±–æ—Ä–¥.py",
        "description": "–°–ª–µ–¥–∏—Ç–µ –∑–∞ PnL, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∞–∫—Ç–∏–≤–æ–≤ –∏ –¥–∏–Ω–∞–º–∏–∫–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—è.",
    },
    {
        "label": "ü™µ –õ–æ–≥–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        "page": "pages/07_ü™µ_–õ–æ–≥–∏.py",
        "description": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π, –∞–ª–µ—Ä—Ç–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Telegram.",
    },
]


def render_quick_actions() -> None:
    with st.container(border=True):
        st.markdown("#### üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        quick_cols = st.columns(3, gap="large")
        for idx, action in enumerate(_QUICK_ACTIONS):
            column = quick_cols[idx % len(quick_cols)]
            with column.container(border=True):
                if st.button(action["label"], use_container_width=True, key=f"quick_{action['page']}"):
                    st.switch_page(action["page"])
                st.markdown(
                    f"<div class='quick-actions__desc'>{action['description']}</div>",
                    unsafe_allow_html=True,
                )
        st.caption("–°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —à–∞–≥–∏ –≤—ã–Ω–µ—Å–µ–Ω—ã —Å—é–¥–∞, —á—Ç–æ–±—ã –≤—ã –±—ã—Å—Ç—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–ª–∏ –∫ –∞–Ω–∞–ª–∏–∑—É –∏ –¥–µ–π—Å—Ç–≤–∏—è–º.")


def render_modes_section() -> None:
    st.markdown("#### üß≠ –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã")
    mode_tabs = st.tabs(["AI-—Ç—Ä–µ–π–¥–µ—Ä", "–ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º", "–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞"])
    with mode_tabs[0]:
        st.success(
            "AI-–º–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª—è–µ—Ç OCO –∏ TWAP, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ª–∏–º–∏—Ç—ã, —Å–ª–µ–¥–∏—Ç –∑–∞ –∫–æ–º–∏—Å—Å–∏—è–º–∏ –∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–¥ —Ç–µ–∫—É—â–∏–π —Ä—ã–Ω–æ–∫."
        )
        st.write(
            "- –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–¥–µ–ª–∫–∏ –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º –º–æ–¥–µ–ª–∏ –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑–¥–µ–ª–µ OCO.\n"
            "- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏ AI, —á—Ç–æ–±—ã –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞—Ç—å –¥–æ–ø—É—â–µ–Ω–∏—è –∏ —Å–∫–æ—Ä–∏–Ω–≥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."
        )
    with mode_tabs[1]:
        st.info(
            "–ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º –ø–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –∑–∞—â–∏—Ç–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–ø–∏—Ç–∞–ª–æ–º –≤—Ä—É—á–Ω—É—é –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫."
        )
        st.write(
            "- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–∏–º–∏—Ç—ã –∏ kill-switch –≤ —Ä–∞–∑–¥–µ–ª–µ Order Hygiene.\n"
            "- –û—Ü–µ–Ω–∏—Ç–µ –º–æ–º–µ–Ω—Ç –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–Ω–µ—Ä –∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥—ã."
        )
    with mode_tabs[2]:
        st.warning(
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º API, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –≤—Ä–µ–º–µ–Ω–∏ –∏ WebSocket: —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ –≤–∞–∂–Ω–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è."
        )
        st.write(
            "- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª—ã WebSocket Status –∏ Health TimeSync.\n"
            "- –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram-–±–æ—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è."
        )


def render_footer() -> None:
    st.write("–§–∞–π–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:", APP_ROOT)
    st.write("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é —Å–ª–µ–≤–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤. –ù–∞—á–Ω–∏—Ç–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã **–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ**.")


def main() -> None:
    settings = get_settings()

    render_hero()
    render_mission()
    render_status_section(settings)
    st.divider()

    render_risk_controls(settings)
    st.divider()

    render_quick_actions()
    st.divider()

    render_modes_section()
    render_footer()


if __name__ == "__main__":
    main()
